/*! dustjs-linkedin - v2.7.2
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define("dust.core",[],b):"object"==typeof exports?module.exports=b():a.dust=b()}(this,function(){function getTemplate(a,b){return a?"function"==typeof a&&a.template?a.template:dust.isTemplateFn(a)?a:b!==!1?dust.cache[a]:void 0:void 0}function load(a,b,c){if(!a)return b.setError(new Error("No template or template name provided to render"));var d=getTemplate(a,dust.config.cache);return d?d(b,Context.wrap(c,d.templateName)):dust.onLoad?b.map(function(b){function d(a,d){var f;if(a)return b.setError(a);if(f=getTemplate(d,!1)||getTemplate(e,dust.config.cache),!f){if(!dust.compile)return b.setError(new Error("Dust compiler not available"));f=dust.loadSource(dust.compile(d,e))}f(b,Context.wrap(c,f.templateName)).end()}var e=a;3===dust.onLoad.length?dust.onLoad(e,c.options,d):dust.onLoad(e,d)}):b.setError(new Error("Template Not Found: "+a))}function Context(a,b,c,d,e){void 0===a||a instanceof Stack||(a=new Stack(a)),this.stack=a,this.global=b,this.options=c,this.blocks=d,this.templateName=e}function getWithResolvedData(a,b,c){return function(d){return a.push(d)._get(b,c)}}function Stack(a,b,c,d){this.tail=b,this.isObject=a&&"object"==typeof a,this.head=a,this.index=c,this.of=d}function Stub(a){this.head=new Chunk(this),this.callback=a,this.out=""}function Stream(){this.head=new Chunk(this)}function Chunk(a,b,c){this.root=a,this.next=b,this.data=[],this.flushable=!1,this.taps=c}function Tap(a,b){this.head=a,this.tail=b}var dust={version:"2.7.2"},NONE="NONE",ERROR="ERROR",WARN="WARN",INFO="INFO",DEBUG="DEBUG",EMPTY_FUNC=function(){};dust.config={whitespace:!1,amd:!1,cjs:!1,cache:!0},dust._aliases={write:"w",end:"e",map:"m",render:"r",reference:"f",section:"s",exists:"x",notexists:"nx",block:"b",partial:"p",helper:"h"},function(){var a,b,c={DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4};"undefined"!=typeof console&&console.log?(a=console.log,b="function"==typeof a?function(){a.apply(console,arguments)}:function(){a(Array.prototype.slice.apply(arguments).join(" "))}):b=EMPTY_FUNC,dust.log=function(a,d){d=d||INFO,c[d]>=c[dust.debugLevel]&&b("[DUST:"+d+"]",a)},dust.debugLevel=NONE,"undefined"!=typeof process&&process.env&&/\bdust\b/.test(process.env.DEBUG)&&(dust.debugLevel=DEBUG)}(),dust.helpers={},dust.cache={},dust.register=function(a,b){a&&(b.templateName=a,dust.config.cache!==!1&&(dust.cache[a]=b))},dust.render=function(a,b,c){var d=new Stub(c).head;try{load(a,d,b).end()}catch(e){d.setError(e)}},dust.stream=function(a,b){var c=new Stream,d=c.head;return dust.nextTick(function(){try{load(a,d,b).end()}catch(c){d.setError(c)}}),c},dust.loadSource=function(source){return eval(source)},dust.isArray=Array.isArray?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},dust.nextTick=function(){return function(a){setTimeout(a,0)}}(),dust.isEmpty=function(a){return 0===a?!1:dust.isArray(a)&&!a.length?!0:!a},dust.isEmptyObject=function(a){var b;if(null===a)return!1;if(void 0===a)return!1;if(a.length>0)return!1;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b))return!1;return!0},dust.isTemplateFn=function(a){return"function"==typeof a&&a.__dustBody},dust.isThenable=function(a){return a&&"object"==typeof a&&"function"==typeof a.then},dust.isStreamable=function(a){return a&&"function"==typeof a.on&&"function"==typeof a.pipe},dust.filter=function(a,b,c,d){var e,f,g,h;if(c)for(e=0,f=c.length;f>e;e++)g=c[e],g.length&&(h=dust.filters[g],"s"===g?b=null:"function"==typeof h?a=h(a,d):dust.log("Invalid filter `"+g+"`",WARN));return b&&(a=dust.filters[b](a,d)),a},dust.filters={h:function(a){return dust.escapeHtml(a)},j:function(a){return dust.escapeJs(a)},u:encodeURI,uc:encodeURIComponent,js:function(a){return dust.escapeJSON(a)},jp:function(a){return JSON?JSON.parse(a):(dust.log("JSON is undefined; could not parse `"+a+"`",WARN),a)}},dust.makeBase=dust.context=function(a,b){return new Context(void 0,a,b)},Context.wrap=function(a,b){return a instanceof Context?a:new Context(a,{},{},null,b)},Context.prototype.get=function(a,b){return"string"==typeof a&&("."===a[0]&&(b=!0,a=a.substr(1)),a=a.split(".")),this._get(b,a)},Context.prototype._get=function(a,b){var c,d,e,f,g,h=this.stack||{},i=1;if(d=b[0],e=b.length,a&&0===e)f=h,h=h.head;else{if(a)h&&(h=h.head?h.head[d]:void 0);else{for(;h&&(!h.isObject||(f=h.head,c=h.head[d],void 0===c));)h=h.tail;h=void 0!==c?c:this.global&&this.global[d]}for(;h&&e>i;){if(dust.isThenable(h))return h.then(getWithResolvedData(this,a,b.slice(i)));f=h,h=h[b[i]],i++}}return"function"==typeof h?(g=function(){try{return h.apply(f,arguments)}catch(a){throw dust.log(a,ERROR),a}},g.__dustBody=!!h.__dustBody,g):(void 0===h&&dust.log("Cannot find reference `{"+b.join(".")+"}` in template `"+this.getTemplateName()+"`",INFO),h)},Context.prototype.getPath=function(a,b){return this._get(a,b)},Context.prototype.push=function(a,b,c){return void 0===a?(dust.log("Not pushing an undefined variable onto the context",INFO),this):this.rebase(new Stack(a,this.stack,b,c))},Context.prototype.pop=function(){var a=this.current();return this.stack=this.stack&&this.stack.tail,a},Context.prototype.rebase=function(a){return new Context(a,this.global,this.options,this.blocks,this.getTemplateName())},Context.prototype.clone=function(){var a=this.rebase();return a.stack=this.stack,a},Context.prototype.current=function(){return this.stack&&this.stack.head},Context.prototype.getBlock=function(a){var b,c,d;if("function"==typeof a&&(a=a(new Chunk,this).data.join("")),b=this.blocks,!b)return dust.log("No blocks for context `"+a+"` in template `"+this.getTemplateName()+"`",DEBUG),!1;for(c=b.length;c--;)if(d=b[c][a])return d;return dust.log("Malformed template `"+this.getTemplateName()+"` was missing one or more blocks."),!1},Context.prototype.shiftBlocks=function(a){var b,c=this.blocks;return a?(b=c?c.concat([a]):[a],new Context(this.stack,this.global,this.options,b,this.getTemplateName())):this},Context.prototype.resolve=function(a){var b;return"function"!=typeof a?a:(b=(new Chunk).render(a,this),b instanceof Chunk?b.data.join(""):b)},Context.prototype.getTemplateName=function(){return this.templateName},Stub.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.callback(a.error),dust.log("Rendering failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.out+=a.data.join(""),a=a.next,this.head=a}this.callback(null,this.out)},Stream.prototype.flush=function(){for(var a=this.head;a;){if(!a.flushable)return a.error?(this.emit("error",a.error),this.emit("end"),dust.log("Streaming failed with error `"+a.error+"`",ERROR),void(this.flush=EMPTY_FUNC)):void 0;this.emit("data",a.data.join("")),a=a.next,this.head=a}this.emit("end")},Stream.prototype.emit=function(a,b){var c,d,e=this.events||{},f=e[a]||[];if(!f.length)return dust.log("Stream broadcasting, but no listeners for `"+a+"`",DEBUG),!1;for(f=f.slice(0),c=0,d=f.length;d>c;c++)f[c](b);return!0},Stream.prototype.on=function(a,b){var c=this.events=this.events||{},d=c[a]=c[a]||[];return"function"!=typeof b?dust.log("No callback function provided for `"+a+"` event listener",WARN):d.push(b),this},Stream.prototype.pipe=function(a){if("function"!=typeof a.write||"function"!=typeof a.end)return dust.log("Incompatible stream passed to `pipe`",WARN),this;var b=!1;return"function"==typeof a.emit&&a.emit("pipe",this),"function"==typeof a.on&&a.on("error",function(){b=!0}),this.on("data",function(c){if(!b)try{a.write(c,"utf8")}catch(d){dust.log(d,ERROR)}}).on("end",function(){if(!b)try{a.end(),b=!0}catch(c){dust.log(c,ERROR)}})},Chunk.prototype.write=function(a){var b=this.taps;return b&&(a=b.go(a)),this.data.push(a),this},Chunk.prototype.end=function(a){return a&&this.write(a),this.flushable=!0,this.root.flush(),this},Chunk.prototype.map=function(a){var b=new Chunk(this.root,this.next,this.taps),c=new Chunk(this.root,b,this.taps);this.next=c,this.flushable=!0;try{a(c)}catch(d){dust.log(d,ERROR),c.setError(d)}return b},Chunk.prototype.tap=function(a){var b=this.taps;return this.taps=b?b.push(a):new Tap(a),this},Chunk.prototype.untap=function(){return this.taps=this.taps.tail,this},Chunk.prototype.render=function(a,b){return a(this,b)},Chunk.prototype.reference=function(a,b,c,d){return"function"==typeof a?(a=a.apply(b.current(),[this,b,null,{auto:c,filters:d}]),a instanceof Chunk?a:this.reference(a,b,c,d)):dust.isThenable(a)?this.await(a,b,null,c,d):dust.isStreamable(a)?this.stream(a,b,null,c,d):dust.isEmpty(a)?this:this.write(dust.filter(a,c,d,b))},Chunk.prototype.section=function(a,b,c,d){var e,f,g,h=c.block,i=c["else"],j=this;if("function"==typeof a&&!dust.isTemplateFn(a)){try{a=a.apply(b.current(),[this,b,c,d])}catch(k){return dust.log(k,ERROR),this.setError(k)}if(a instanceof Chunk)return a}if(dust.isEmptyObject(c))return j;if(dust.isEmptyObject(d)||(b=b.push(d)),dust.isArray(a)){if(h){if(f=a.length,f>0){for(g=b.stack&&b.stack.head||{},g.$len=f,e=0;f>e;e++)g.$idx=e,j=h(j,b.push(a[e],e,f));return g.$idx=void 0,g.$len=void 0,j}if(i)return i(this,b)}}else{if(dust.isThenable(a))return this.await(a,b,c);if(dust.isStreamable(a))return this.stream(a,b,c);if(a===!0){if(h)return h(this,b)}else if(a||0===a){if(h)return h(this,b.push(a))}else if(i)return i(this,b)}return dust.log("Section without corresponding key in template `"+b.getTemplateName()+"`",DEBUG),this},Chunk.prototype.exists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(e)return e(this,b)}else{if(d)return d(this,b);dust.log("No block for exists check in template `"+b.getTemplateName()+"`",DEBUG)}return this},Chunk.prototype.notexists=function(a,b,c){var d=c.block,e=c["else"];if(dust.isEmpty(a)){if(d)return d(this,b);dust.log("No block for not-exists check in template `"+b.getTemplateName()+"`",DEBUG)}else if(e)return e(this,b);return this},Chunk.prototype.block=function(a,b,c){var d=a||c.block;return d?d(this,b):this},Chunk.prototype.partial=function(a,b,c,d){var e;return void 0===d&&(d=c,c=b),dust.isEmptyObject(d)||(c=c.clone(),e=c.pop(),c=c.push(d).push(e)),dust.isTemplateFn(a)?this.capture(a,b,function(a,b){c.templateName=a,load(a,b,c).end()}):(c.templateName=a,load(a,this,c))},Chunk.prototype.helper=function(a,b,c,d,e){var f,g=this,h=d.filters;if(void 0===e&&(e="h"),!dust.helpers[a])return dust.log("Helper `"+a+"` does not exist",WARN),g;try{return f=dust.helpers[a](g,b,c,d),f instanceof Chunk?f:("string"==typeof h&&(h=h.split("|")),dust.isEmptyObject(c)?g.reference(f,b,e,h):g.section(f,b,c,d))}catch(i){return dust.log("Error in helper `"+a+"`: "+i.message,ERROR),g.setError(i)}},Chunk.prototype.await=function(a,b,c,d,e){return this.map(function(f){a.then(function(a){f=c?f.section(a,b,c):f.reference(a,b,d,e),f.end()},function(a){var d=c&&c.error;d?f.render(d,b.push(a)).end():(dust.log("Unhandled promise rejection in `"+b.getTemplateName()+"`",INFO),f.end())})})},Chunk.prototype.stream=function(a,b,c,d,e){var f=c&&c.block,g=c&&c.error;return this.map(function(h){var i=!1;a.on("data",function(a){i||(f?h=h.map(function(c){c.render(f,b.push(a)).end()}):c||(h=h.reference(a,b,d,e)))}).on("error",function(a){i||(g?h.render(g,b.push(a)):dust.log("Unhandled stream error in `"+b.getTemplateName()+"`",INFO),i||(i=!0,h.end()))}).on("end",function(){i||(i=!0,h.end())})})},Chunk.prototype.capture=function(a,b,c){return this.map(function(d){var e=new Stub(function(a,b){a?d.setError(a):c(b,d)});a(e.head,b).end()})},Chunk.prototype.setError=function(a){return this.error=a,this.root.flush(),this};for(var f in Chunk.prototype)dust._aliases[f]&&(Chunk.prototype[dust._aliases[f]]=Chunk.prototype[f]);Tap.prototype.push=function(a){return new Tap(a,this)},Tap.prototype.go=function(a){for(var b=this;b;)a=b.head(a),b=b.tail;return a};var HCHARS=/[&<>"']/,AMP=/&/g,LT=/</g,GT=/>/g,QUOT=/\"/g,SQUOT=/\'/g;dust.escapeHtml=function(a){return"string"==typeof a||a&&"function"==typeof a.toString?("string"!=typeof a&&(a=a.toString()),HCHARS.test(a)?a.replace(AMP,"&amp;").replace(LT,"&lt;").replace(GT,"&gt;").replace(QUOT,"&quot;").replace(SQUOT,"&#39;"):a):a};var BS=/\\/g,FS=/\//g,CR=/\r/g,LS=/\u2028/g,PS=/\u2029/g,NL=/\n/g,LF=/\f/g,SQ=/'/g,DQ=/"/g,TB=/\t/g;return dust.escapeJs=function(a){return"string"==typeof a?a.replace(BS,"\\\\").replace(FS,"\\/").replace(DQ,'\\"').replace(SQ,"\\'").replace(CR,"\\r").replace(LS,"\\u2028").replace(PS,"\\u2029").replace(NL,"\\n").replace(LF,"\\f").replace(TB,"\\t"):a},dust.escapeJSON=function(a){return JSON?JSON.stringify(a).replace(LS,"\\u2028").replace(PS,"\\u2029").replace(LT,"\\u003c"):(dust.log("JSON is undefined; could not escape `"+a+"`",WARN),a)},dust}),"function"==typeof define&&define.amd&&define.amd.dust===!0&&define(["require","dust.core"],function(require,dust){return dust.onLoad=function(a,b){require([a],function(){b()})},dust});
/*! dustjs-helpers - v1.7.3
* http://dustjs.com/
* Copyright (c) 2015 Aleksander Williams; Released under the MIT License */
!function(a,b){"function"==typeof define&&define.amd&&define.amd.dust===!0?define(["dust.core"],b):"object"==typeof exports?module.exports=b(require("dustjs-linkedin")):b(a.dust)}(this,function(dust){function a(a,b,c){c=c||"INFO",a=a?"{@"+a+"}: ":"",dust.log(a+b,c)}function b(b){k[b]||(a(b,"Deprecation warning: "+b+" is deprecated and will be removed in a future version of dustjs-helpers","WARN"),a(null,"For help and a deprecation timeline, see https://github.com/linkedin/dustjs-helpers/wiki/Deprecated-Features#"+b.replace(/\W+/g,""),"WARN"),k[b]=!0)}function c(a){return a.stack.tail&&a.stack.tail.head&&"undefined"!=typeof a.stack.tail.head.__select__}function d(a){return c(a)&&a.get("__select__")}function e(a,b){var c,d=a.stack.head,e=a.rebase();a.stack&&a.stack.tail&&(e.stack=a.stack.tail);var f={isPending:!1,isResolved:!1,isDeferredComplete:!1,deferreds:[]};for(c in b)f[c]=b[c];return e.push({__select__:f}).push(d,a.stack.index,a.stack.of)}function f(a){var b,c;if(a.isDeferredPending=!0,a.deferreds.length)for(a.isDeferredComplete=!0,b=0,c=a.deferreds.length;c>b;b++)a.deferreds[b]();a.isDeferredPending=!1}function g(a,b){return"function"==typeof b?b.toString().replace(/(^\s+|\s+$)/gm,"").replace(/\n/gm,"").replace(/,\s*/gm,", ").replace(/\)\{/gm,") {"):b}function h(a,b){return function(c,d,e,f){return i(c,d,e,f,a,b)}}function i(b,c,e,f,g,h){var i,k,l,m,n=e.block,o=e["else"],p=d(c)||{};if(p.isResolved&&!p.isDeferredPending)return b;if(f.hasOwnProperty("key"))k=f.key;else{if(!p.hasOwnProperty("key"))return a(g,"No key specified","WARN"),b;k=p.key}return m=f.type||p.type,k=j(c.resolve(k),m),l=j(c.resolve(f.value),m),h(k,l)?(p.isPending||(i=!0,p.isPending=!0),n&&(b=b.render(n,c)),i&&(p.isResolved=!0)):o&&(b=b.render(o,c)),b}function j(a,b){switch(b&&(b=b.toLowerCase()),b){case"number":return+a;case"string":return String(a);case"boolean":return a="false"===a?!1:a,Boolean(a);case"date":return new Date(a)}return a}var k={},l={tap:function(a,c,d){return b("tap"),d.resolve(a)},sep:function(a,b,c){var d=c.block;return b.stack.index===b.stack.of-1?a:d?d(a,b):a},first:function(a,b,c){return 0===b.stack.index?c.block(a,b):a},last:function(a,b,c){return b.stack.index===b.stack.of-1?c.block(a,b):a},contextDump:function(b,c,d,e){var f,h,i=c.resolve(e.to),j=c.resolve(e.key);switch(j){case"full":f=c.stack;break;default:f=c.stack.head}switch(h=JSON.stringify(f,g,2),i){case"console":a("contextDump",h);break;default:h=h.replace(/</g,"\\u003c"),b=b.write(h)}return b},math:function(b,c,g,h){var i,j=h.key,k=h.method,l=h.operand,m=h.round;if(!h.hasOwnProperty("key")||!h.method)return a("math","`key` or `method` was not provided","ERROR"),b;switch(j=parseFloat(c.resolve(j)),l=parseFloat(c.resolve(l)),k){case"mod":0===l&&a("math","Division by 0","ERROR"),i=j%l;break;case"add":i=j+l;break;case"subtract":i=j-l;break;case"multiply":i=j*l;break;case"divide":0===l&&a("math","Division by 0","ERROR"),i=j/l;break;case"ceil":case"floor":case"round":case"abs":i=Math[k](j);break;case"toint":i=parseInt(j,10);break;default:a("math","Method `"+k+"` is not supported","ERROR")}return"undefined"!=typeof i&&(m&&(i=Math.round(i)),g&&g.block?(c=e(c,{key:i}),b=b.render(g.block,c),f(d(c))):b=b.write(i)),b},select:function(b,c,g,h){var i=g.block,j={};return h.hasOwnProperty("key")&&(j.key=c.resolve(h.key)),h.hasOwnProperty("type")&&(j.type=h.type),i?(c=e(c,j),b=b.render(i,c),f(d(c))):a("select","Missing body block","WARN"),b},eq:h("eq",function(a,b){return a===b}),ne:h("ne",function(a,b){return a!==b}),lt:h("lt",function(a,b){return b>a}),lte:h("lte",function(a,b){return b>=a}),gt:h("gt",function(a,b){return a>b}),gte:h("gte",function(a,b){return a>=b}),any:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("any","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved&&(a=a.render(e.block,c)),a.end()})}):a("any","Must be used inside a {@select} block","ERROR"),b},none:function(b,c,e,f){var g=d(c);return g?g.isDeferredComplete?a("none","Must not be nested inside {@any} or {@none} block","ERROR"):b=b.map(function(a){g.deferreds.push(function(){g.isResolved||(a=a.render(e.block,c)),a.end()})}):a("none","Must be used inside a {@select} block","ERROR"),b},size:function(a,b,c,d){var e,f,g=d.key;if(g=b.resolve(d.key),g&&g!==!0)if(dust.isArray(g))e=g.length;else if(!isNaN(parseFloat(g))&&isFinite(g))e=g;else if("object"==typeof g){e=0;for(f in g)g.hasOwnProperty(f)&&e++}else e=(g+"").length;else e=0;return a.write(e)}};for(var m in l)dust.helpers[m]=l[m];return dust});
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.page=e()}}(function(){return function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return i(n||e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){(function(n){"use strict";function r(e,t){if("function"==typeof e)return r("*",e);if("function"==typeof t)for(var n=new s(e),i=1;i<arguments.length;++i)r.callbacks.push(n.middleware(arguments[i]));else"string"==typeof e?r["string"==typeof t?"redirect":"show"](e,t):r.start(e)}function i(e){if(!e.handled){var t;t=y?g+v.hash.replace("#!",""):v.pathname+v.search,t!==e.canonicalPath&&(r.stop(),e.handled=!1,v.href=e.canonicalPath)}}function o(e){return"string"!=typeof e?e:m?decodeURIComponent(e.replace(/\+/g," ")):e}function a(e,t){"/"===e[0]&&0!==e.indexOf(g)&&(e=g+(y?"#!":"")+e);var n=e.indexOf("?");if(this.canonicalPath=e,this.path=e.replace(g,"")||"/",y&&(this.path=this.path.replace("#!","")||"/"),this.title=document.title,this.state=t||{},this.state.path=e,this.querystring=~n?o(e.slice(n+1)):"",this.pathname=o(~n?e.slice(0,n):e),this.params={},this.hash="",!y){if(!~this.path.indexOf("#"))return;var r=this.path.split("#");this.path=r[0],this.hash=o(r[1])||"",this.querystring=this.querystring.split("#")[0]}}function s(e,t){t=t||{},this.path="*"===e?"(.*)":e,this.method="GET",this.regexp=p(this.path,this.keys=[],t)}function c(e){if(1===u(e)&&!(e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.path?e.path[0]:e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t.hasAttribute("download")&&"external"!==t.getAttribute("rel")){var i=t.getAttribute("href");if((y||t.pathname!==v.pathname||!t.hash&&"#"!==i)&&!(i&&i.indexOf("mailto:")>-1)&&!t.target&&f(t.href)){var o=t.pathname+t.search+(t.hash||"");void 0!==n&&o.match(/^\/[a-zA-Z]:\//)&&(o=o.replace(/^\/[a-zA-Z]:\//,"/"));var a=o;0===o.indexOf(g)&&(o=o.substr(g.length)),y&&(o=o.replace("#!","")),g&&a===o||(e.preventDefault(),r.show(a))}}}}function u(e){return e=e||window.event,null===e.which?e.button:e.which}function f(e){var t=v.protocol+"//"+v.hostname;return v.port&&(t+=":"+v.port),e&&0===e.indexOf(t)}var p=e("path-to-regexp");t.exports=r;var h,d,l="undefined"!=typeof document&&document.ontouchstart?"touchstart":"click",v="undefined"!=typeof window&&(window.history.location||window.location),w=!0,m=!0,g="",y=!1;r.callbacks=[],r.exits=[],r.current="",r.len=0,r.base=function(e){if(0===arguments.length)return g;g=e},r.start=function(e){if(e=e||{},!h&&(h=!0,!1===e.dispatch&&(w=!1),!1===e.decodeURLComponents&&(m=!1),!1!==e.popstate&&window.addEventListener("popstate",x,!1),!1!==e.click&&document.addEventListener(l,c,!1),!0===e.hashbang&&(y=!0),w)){var t=y&&~v.hash.indexOf("#!")?v.hash.substr(2)+v.search:v.pathname+v.search+v.hash;r.replace(t,null,!0,w)}},r.stop=function(){h&&(r.current="",r.len=0,h=!1,document.removeEventListener(l,c,!1),window.removeEventListener("popstate",x,!1))},r.show=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,!1!==n&&r.dispatch(o),!1!==o.handled&&!1!==i&&o.pushState(),o},r.back=function(e,t){r.len>0?(history.back(),r.len--):e?setTimeout(function(){r.show(e,t)}):setTimeout(function(){r.show(g,t)})},r.redirect=function(e,t){"string"==typeof e&&"string"==typeof t&&r(e,function(e){setTimeout(function(){r.replace(t)},0)}),"string"==typeof e&&void 0===t&&setTimeout(function(){r.replace(e)},0)},r.replace=function(e,t,n,i){var o=new a(e,t);return r.current=o.path,o.init=n,o.save(),!1!==i&&r.dispatch(o),o},r.dispatch=function(e){function t(){var e=r.exits[s++];if(!e)return n();e(o,t)}function n(){var t=r.callbacks[a++];return e.path!==r.current?void(e.handled=!1):t?void t(e,n):i(e)}var o=d,a=0,s=0;d=e,o?t():n()},r.exit=function(e,t){if("function"==typeof e)return r.exit("*",e);for(var n=new s(e),i=1;i<arguments.length;++i)r.exits.push(n.middleware(arguments[i]))},r.Context=a,a.prototype.pushState=function(){r.len++,history.pushState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},a.prototype.save=function(){history.replaceState(this.state,this.title,y&&"/"!==this.path?"#!"+this.path:this.canonicalPath)},r.Route=s,s.prototype.middleware=function(e){var t=this;return function(n,r){if(t.match(n.path,n.params))return e(n,r);r()}},s.prototype.match=function(e,t){var n=this.keys,r=e.indexOf("?"),i=~r?e.slice(0,r):e,a=this.regexp.exec(decodeURIComponent(i));if(!a)return!1;for(var s=1,c=a.length;s<c;++s){var u=n[s-1],f=o(a[s]);void 0===f&&hasOwnProperty.call(t,u.name)||(t[u.name]=f)}return!0};var x=function(){var e=!1;if("undefined"!=typeof window)return"complete"===document.readyState?e=!0:window.addEventListener("load",function(){setTimeout(function(){e=!0},0)}),function(t){if(e)if(t.state){var n=t.state.path;r.replace(n,t.state)}else r.show(v.pathname+v.hash,void 0,void 0,!1)}}();r.sameOrigin=f}).call(this,e("_process"))},{_process:2,"path-to-regexp":3}],2:[function(e,t,n){function r(){}var i=t.exports={};i.nextTick=function(){var e="undefined"!=typeof window&&window.setImmediate,t="undefined"!=typeof window&&window.MutationObserver,n="undefined"!=typeof window&&window.postMessage&&window.addEventListener;if(e)return function(e){return window.setImmediate(e)};var r=[];if(t){var i=document.createElement("div");return new MutationObserver(function(){var e=r.slice();r.length=0,e.forEach(function(e){e()})}).observe(i,{attributes:!0}),function(e){r.length||i.setAttribute("yes","no"),r.push(e)}}return n?(window.addEventListener("message",function(e){var t=e.source;if((t===window||null===t)&&"process-tick"===e.data&&(e.stopPropagation(),r.length>0)){r.shift()()}},!0),function(e){r.push(e),window.postMessage("process-tick","*")}):function(e){setTimeout(e,0)}}(),i.title="browser",i.browser=!0,i.env={},i.argv=[],i.on=r,i.addListener=r,i.once=r,i.off=r,i.removeListener=r,i.removeAllListeners=r,i.emit=r,i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")}},{}],3:[function(e,t,n){function r(e){for(var t,n=[],r=0,i=0,o="";null!=(t=w.exec(e));){var a=t[0],c=t[1],u=t.index;if(o+=e.slice(i,u),i=u+a.length,c)o+=c[1];else{o&&(n.push(o),o="");var f=t[2],p=t[3],h=t[4],d=t[5],l=t[6],v=t[7],m="+"===l||"*"===l,g="?"===l||"*"===l,y=f||"/",x=h||d||(v?".*":"[^"+y+"]+?");n.push({name:p||r++,prefix:f||"",delimiter:y,optional:g,repeat:m,pattern:s(x)})}}return i<e.length&&(o+=e.substr(i)),o&&n.push(o),n}function i(e){return o(r(e))}function o(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^"+e[n].pattern+"$"));return function(n){for(var r="",i=n||{},o=0;o<e.length;o++){var a=e[o];if("string"!=typeof a){var s,c=i[a.name];if(null==c){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to be defined')}if(v(c)){if(!a.repeat)throw new TypeError('Expected "'+a.name+'" to not repeat, but received "'+c+'"');if(0===c.length){if(a.optional)continue;throw new TypeError('Expected "'+a.name+'" to not be empty')}for(var u=0;u<c.length;u++){if(s=encodeURIComponent(c[u]),!t[o].test(s))throw new TypeError('Expected all "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=(0===u?a.prefix:a.delimiter)+s}}else{if(s=encodeURIComponent(c),!t[o].test(s))throw new TypeError('Expected "'+a.name+'" to match "'+a.pattern+'", but received "'+s+'"');r+=a.prefix+s}}else r+=a}return r}}function a(e){return e.replace(/([.+*?=^!:${}()[\]|\/])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function u(e){return e.sensitive?"":"i"}function f(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,pattern:null});return c(e,t)}function p(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(l(e[i],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",u(n)),t)}function h(e,t,n){for(var i=r(e),o=d(i,n),a=0;a<i.length;a++)"string"!=typeof i[a]&&t.push(i[a]);return c(o,t)}function d(e,t){t=t||{};for(var n=t.strict,r=!1!==t.end,i="",o=e[e.length-1],s="string"==typeof o&&/\/$/.test(o),c=0;c<e.length;c++){var f=e[c];if("string"==typeof f)i+=a(f);else{var p=a(f.prefix),h=f.pattern;f.repeat&&(h+="(?:"+p+h+")*"),h=f.optional?p?"(?:"+p+"("+h+"))?":"("+h+")?":p+"("+h+")",i+=h}}return n||(i=(s?i.slice(0,-2):i)+"(?:\\/(?=$))?"),i+=r?"$":n&&s?"":"(?=\\/|$)",new RegExp("^"+i,u(t))}function l(e,t,n){return t=t||[],v(t)?n||(n={}):(n=t,t=[]),e instanceof RegExp?f(e,t,n):v(e)?p(e,t,n):h(e,t,n)}var v=e("isarray");t.exports=l,t.exports.parse=r,t.exports.compile=i,t.exports.tokensToFunction=o,t.exports.tokensToRegExp=d;var w=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))"].join("|"),"g")},{isarray:4}],4:[function(e,t,n){t.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},{}]},{},[1])(1)});
/*!
 * EventEmitter v5.0.0 - git.io/ee
 * Unlicense - http://unlicense.org/
 * Oliver Caldwell - http://oli.me.uk/
 * @preserve
 */
(function(){"use strict";function t(){}function i(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}function n(e){return function(){return this[e].apply(this,arguments)}}var e=t.prototype,r=this,s=r.EventEmitter;e.getListeners=function(n){var r,e,t=this._getEvents();if(n instanceof RegExp){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(r,e){var t,n=this.getListenersAsObject(r),s="object"==typeof e;for(t in n)n.hasOwnProperty(t)&&-1===i(n[t],e)&&n[t].push(s?e:{listener:e,once:!1});return this},e.on=n("addListener"),e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=n("addOnceListener"),e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(r,s){var n,e,t=this.getListenersAsObject(r);for(e in t)t.hasOwnProperty(e)&&(n=i(t[e],s),-1!==n&&t[e].splice(n,1));return this},e.off=n("removeListener"),e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(e){var t,r=typeof e,n=this._getEvents();if("string"===r)delete n[e];else if(e instanceof RegExp)for(t in n)n.hasOwnProperty(t)&&e.test(t)&&delete n[t];else delete this._events;return this},e.removeAllListeners=n("removeEvent"),e.emitEvent=function(n,u){var r,e,t,i,o,s=this.getListenersAsObject(n);for(i in s)if(s.hasOwnProperty(i))for(r=s[i].slice(0),t=0;t<r.length;t++)e=r[t],e.once===!0&&this.removeListener(n,e.listener),o=e.listener.apply(this,u||[]),o===this._getOnceReturnValue()&&this.removeListener(n,e.listener);return this},e.trigger=n("emitEvent"),e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},t.noConflict=function(){return r.EventEmitter=s,t},"function"==typeof define&&define.amd?define(function(){return t}):"object"==typeof module&&module.exports?module.exports=t:r.EventEmitter=t}).call(this);
/* docma (dust) compiled templates */
(function(dust){dust.register("docma-404",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><br /><br /><h1>404</h1><hr /><h3>Page Not Found</h3><br />The file or page you have requested is not found. &nbsp;&nbsp;<br />Please make sure page address is entered correctly.</div></div><br /><br /><br /></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-api",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{}).x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_1},{}).w("<div id=\"wrapper\">").x(ctx.getPath(false, ["template","options","sidebar"]),ctx,{"block":body_2},{}).w("<div id=\"page-content-wrapper\"><div class=\"container-fluid\"><div class=\"row\"><div class=\"col-lg-12\">").s(ctx.get(["documentation"], false),ctx,{"block":body_3},{}).w("</div></div><br /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-toggle\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<div id=\"sidebar-wrapper\">").p("sidebar",ctx,ctx,{}).w("</div>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("docma-content",body_0);function body_0(chk,ctx){return chk.p("navbar",ctx,ctx,{"boxed":"true"}).w("<div id=\"page-content-wrapper\"><div class=\"container container-boxed\"><div class=\"row\"><div class=\"col-md-12\"><div id=\"docma-content\"></div></div></div><br /><hr /><span class=\"docma-info\">Documentation built with <b><a target=\"_blank\" href=\"https://github.com/onury/docma\">Docma</a></b>.</span></div></div>");}body_0.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("enums",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["$members"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Enumeration</th><th>Type</th><th>Value</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["$members"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.getPath(true, []),ctx,"h",["$longname","s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$val"]).w("</code></td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$desc"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navbar",body_0);function body_0(chk,ctx){return chk.x(ctx.getPath(false, ["template","options","navbar"]),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<nav class=\"navbar navbar-default navbar-fixed-top\"><div class=\"").x(ctx.get(["boxed"], false),ctx,{"else":body_2,"block":body_3},{}).w("\"><div class=\"nav navbar-left nav-left\"><div class=\"navbar-brand\"><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></div></div>").h("gt",ctx,{"block":body_4},{"key":ctx.getPath(false, ["template","options","navItems","length"]),"value":0},"h").w("</div></nav>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("container-fluid");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("container container-boxed");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<ul class=\"nav navbar-nav\">").s(ctx.getPath(false, ["template","options","navItems"]),ctx,{"block":body_5},{}).w("</ul>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.x(ctx.get(["items"], false),ctx,{"else":body_6,"block":body_7},{});}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<li class=\"dropdown\"><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_8,"block":body_9},{}).w("\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;").f(ctx.get(["label"], false),ctx,"h").w("&nbsp;<span class=\"caret\"></span></a><ul class=\"dropdown-menu\">").s(ctx.get(["items"], false),ctx,{"block":body_10},{}).w("</ul></li>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("#");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.p("navitem",ctx,ctx.rebase(ctx.getPath(true, [])),{});}body_10.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("navitem",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["separator"], false),ctx,{"else":body_1,"block":body_5},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<li><a href=\"").x(ctx.get(["href"], false),ctx,{"else":body_2,"block":body_3},{}).w("\" target=\"").f(ctx.get(["target"], false),ctx,"h").w("\">").x(ctx.get(["iconClass"], false),ctx,{"block":body_4},{}).f(ctx.get(["label"], false),ctx,"h",["s"]).w("</a></li>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("#");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.f(ctx.get(["href"], false),ctx,"h");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<i class=\"ico ").f(ctx.get(["iconClass"], false),ctx,"h").w("\" aria-hidden=\"true\"></i>&nbsp;&nbsp;");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<li role=\"separator\" class=\"divider\"></li>");}body_5.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("params",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["params"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Param</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["params"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").x(ctx.get(["optional"], false),ctx,{"block":body_3},{}).w("</td><td>").f(ctx.getPath(true, []),ctx,"h",["s","$param_desc"]).w("</td></tr>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<code>").f(ctx.getPath(true, []),ctx,"h",["$def"]).w("</code>");}body_3.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("properties",body_0);function body_0(chk,ctx){return chk.x(ctx.get(["properties"], false),ctx,{"block":body_1},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<table class=\"table table-striped table-bordered\"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody>").s(ctx.get(["properties"], false),ctx,{"block":body_2},{}).w("</tbody></table>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<tr><td><code>").f(ctx.get(["name"], false),ctx,"h",["s","$dot_prop"]).w("</code></td><td><code>").f(ctx.getPath(true, []),ctx,"h",["$type"]).w("</code></td><td>").f(ctx.get(["description"], false),ctx,"h",["s","$p"]).w("</td></tr>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("sidebar",body_0);function body_0(chk,ctx){return chk.w("<div class=\"sidebar-header\"><div class=\"sidebar-title\"><span><b>").f(ctx.getPath(false, ["template","options","title"]),ctx,"h").w("</b></span></div>").x(ctx.getPath(false, ["template","options","search"]),ctx,{"block":body_1},{}).w("</div><div class=\"sidebar-nav-container\"><ul class=\"sidebar-nav\">").s(ctx.get(["symbols"], false),ctx,{"block":body_2},{}).w("</ul><div class=\"sidebar-nav-space\"></div></div>");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<div class=\"sidebar-search\"><input id=\"txt-search\" type=\"search\" class=\"form-control\" placeholder=\"Search...\" /><div class=\"sidebar-search-clean\"><span class=\"glyphicon glyphicon-remove-circle\"></span></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$menuitem"]).w("</li>");}body_2.__dustBody=!0;return body_0}(dust));
(function(dust){dust.register("symbol",body_0);function body_0(chk,ctx){return chk.w("<div id=\"").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\" class=\"symbol-container\"><div class=\"symbol-heading\"><div class=\"symbol\"><a href=\"#").f(ctx.getPath(true, []),ctx,"h",["$id"]).w("\"><span class=\"glyphicon glyphicon-link color-gray-light\" aria-hidden=\"true\"></span><code class=\"symbol-name\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$longname_params"]).w("</code><span class=\"symbol-sep\">").f(ctx.get(["symbol"], false),ctx,"h",["$type_sep"]).w("</span><code class=\"symbol-type\">").f(ctx.get(["symbol"], false),ctx,"h",["$type"]).w("</code></a>").f(ctx.get(["symbol"], false),ctx,"h",["s","$tags"]).w("</div>").x(ctx.getPath(false, ["symbol","augments"]),ctx,{"block":body_1},{}).x(ctx.getPath(false, ["symbol","alias"]),ctx,{"block":body_2},{}).w("</div><div class=\"symbol-definition\">").x(ctx.getPath(false, ["symbol","classdesc"]),ctx,{"block":body_3},{}).f(ctx.get(["symbol"], false),ctx,"h",["s","$desc"]).x(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_8},{}).h("eq",ctx,{"else":body_13,"block":body_16},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","returns"]),ctx,{"block":body_17},{}).x(ctx.getPath(false, ["symbol","exceptions"]),ctx,{"block":body_20},{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"block":body_23},{}).x(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_24},{}).x(ctx.getPath(false, ["template","options","symbolMeta"]),ctx,{"block":body_26},{}).w("</div></div><hr />").h("eq",ctx,{"block":body_30},{"key":ctx.getPath(false, ["symbol","meta","code","type"]),"value":"ClassDeclaration"},"h").x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_32,"block":body_34},{});}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Extends:</b> ").f(ctx.get(["symbol"], false),ctx,"h",["s","$extends"]).w("</p>");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w("<p class=\"space-left-sm\"><b>Alias:</b> <code>").f(ctx.getPath(false, ["symbol","alias"]),ctx,"h",["s","$dot_prop"]).w("</code></p>");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w("<table>").x(ctx.getPath(false, ["symbol","version"]),ctx,{"block":body_4},{}).x(ctx.getPath(false, ["symbol","copyright"]),ctx,{"block":body_5},{}).x(ctx.getPath(false, ["symbol","author"]),ctx,{"block":body_6},{}).x(ctx.getPath(false, ["symbol","license"]),ctx,{"block":body_7},{}).w("</table><br />");}body_3.__dustBody=!0;function body_4(chk,ctx){return chk.w("<tr><td><b>Version:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","version"]),ctx,"h",["s"]).w("</td></tr>");}body_4.__dustBody=!0;function body_5(chk,ctx){return chk.w("<tr><td><b>Copyright:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","copyright"]),ctx,"h",["s"]).w("</td></tr>");}body_5.__dustBody=!0;function body_6(chk,ctx){return chk.w("<tr><td><b>Author:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","author"]),ctx,"h",["s","$author"]).w("</td></tr>");}body_6.__dustBody=!0;function body_7(chk,ctx){return chk.w("<tr><td><b>License:</b>&nbsp;&nbsp;&nbsp;</td><td>").f(ctx.getPath(false, ["symbol","license"]),ctx,"h",["s"]).w("</td></tr>");}body_7.__dustBody=!0;function body_8(chk,ctx){return chk.w("<p><b>See</b>").h("gt",ctx,{"else":body_9,"block":body_11},{"key":ctx.getPath(false, ["symbol","see","length"]),"value":1},"h").w("</p><br />");}body_8.__dustBody=!0;function body_9(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_10},{});}body_9.__dustBody=!0;function body_10(chk,ctx){return chk.w("&nbsp;").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]);}body_10.__dustBody=!0;function body_11(chk,ctx){return chk.w("<ul>").s(ctx.getPath(false, ["symbol","see"]),ctx,{"block":body_12},{}).w("</ul>");}body_11.__dustBody=!0;function body_12(chk,ctx){return chk.w("<li>").f(ctx.getPath(true, []),ctx,"h",["s","$pl"]).w("</li>");}body_12.__dustBody=!0;function body_13(chk,ctx){return chk.p("params",ctx,ctx.rebase(ctx.get(["symbol"], false)),{}).x(ctx.getPath(false, ["symbol","isEnum"]),ctx,{"else":body_14,"block":body_15},{});}body_13.__dustBody=!0;function body_14(chk,ctx){return chk.p("properties",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_14.__dustBody=!0;function body_15(chk,ctx){return chk;}body_15.__dustBody=!0;function body_16(chk,ctx){return chk;}body_16.__dustBody=!0;function body_17(chk,ctx){return chk.h("gt",ctx,{"else":body_18,"block":body_19},{"key":ctx.getPath(false, ["symbol","returns","length"]),"value":"1","type":"number"},"h");}body_17.__dustBody=!0;function body_18(chk,ctx){return chk.w("<p><b>Returns:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_18.__dustBody=!0;function body_19(chk,ctx){return chk.w("<b>Returns:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$returns"]).w("</p>");}body_19.__dustBody=!0;function body_20(chk,ctx){return chk.h("gt",ctx,{"else":body_21,"block":body_22},{"key":ctx.getPath(false, ["symbol","exceptions","length"]),"value":"1","type":"number"},"h");}body_20.__dustBody=!0;function body_21(chk,ctx){return chk.w("<p><b>Throws:</b>&nbsp;&nbsp;").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_21.__dustBody=!0;function body_22(chk,ctx){return chk.w("<b>Throws:</b><p class=\"pad-left\">").f(ctx.get(["symbol"], false),ctx,"h",["s","$exceptions"]).w("</p>");}body_22.__dustBody=!0;function body_23(chk,ctx){return chk.p("enums",ctx,ctx.rebase(ctx.get(["symbol"], false)),{});}body_23.__dustBody=!0;function body_24(chk,ctx){return chk.w("<p><b>Example</b></p>").s(ctx.getPath(false, ["symbol","examples"]),ctx,{"block":body_25},{});}body_24.__dustBody=!0;function body_25(chk,ctx){return chk.w("<pre><code>").f(ctx.getPath(true, []),ctx,"h",["$nt"]).w("</code></pre>");}body_25.__dustBody=!0;function body_26(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_27},{});}body_26.__dustBody=!0;function body_27(chk,ctx){return chk.w("<p class=\"symbol-meta\">").x(ctx.getPath(false, ["symbol","meta","filename"]),ctx,{"block":body_28},{}).x(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,{"block":body_29},{}).w("</p>");}body_27.__dustBody=!0;function body_28(chk,ctx){return chk.w("<b>File:</b> ").f(ctx.getPath(false, ["symbol","meta","filename"]),ctx,"h").w("&nbsp;&nbsp;");}body_28.__dustBody=!0;function body_29(chk,ctx){return chk.w("<b>Line:</b> ").f(ctx.getPath(false, ["symbol","meta","lineno"]),ctx,"h").w("&nbsp;&nbsp;");}body_29.__dustBody=!0;function body_30(chk,ctx){return chk.x(ctx.getPath(false, ["symbol","$constructor"]),ctx,{"block":body_31},{});}body_30.__dustBody=!0;function body_31(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(false, ["symbol","$constructor"]),"template":ctx.get(["template"], false)});}body_31.__dustBody=!0;function body_32(chk,ctx){return chk.s(ctx.getPath(false, ["symbol","$members"]),ctx,{"block":body_33},{});}body_32.__dustBody=!0;function body_33(chk,ctx){return chk.p("symbol",ctx,ctx,{"symbol":ctx.getPath(true, []),"template":ctx.get(["template"], false)});}body_33.__dustBody=!0;function body_34(chk,ctx){return chk;}body_34.__dustBody=!0;return body_0}(dust));
/*!
 * Docma (Web) Core
 * https://github.com/onury/docma
 * @license MIT
 */
var docma = {"routes":[{"id":"api:","type":"api","name":"_def_","path":"/?api","contentPath":null},{"id":"api:engine","type":"api","name":"engine","path":"/?api=engine","contentPath":null},{"id":"api:assets","type":"api","name":"assets","path":"/?api=assets","contentPath":null},{"id":"api:utilities","type":"api","name":"utilities","path":"/?api=utilities","contentPath":null},{"id":"api:drawables","type":"api","name":"drawables","path":"/?api=drawables","contentPath":null},{"id":"api:constants","type":"api","name":"constants","path":"/?api=constants","contentPath":null},{"id":"api:internals","type":"api","name":"internals","path":"/?api=internals","contentPath":null}],"apis":{"_def_":{"documentation":[],"symbols":[]},"engine":{"documentation":[{"comment":"/**\n * An AssetManager manages all the various types of assets that need to be bound to\n * to a gl context.  It uses an AssetLoader to handle the loading and caching of the\n * asset sources, and also maintains a parallel cache of the bound resources.\n */","meta":{"range":[1003,7912],"filename":"asset-manager.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001268","name":"AssetManager","type":"ClassDeclaration","paramnames":["gl","manifest"]}},"classdesc":"An AssetManager manages all the various types of assets that need to be bound to\nto a gl context.  It uses an AssetLoader to handle the loading and caching of the\nasset sources, and also maintains a parallel cache of the bound resources.","name":"AssetManager","longname":"AssetManager","kind":"class","scope":"global","description":"Constructs an asset loader.","params":[{"type":{"names":["context"]},"description":"A 3d context from a canvas","name":"gl"},{"type":{"names":["Object"]},"description":"A mapping of key:value pairs for the following types:\n                          texture, mesh, program, rawProgram","name":"manifest"}],"$longname":"AssetManager","$members":[{"comment":"/**\n   * Merges in another manifest to the existing asset manifest\n   *\n   * Additional manifests should be merged in before loading.\n   * @param {Object} manifest @see constructor\n   *\n   * @return {void}\n   */","meta":{"range":[1907,1993],"filename":"asset-manager.js","lineno":75,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001345","name":"AssetManager#addAssets","type":"MethodDefinition","paramnames":["manifest"]},"vars":{"":null}},"description":"Merges in another manifest to the existing asset manifest\n\nAdditional manifests should be merged in before loading.","params":[{"type":{"names":["Object"]},"description":"@see constructor","name":"manifest"}],"returns":[{"type":{"names":["void"]}}],"name":"addAssets","longname":"AssetManager#addAssets","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addAssets"},{"comment":"/**\n   * Adds a bound mesh to the mesh cache, under a given internal name\n   * @param {String} name Mesh internal name\n   * @param {Mesh} mesh   A bound mesh\n   *\n   * @return {void}\n   */","meta":{"range":[2469,2524],"filename":"asset-manager.js","lineno":97,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001375","name":"AssetManager#addMesh","type":"MethodDefinition","paramnames":["name","mesh"]},"vars":{"":null}},"description":"Adds a bound mesh to the mesh cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"name"},{"type":{"names":["Mesh"]},"description":"A bound mesh","name":"mesh"}],"returns":[{"type":{"names":["void"]}}],"name":"addMesh","longname":"AssetManager#addMesh","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addMesh"},{"comment":"/**\n   * Adds a bound program to the program cache, under a given internal name\n   * @param {String} name     Program internal name\n   * @param {Program} program A bound Program\n   *\n   * @return {void}\n   */","meta":{"range":[2739,2805],"filename":"asset-manager.js","lineno":108,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001389","name":"AssetManager#addProgram","type":"MethodDefinition","paramnames":["name","program"]},"vars":{"":null}},"description":"Adds a bound program to the program cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"name"},{"type":{"names":["Program"]},"description":"A bound Program","name":"program"}],"returns":[{"type":{"names":["void"]}}],"name":"addProgram","longname":"AssetManager#addProgram","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addProgram"},{"comment":"/**\n   * Adds a bound texture to the texture cache, under a given internal name\n   * @param {String} name     Texture internal name\n   * @param {Texture} texture A bound Texture\n   *\n   * @return {void}\n   */","meta":{"range":[2208,2274],"filename":"asset-manager.js","lineno":86,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001361","name":"AssetManager#addTexture","type":"MethodDefinition","paramnames":["name","texture"]},"vars":{"":null}},"description":"Adds a bound texture to the texture cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Texture internal name","name":"name"},{"type":{"names":["Texture"]},"description":"A bound Texture","name":"texture"}],"returns":[{"type":{"names":["void"]}}],"name":"addTexture","longname":"AssetManager#addTexture","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addTexture"},{"comment":"/**\n   * Generates a compact manifest containing only the resources that have been\n   * actually be fetched from the cache, after loading.  Useful to reduce loading\n   * time for scenes that only use a few resources.\n   * @return {Object} A manifest containing only the resources that were actually used\n   *                  after loading.\n   */","meta":{"range":[7318,7727],"filename":"asset-manager.js","lineno":234,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002000","name":"AssetManager#generateManifest","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Generates a compact manifest containing only the resources that have been\nactually be fetched from the cache, after loading.  Useful to reduce loading\ntime for scenes that only use a few resources.","returns":[{"type":{"names":["Object"]},"description":"A manifest containing only the resources that were actually used\n                 after loading."}],"name":"generateManifest","longname":"AssetManager#generateManifest","kind":"function","memberof":"AssetManager","scope":"instance","params":[],"$longname":"AssetManager#generateManifest"},{"comment":"/**\n   * Loads all remote resources found in the manifest, and creates any static programs\n   * included in the manifest's rawPrograms section, if it exists.\n   * @return {Promise}          Promise that resolves when all assets are loaded\n   */","meta":{"range":[6277,6965],"filename":"asset-manager.js","lineno":204,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001881","name":"AssetManager#loadAll","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Loads all remote resources found in the manifest, and creates any static programs\nincluded in the manifest's rawPrograms section, if it exists.","returns":[{"type":{"names":["Promise"]},"description":"Promise that resolves when all assets are loaded"}],"name":"loadAll","longname":"AssetManager#loadAll","kind":"function","memberof":"AssetManager","scope":"instance","params":[],"$longname":"AssetManager#loadAll"},{"comment":"/**\n   * Returns a promise that resolves to a bound mesh.\n   * @param  {String} name Mesh internal name\n   * @return {Promise}     Resolves to the bound mesh.\n   */","meta":{"range":[3824,4458],"filename":"asset-manager.js","lineno":141,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001522","name":"AssetManager#loadMesh","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound mesh.","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound mesh."}],"name":"loadMesh","longname":"AssetManager#loadMesh","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadMesh"},{"comment":"/**\n   * Returns a promise that resolves to a bound program.\n   * @param  {String} name Program internal name (raw or loaded)\n   * @return {Promise}     Resolves to the bound program.\n   */","meta":{"range":[4654,6026],"filename":"asset-manager.js","lineno":165,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001640","name":"AssetManager#loadProgram","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound program.","params":[{"type":{"names":["String"]},"description":"Program internal name (raw or loaded)","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound program."}],"name":"loadProgram","longname":"AssetManager#loadProgram","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadProgram"},{"comment":"/**\n   * Returns a promise that resolves to a bound texture.\n   * @param  {String} name Texture internal name\n   * @return {Promise}     Resolves to the bound texture.\n   */","meta":{"range":[2985,3653],"filename":"asset-manager.js","lineno":117,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001403","name":"AssetManager#loadTexture","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound texture.","params":[{"type":{"names":["String"]},"description":"Texture internal name","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound texture."}],"name":"loadTexture","longname":"AssetManager#loadTexture","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadTexture"}],"$constructor":{"comment":"/**\n   * Constructs an asset loader.\n   * @param  {context} gl      A 3d context from a canvas\n   * @param  {Object} manifest A mapping of key:value pairs for the following types:\n   *                           texture, mesh, program, rawProgram\n   */","meta":{"range":[1297,1689],"filename":"asset-manager.js","lineno":46,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001272","name":"AssetManager","type":"MethodDefinition","paramnames":["gl","manifest"]},"vars":{"":null}},"description":"Constructs an asset loader.","params":[{"type":{"names":["context"]},"description":"A 3d context from a canvas","name":"gl"},{"type":{"names":["Object"]},"description":"A mapping of key:value pairs for the following types:\n                          texture, mesh, program, rawProgram","name":"manifest"}],"name":"AssetManager","longname":"AssetManager","kind":"class","scope":"global","undocumented":true,"$longname":"AssetManager"}},{"comment":"/**\n * A Camera is a class to manage view of the scene.\n *\n * @class\n * @chainable\n * @param {Number} width  The width of the viewport\n * @param {Number} height The height of the viewport\n * @return {this} The new Camera\n */","meta":{"range":[311,3515],"filename":"camera.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000843","name":"Camera","type":"ClassDeclaration","paramnames":["width","height"]}},"classdesc":"A Camera is a class to manage view of the scene.","kind":"class","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"The width of the viewport","name":"width"},{"type":{"names":["Number"]},"description":"The height of the viewport","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"The new Camera"}],"name":"Camera","longname":"Camera","scope":"global","$longname":"Camera","$members":[{"comment":"/**\n   * Adds an animation\n   *\n   * @chainable\n   * @param {Animation} animation The animation to be run.\n   *                              This will need to be started independently, or prior to being added.\n   * @return {this} Returns `this`\n   */","meta":{"range":[2713,2802],"filename":"camera.js","lineno":115,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001073","name":"Camera#addAnimation","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Adds an animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to be run.\n                             This will need to be started independently, or prior to being added.","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"addAnimation","longname":"Camera#addAnimation","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#addAnimation"},{"comment":"/**\n   * Generates a view matrix, as if the camera is looking at the specified point.\n   *\n   * @chainable\n   * @param  {vec3} point   The point to look at\n   * @return {this} Returns `this`\n   */","meta":{"range":[981,1065],"filename":"camera.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000958","name":"Camera#lookAt","type":"MethodDefinition","paramnames":["point"]},"vars":{"":null}},"description":"Generates a view matrix, as if the camera is looking at the specified point.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"The point to look at","name":"point"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"lookAt","longname":"Camera#lookAt","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#lookAt"},{"comment":"/**\n   * Set the viewport dimensions and update the projection matrix\n   *\n   * @chainable\n   * @param {Number} width  Viewport width\n   * @param {Number} height Viewport height\n   * @return {this} Returns `this`\n   */","meta":{"range":[1866,1987],"filename":"camera.js","lineno":77,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001018","name":"Camera#setDimensions","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Set the viewport dimensions and update the projection matrix","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Viewport width","name":"width"},{"type":{"names":["Number"]},"description":"Viewport height","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setDimensions","longname":"Camera#setDimensions","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setDimensions"},{"comment":"/**\n   * Sets the far clip distance\n   *\n   * @chainable\n   * @param {Number} far Max viewable distance\n   * @return {this} Returns `this`\n   */","meta":{"range":[2382,2456],"filename":"camera.js","lineno":102,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001057","name":"Camera#setFar","type":"MethodDefinition","paramnames":["far"]},"vars":{"":null}},"description":"Sets the far clip distance","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Max viewable distance","name":"far"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setFar","longname":"Camera#setFar","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setFar"},{"comment":"/**\n   * Set the horizontal field of view\n   *\n   * @chainable\n   * @param {Number} fov Field of view, in radians\n   * @return {this} Returns `this`\n   */","meta":{"range":[2148,2231],"filename":"camera.js","lineno":90,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001041","name":"Camera#setFieldOfView","type":"MethodDefinition","paramnames":["fov"]},"vars":{"":null}},"description":"Set the horizontal field of view","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Field of view, in radians","name":"fov"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setFieldOfView","longname":"Camera#setFieldOfView","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setFieldOfView"},{"comment":"/**\n   * Sets the camera's position\n   *\n   * @chainable\n   * @param {vec3} position Camera position\n   * @return {this} Returns `this`\n   */","meta":{"range":[1543,1641],"filename":"camera.js","lineno":64,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000999","name":"Camera#setPosition","type":"MethodDefinition","paramnames":["position"]},"vars":{"":null}},"description":"Sets the camera's position","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"Camera position","name":"position"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setPosition","longname":"Camera#setPosition","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setPosition"},{"comment":"/**\n   * Moves the camera's position in some direction\n   *\n   * Maintains the camera's current focus.\n   *\n   * @chainable\n   * @param  {vec3} vec   The vector to translate by\n   * @return {this} Returns `this`\n   */","meta":{"range":[1289,1395],"filename":"camera.js","lineno":52,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000977","name":"Camera#translate","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Moves the camera's position in some direction\n\nMaintains the camera's current focus.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"The vector to translate by","name":"vec"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"translate","longname":"Camera#translate","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#translate"}],"$constructor":{"comment":"","meta":{"range":[329,778],"filename":"camera.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000846","name":"Camera","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"undocumented":true,"name":"Camera","longname":"Camera","kind":"class","scope":"global","params":[],"$longname":"Camera"}},{"comment":"/**\n * The Engine provides nearly all the mechanics for actually drawing things to a canvas.\n *\n * Also includes a few simple functions for demoing various entities/drawables.  This\n * will probably go away in a future release.\n *\n * @param  {HTMLCanvas} canvas       A Canvas element\n * @param  {Object} assets           A manifest to pass to the internal AssetManager\n *                                   @see  AssetManager\n * @param  {Boolean} enableSnapshots If set to true, the canvas will preserve its drawing\n *                                   buffer, to allow for accurate .toDataURL calls.\n *                                   This will have a performance impact.\n */","meta":{"range":[1099,7124],"filename":"engine.js","lineno":25,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000043","name":"Engine","type":"ClassDeclaration","paramnames":["canvas","assets","enableSnapshots"]}},"classdesc":"The Engine provides nearly all the mechanics for actually drawing things to a canvas.\n\nAlso includes a few simple functions for demoing various entities/drawables.  This\nwill probably go away in a future release.","params":[{"type":{"names":["HTMLCanvas"]},"description":"A Canvas element","name":"canvas"},{"type":{"names":["Object"]},"description":"A manifest to pass to the internal AssetManager","name":"assets"},{"type":{"names":["Boolean"]},"description":"If set to true, the canvas will preserve its drawing\n                                  buffer, to allow for accurate .toDataURL calls.\n                                  This will have a performance impact.","name":"enableSnapshots"}],"see":["AssetManager"],"name":"Engine","longname":"Engine","kind":"class","scope":"global","$longname":"Engine","$members":[{"comment":"/**\n   * Captures a screenshot, if enabled\n   *\n   * @param  {String} mimeType The mime type of the image\n   * @param  {Number} quality  Quality, if applicable (applies to image/jpeg)\n   * @return {Promise}         A promise that resolves when the screenshot is complete\n   */","meta":{"range":[6485,7122],"filename":"engine.js","lineno":246,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000771","name":"Engine#capture","type":"MethodDefinition","paramnames":["mimeType","quality"]},"vars":{"":null}},"description":"Captures a screenshot, if enabled","params":[{"type":{"names":["String"]},"description":"The mime type of the image","name":"mimeType"},{"type":{"names":["Number"]},"description":"Quality, if applicable (applies to image/jpeg)","name":"quality"}],"returns":[{"type":{"names":["Promise"]},"description":"A promise that resolves when the screenshot is complete"}],"name":"capture","longname":"Engine#capture","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#capture"},{"comment":"/**\n   * Adds one of each drawable to the scene\n   * @return {void}\n   */","meta":{"range":[4157,5069],"filename":"engine.js","lineno":146,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000456","name":"Engine#demo","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Adds one of each drawable to the scene","returns":[{"type":{"names":["void"]}}],"name":"demo","longname":"Engine#demo","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#demo"},{"comment":"/**\n   * Adds one of each inventory item, and a portal, to the scene\n   * @return {void}\n   */","meta":{"range":[3691,4077],"filename":"engine.js","lineno":124,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000375","name":"Engine#demoEntities","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Adds one of each inventory item, and a portal, to the scene","returns":[{"type":{"names":["void"]}}],"name":"demoEntities","longname":"Engine#demoEntities","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#demoEntities"},{"comment":"/**\n   * Draw a single frame, with a specified time since last draw\n   * @param  {Number} delta Time since last render\n   * @return {void}\n   */","meta":{"range":[5220,5573],"filename":"engine.js","lineno":194,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000644","name":"Engine#draw","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Draw a single frame, with a specified time since last draw","params":[{"type":{"names":["Number"]},"description":"Time since last render","name":"delta"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"Engine#draw","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#draw"},{"comment":"/**\n   * Preloads all assets\n   * @param  {Function} callback Callback to invoke on completion\n   * @return {void}\n   */","meta":{"range":[6147,6202],"filename":"engine.js","lineno":235,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000760","name":"Engine#preload","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Preloads all assets","params":[{"type":{"names":["function"]},"description":"Callback to invoke on completion","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"name":"preload","longname":"Engine#preload","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#preload"},{"comment":"/**\n   * Start the render loop.\n   * @param  {Number} tick Time since last tick (optional)\n   * @return {void}\n   */","meta":{"range":[5696,6020],"filename":"engine.js","lineno":215,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000694","name":"Engine#render","type":"MethodDefinition","paramnames":["tick"]},"vars":{"":null}},"description":"Start the render loop.","params":[{"type":{"names":["Number"]},"description":"Time since last tick (optional)","name":"tick"}],"returns":[{"type":{"names":["void"]}}],"name":"render","longname":"Engine#render","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#render"},{"comment":"/**\n   * Sets the scaling factor for the canvas.\n   *\n   * @chainable\n   * @param  {Number} factor The scale factor\n   * @return {this} Returns `this`\n   */","meta":{"range":[3027,3099],"filename":"engine.js","lineno":90,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000314","name":"Engine#rescale","type":"MethodDefinition","paramnames":["factor"]},"vars":{"":null}},"description":"Sets the scaling factor for the canvas.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"The scale factor","name":"factor"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"rescale","longname":"Engine#rescale","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#rescale"},{"comment":"/**\n   * Resize the canvas and viewport to new dimensions.\n   * Uses the canvas' clientWidth and clientHeight to determine viewport size,\n   * if not provided.\n   *\n   * @chainable\n   * @param {Number} width   (optional) width\n   * @param {Number} height  (optional) height\n   * @return {this} Returns `this`\n   */","meta":{"range":[2302,2864],"filename":"engine.js","lineno":66,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000209","name":"Engine#resize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Resize the canvas and viewport to new dimensions.\nUses the canvas' clientWidth and clientHeight to determine viewport size,\nif not provided.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"(optional) width","name":"width"},{"type":{"names":["Number"]},"description":"(optional) height","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"resize","longname":"Engine#resize","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#resize"},{"comment":"/**\n   * Stops the render loop, if it's running.\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[3448,3590],"filename":"engine.js","lineno":112,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000346","name":"Engine#stop","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Stops the render loop, if it's running.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"stop","longname":"Engine#stop","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#stop"},{"comment":"/**\n   * Updates the current drawing viewport to the canvas' current dimensions\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[3247,3331],"filename":"engine.js","lineno":101,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000330","name":"Engine#updateView","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Updates the current drawing viewport to the canvas' current dimensions","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateView","longname":"Engine#updateView","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#updateView"}],"$constructor":{"comment":"","meta":{"range":[1117,1981],"filename":"engine.js","lineno":27,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000046","name":"Engine","type":"MethodDefinition","paramnames":["canvas","assets","enableSnapshots"]},"vars":{"":null}},"undocumented":true,"name":"Engine","longname":"Engine","kind":"class","scope":"global","params":[],"$longname":"Engine"}}],"symbols":["AssetManager","AssetManager#addAssets","AssetManager#addMesh","AssetManager#addProgram","AssetManager#addTexture","AssetManager#generateManifest","AssetManager#loadAll","AssetManager#loadMesh","AssetManager#loadProgram","AssetManager#loadTexture","Camera","Camera#addAnimation","Camera#lookAt","Camera#setDimensions","Camera#setFar","Camera#setFieldOfView","Camera#setPosition","Camera#translate","Engine","Engine#capture","Engine#demo","Engine#demoEntities","Engine#draw","Engine#preload","Engine#render","Engine#rescale","Engine#resize","Engine#stop","Engine#updateView"]},"assets":{"documentation":[{"comment":"/**\n * An AssetLoader manages loading one or more assets.  It handles debouncing of\n * of multiple requests for the same asset, etc.\n *\n * @class\n */","meta":{"range":[216,4573],"filename":"asset-loader.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000009","name":"AssetLoader","type":"ClassDeclaration","paramnames":[]}},"classdesc":"An AssetLoader manages loading one or more assets.  It handles debouncing of\nof multiple requests for the same asset, etc.","kind":"class","name":"AssetLoader","longname":"AssetLoader","scope":"global","description":"Noop.","params":[],"$longname":"AssetLoader","$members":[{"comment":"/**\n   * Loads a resource via xhr or Image\n   *\n   * @static\n   * @param  {String}   url      href of the resource to fetch\n   * @param  {String}   type     One of XHMLHttpRequest's supported responseType\n   *                             values (arraybuffer, blob, document, json, text)\n   *                             or 'image' or 'image.co' (for a cross-origin image)\n   * @return {Promise}           Returns a promise that resolves on success, or rejects\n   *                             on failure.\n   */","meta":{"range":[2905,4571],"filename":"asset-loader.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000242","name":"AssetLoader.loadResource","type":"MethodDefinition","paramnames":["url","type"]},"vars":{"":null}},"description":"Loads a resource via xhr or Image","scope":"static","params":[{"type":{"names":["String"]},"description":"href of the resource to fetch","name":"url"},{"type":{"names":["String"]},"description":"One of XHMLHttpRequest's supported responseType\n                            values (arraybuffer, blob, document, json, text)\n                            or 'image' or 'image.co' (for a cross-origin image)","name":"type"}],"returns":[{"type":{"names":["Promise"]},"description":"Returns a promise that resolves on success, or rejects\n                            on failure."}],"name":"loadResource","longname":"AssetLoader.loadResource","kind":"function","memberof":"AssetLoader","$longname":"AssetLoader.loadResource"},{"comment":"/**\n   * Directly retrieve an asset from the cache\n   * @param  {String} name The cache key\n   * @return {mixed}       The cached asset, if it exists.\n   */","meta":{"range":[2337,2388],"filename":"asset-loader.js","lineno":88,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000231","name":"AssetLoader#getAsset","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Directly retrieve an asset from the cache","params":[{"type":{"names":["String"]},"description":"The cache key","name":"name"}],"returns":[{"type":{"names":["mixed"]},"description":"The cached asset, if it exists."}],"name":"getAsset","longname":"AssetLoader#getAsset","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#getAsset"},{"comment":"/**\n   * Loads a single asset.\n   *\n   * @param {String} url  The url of the asset to load.\n   * @param {String} type The type of asset being requested\n   *\n   * @returns { Promise }  Returns a promise.  Resolves immediately\n   *                       if the asset it already loaded.\n   * @see AssetLoader.loadResource\n   */","meta":{"range":[661,1541],"filename":"asset-loader.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000028","name":"AssetLoader#loadAsset","type":"MethodDefinition","paramnames":["url","type"]},"vars":{"":null}},"description":"Loads a single asset.","params":[{"type":{"names":["String"]},"description":"The url of the asset to load.","name":"url"},{"type":{"names":["String"]},"description":"The type of asset being requested","name":"type"}],"returns":[{"type":{"names":["Promise"]},"description":"Returns a promise.  Resolves immediately\n                      if the asset it already loaded."}],"see":["AssetLoader.loadResource"],"name":"loadAsset","longname":"AssetLoader#loadAsset","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#loadAsset"},{"comment":"/**\n   * Load a set of assets in parallel\n   * @param  {Array} urls   Array of urls of resources\n   * @param  {Array} types  Array of types of resources\n   * @return {Promise}      A Promise that resolves when all assets are loaded,\n   *                        or rejects when any fail.\n   * @see  AssetLoader.loadResource\n   */","meta":{"range":[1876,2174],"filename":"asset-loader.js","lineno":71,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000182","name":"AssetLoader#loadAssetGroup","type":"MethodDefinition","paramnames":["urls","types"]},"vars":{"":null}},"description":"Load a set of assets in parallel","params":[{"type":{"names":["Array"]},"description":"Array of urls of resources","name":"urls"},{"type":{"names":["Array"]},"description":"Array of types of resources","name":"types"}],"returns":[{"type":{"names":["Promise"]},"description":"A Promise that resolves when all assets are loaded,\n                       or rejects when any fail."}],"see":["AssetLoader.loadResource"],"name":"loadAssetGroup","longname":"AssetLoader#loadAssetGroup","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#loadAssetGroup"}],"$constructor":{"comment":"/**\n   * Noop.\n   */","meta":{"range":[262,330],"filename":"asset-loader.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000012","name":"AssetLoader","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Noop.","name":"AssetLoader","longname":"AssetLoader","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"AssetLoader"}}],"symbols":["AssetLoader","AssetLoader.loadResource","AssetLoader#getAsset","AssetLoader#loadAsset","AssetLoader#loadAssetGroup"]},"utilities":{"documentation":[{"comment":"/**\n * Simple class for hooking up animations to drawables.\n *\n * Animations refers specifically to things like moving objects/cameras around.\n * Animations handled by the existing shaders should be implemented that way, instead.\n */","meta":{"range":[264,2841],"filename":"animation.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000346","name":"Animation","type":"ClassDeclaration","paramnames":["duration","transform","timing","loop"]}},"classdesc":"Simple class for hooking up animations to drawables.\n\nAnimations refers specifically to things like moving objects/cameras around.\nAnimations handled by the existing shaders should be implemented that way, instead.","name":"Animation","longname":"Animation","kind":"class","scope":"global","description":"Create an animation for a drawable","params":[{"type":{"names":["Number"]},"description":"Duration of one cycle of the animation","name":"duration"},{"type":{"names":["function"]},"description":"Animation callback\n                             Parameter: Number t\n                             Parameter: Drawable drawable","name":"transform"},{"type":{"names":["function"]},"description":"Timing function (i.e. easing)  Defaults. to Ease.linear","name":"timing"},{"type":{"names":["Boolean"]},"description":"Whether or not to loop the animation","name":"loop"}],"$longname":"Animation","$members":[{"comment":"/**\n   * Allows for chaining of animations\n   *\n   * @chainable\n   * @param  {Animation} animation  The animation to queue after this one\n   *                                completes. Note that this isn't really\n   *                                valid for looping animations\n   * @return {this} Returns `this`\n   */","meta":{"range":[2640,2839],"filename":"animation.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000536","name":"Animation#chain","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Allows for chaining of animations","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to queue after this one\n                               completes. Note that this isn't really\n                               valid for looping animations","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"chain","longname":"Animation#chain","kind":"function","memberof":"Animation","scope":"instance","$longname":"Animation#chain"},{"comment":"/**\n   * Pauses the running animation\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1553,1640],"filename":"animation.js","lineno":64,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000438","name":"Animation#pause","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Pauses the running animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"pause","longname":"Animation#pause","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#pause"},{"comment":"/**\n   * Starts the animation\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1170,1257],"filename":"animation.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000405","name":"Animation#start","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Starts the animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"start","longname":"Animation#start","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#start"},{"comment":"/**\n   * Perform a step of the animation\n   * @param  {Number} delta      Time elasped since last frame\n   * @param  {Drawable} drawable The drawable to operate on\n   * @return {Boolean}           Return true to signal the end of the animation\n   */","meta":{"range":[1896,2315],"filename":"animation.js","lineno":77,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000455","name":"Animation#step","type":"MethodDefinition","paramnames":["delta","drawable"]},"vars":{"":null}},"description":"Perform a step of the animation","params":[{"type":{"names":["Number"]},"description":"Time elasped since last frame","name":"delta"},{"type":{"names":["Drawable"]},"description":"The drawable to operate on","name":"drawable"}],"returns":[{"type":{"names":["Boolean"]},"description":"Return true to signal the end of the animation"}],"name":"step","longname":"Animation#step","kind":"function","memberof":"Animation","scope":"instance","$longname":"Animation#step"},{"comment":"/**\n   * Stops the animation, and resets the elasped time to 0\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1388,1447],"filename":"animation.js","lineno":53,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000423","name":"Animation#stop","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Stops the animation, and resets the elasped time to 0","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"stop","longname":"Animation#stop","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#stop"}],"$constructor":{"comment":"/**\n   * Create an animation for a drawable\n   *\n   * @chainable\n   * @param  {Number}  duration   Duration of one cycle of the animation\n   * @param  {Function} transform Animation callback\n   *                              Parameter: Number t\n   *                              Parameter: Drawable drawable\n   * @param  {Function} timing    Timing function (i.e. easing)  Defaults. to Ease.linear\n   * @param  {Boolean}  loop      Whether or not to loop the animation\n   * @return {this}               The animation\n   */","meta":{"range":[810,1072],"filename":"animation.js","lineno":23,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000349","name":"Animation","type":"MethodDefinition","paramnames":["duration","transform","timing","loop"]},"vars":{"":null}},"description":"Create an animation for a drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Duration of one cycle of the animation","name":"duration"},{"type":{"names":["function"]},"description":"Animation callback\n                             Parameter: Number t\n                             Parameter: Drawable drawable","name":"transform"},{"type":{"names":["function"]},"description":"Timing function (i.e. easing)  Defaults. to Ease.linear","name":"timing"},{"type":{"names":["Boolean"]},"description":"Whether or not to loop the animation","name":"loop"}],"returns":[{"type":{"names":["this"]},"description":"The animation"}],"name":"Animation","longname":"Animation","kind":"class","scope":"global","undocumented":true,"$longname":"Animation"}},{"comment":"","meta":{"range":[1995,2080],"filename":"utils.js","lineno":69,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000241","name":"artifact","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"artifact","longname":"artifact","kind":"class","scope":"global","params":[],"$longname":"artifact"},{"comment":"/**\n * Disco portal animation\n * @param  {Number} delta   Time since last frame\n * @param  {Number} elapsed Total time elapsed\n * @return {Boolean}        Returns true to continue animation\n */","meta":{"range":[1393,1661],"filename":"utils.js","lineno":53,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000159","name":"exports.disco","type":"FunctionDeclaration","paramnames":["delta","elapsed"]}},"description":"Disco portal animation","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"},{"type":{"names":["Number"]},"description":"Total time elapsed","name":"elapsed"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue animation"}],"name":"disco","longname":"disco","kind":"function","scope":"global","$longname":"disco"},{"comment":"/**\n * Easing functions\n *\n * Adapted from https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\n * @namespace\n */","meta":{"range":[162,171],"filename":"easing.js","lineno":8,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000565","name":"Ease","type":"ObjectExpression","value":"{}"}},"description":"Easing functions\n\nAdapted from https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js","kind":"namespace","name":"Ease","longname":"Ease","scope":"global","$longname":"Ease","$members":[{"comment":"/**\n * Mimics the simple -100 to 100 easing in Flash Pro.\n * @method get\n * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[565,843],"filename":"easing.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Mimics the simple -100 to 100 easing in Flash Pro.","kind":"function","name":"get","params":[{"type":{"names":["Number"]},"description":"A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.get","$longname":"Ease.get"},{"comment":"/**\n * Configurable \"back in\" ease.\n * @method getBackIn\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back in\" ease function\n **/","meta":{"range":[5097,5300],"filename":"easing.js","lineno":235,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back in\" ease.","kind":"function","name":"getBackIn","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back in\" ease function"}],"longname":"Ease.getBackIn","$longname":"Ease.getBackIn"},{"comment":"/**\n * Configurable \"back in out\" ease.\n * @method getBackInOut\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back in out\" ease function\n **/","meta":{"range":[6131,6345],"filename":"easing.js","lineno":281,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back in out\" ease.","kind":"function","name":"getBackInOut","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back in out\" ease function"}],"longname":"Ease.getBackInOut","$longname":"Ease.getBackInOut"},{"comment":"/**\n * Configurable \"back out\" ease.\n * @method getBackOut\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back out\" ease function\n **/","meta":{"range":[5606,5812],"filename":"easing.js","lineno":258,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back out\" ease.","kind":"function","name":"getBackOut","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back out\" ease function"}],"longname":"Ease.getBackOut","$longname":"Ease.getBackOut"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticIn\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic in\" ease function\n **/","meta":{"range":[8521,8774],"filename":"easing.js","lineno":388,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticIn","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic in\" ease function"}],"longname":"Ease.getElasticIn","$longname":"Ease.getElasticIn"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticInOut\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic in-out\" ease function\n **/","meta":{"range":[10040,10300],"filename":"easing.js","lineno":446,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticInOut","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic in-out\" ease function"}],"longname":"Ease.getElasticInOut","$longname":"Ease.getElasticInOut"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticOut\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic out\" ease function\n **/","meta":{"range":[9278,9533],"filename":"easing.js","lineno":417,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticOut","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic out\" ease function"}],"longname":"Ease.getElasticOut","$longname":"Ease.getElasticOut"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowIn\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1157,1379],"filename":"easing.js","lineno":57,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowIn","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowIn","$longname":"Ease.getPowIn"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowInOut\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1799,2024],"filename":"easing.js","lineno":85,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowInOut","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowInOut","$longname":"Ease.getPowInOut"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowOut\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1473,1696],"filename":"easing.js","lineno":71,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowOut","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowOut","$longname":"Ease.getPowOut"},{"comment":"/**\n * Identical to linear.\n * @method none\n * @param {Number} t Parametric value (from 0 to 1)\n * @static\n * @memberOf Ease\n * @return {Number} The linear transform\n **/","meta":{"range":[368,538],"filename":"easing.js","lineno":21,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Identical to linear.","kind":"function","name":"none","params":[{"type":{"names":["Number"]},"description":"Parametric value (from 0 to 1)","name":"t"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["Number"]},"description":"The linear transform"}],"longname":"Ease.none","$longname":"Ease.none"}]},{"comment":"/**\n * Makes an artifact drawable class\n * @param  {String} meshName    Name of the mesh to use\n * @param  {String} textureName Name of the texture to use\n * @return {ArtifactDrawable}   A new drawable class for this artifact\n */","meta":{"range":[1893,2106],"filename":"utils.js","lineno":67,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000231","name":"exports.makeArtifact","type":"FunctionDeclaration","paramnames":["meshName","textureName"]}},"description":"Makes an artifact drawable class","params":[{"type":{"names":["String"]},"description":"Name of the mesh to use","name":"meshName"},{"type":{"names":["String"]},"description":"Name of the texture to use","name":"textureName"}],"returns":[{"type":{"names":["ArtifactDrawable"]},"description":"A new drawable class for this artifact"}],"name":"makeArtifact","longname":"makeArtifact","kind":"function","scope":"global","$longname":"makeArtifact"},{"comment":"/**\n * Reset the GL state to some base state\n * @param  {context} gl A WebGL context\n * @return {void}\n */","meta":{"range":[197,581],"filename":"utils.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000009","name":"exports.resetGL","type":"FunctionDeclaration","paramnames":["gl"]}},"description":"Reset the GL state to some base state","params":[{"type":{"names":["context"]},"description":"A WebGL context","name":"gl"}],"returns":[{"type":{"names":["void"]}}],"name":"resetGL","longname":"resetGL","kind":"function","scope":"global","$longname":"resetGL"},{"comment":"/**\n * Set parameters base on some base set of defaults\n * @param {Object} base  Parameter definition with defaults\n * @param {Object} opts  Options (overrides)\n * @param {Boolean} deep Do deep copying on objects.\n * @return {Object} The base object\n */","meta":{"range":[837,1197],"filename":"utils.js","lineno":29,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000091","name":"exports.setParams","type":"FunctionDeclaration","paramnames":["base","opts","deep"]}},"description":"Set parameters base on some base set of defaults","params":[{"type":{"names":["Object"]},"description":"Parameter definition with defaults","name":"base"},{"type":{"names":["Object"]},"description":"Options (overrides)","name":"opts"},{"type":{"names":["Boolean"]},"description":"Do deep copying on objects.","name":"deep"}],"returns":[{"type":{"names":["Object"]},"description":"The base object"}],"name":"setParams","longname":"setParams","kind":"function","scope":"global","$longname":"setParams"}],"symbols":["Animation","Animation#chain","Animation#pause","Animation#start","Animation#step","Animation#stop","artifact","disco","Ease","Ease.get","Ease.getBackIn","Ease.getBackInOut","Ease.getBackOut","Ease.getElasticIn","Ease.getElasticInOut","Ease.getElasticOut","Ease.getPowIn","Ease.getPowInOut","Ease.getPowOut","Ease.none","makeArtifact","resetGL","setParams"]},"drawables":{"documentation":[{"comment":"/**\n * Creates an \"atmosphere\" effect.\n *\n * This is a modified version of the atmosphere program from:\n * https://github.com/dataarts/webgl-globe/blob/master/globe/globe.js\n * @param  {Number} radius      Radius of the world.\n *                              This should match the radius of the world mesh the\n *                              atmosphere is being rendered over.\n * @param  {Number} vSlices     Number of vertical slices for the sphere mesh\n * @param  {Number} hSlices     Number of horizontal slices for the sphere mesh\n * @param  {Number} scaleFactor The percent to scale the mesh\n * @return {void}\n */","meta":{"range":[822,2104],"filename":"atmosphere.js","lineno":21,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100000985","name":"AtmosphereDrawable","type":"ClassDeclaration","paramnames":["radius","vSlices","hSlices","scaleFactor"]}},"classdesc":"Creates an \"atmosphere\" effect.\n\nThis is a modified version of the atmosphere program from:\nhttps://github.com/dataarts/webgl-globe/blob/master/globe/globe.js","params":[{"type":{"names":["Number"]},"description":"Radius of the world.\n                             This should match the radius of the world mesh the\n                             atmosphere is being rendered over.","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices for the sphere mesh","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices for the sphere mesh","name":"hSlices"},{"type":{"names":["Number"]},"description":"The percent to scale the mesh","name":"scaleFactor"}],"returns":[{"type":{"names":["void"]}}],"name":"AtmosphereDrawable","longname":"AtmosphereDrawable","kind":"class","scope":"global","$longname":"AtmosphereDrawable","$members":[{"comment":"/**\n   * Initializes the drawable\n   *\n   * @see    src/drawable.js\n   * @param  {AssetManager} manager The AssetManager containing the required assets.\n   * @return {Promise}  A Promise that resolves when the asset is initialized\n   */","meta":{"range":[1935,2102],"filename":"atmosphere.js","lineno":55,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001099","name":"AtmosphereDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initializes the drawable","see":["src/drawable.js"],"params":[{"type":{"names":["AssetManager"]},"description":"The AssetManager containing the required assets.","name":"manager"}],"returns":[{"type":{"names":["Promise"]},"description":"A Promise that resolves when the asset is initialized"}],"name":"init","longname":"AtmosphereDrawable#init","kind":"function","memberof":"AtmosphereDrawable","scope":"instance","$longname":"AtmosphereDrawable#init"},{"comment":"/**\n   * Updates the view matrices of the model\n   *\n   * @chainable\n   * @see    src/drawable/model.js#updateView\n   * @param  {mat4} viewProject   combined projection matrix multiplied by view matrix.\n   * @return {this} Returns `this`\n   */","meta":{"range":[1418,1692],"filename":"atmosphere.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001047","name":"AtmosphereDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject"]},"vars":{"":null}},"description":"Updates the view matrices of the model","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"see":["src/drawable/model.js#updateView"],"params":[{"type":{"names":["mat4"]},"description":"combined projection matrix multiplied by view matrix.","name":"viewProject"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateView","longname":"AtmosphereDrawable#updateView","kind":"function","memberof":"AtmosphereDrawable","scope":"instance","$longname":"AtmosphereDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[868,1168],"filename":"atmosphere.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100000989","name":"AtmosphereDrawable","type":"MethodDefinition","paramnames":["radius","vSlices","hSlices","scaleFactor"]},"vars":{"":null}},"undocumented":true,"name":"AtmosphereDrawable","longname":"AtmosphereDrawable","kind":"class","scope":"global","params":[],"$longname":"AtmosphereDrawable"}},{"comment":"","meta":{"range":[707,756],"filename":"world.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003002","name":"bicoloredbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"bicoloredbase","longname":"bicoloredbase","kind":"class","scope":"global","params":[],"$longname":"bicoloredbase"},{"comment":"/**\n * This is used for items and other renderables that have two visible colors\n *\n * The specifics of it are basically: if the texture has an opacity less than 0.5,\n * the texture color is blended with u_color0\n * Otherwise, it's the texture color blended with u_color1\n *\n * Or something like that.\n * @param  {String} meshName    Internal name of the mesh for this drawable\n * @param  {String} textureName Internal name of the texture for this drawble\n */","meta":{"range":[882,1133],"filename":"bicolored.js","lineno":34,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001176","name":"BicoloredDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"This is used for items and other renderables that have two visible colors\n\nThe specifics of it are basically: if the texture has an opacity less than 0.5,\nthe texture color is blended with u_color0\nOtherwise, it's the texture color blended with u_color1\n\nOr something like that.","params":[{"type":{"names":["String"]},"description":"Internal name of the mesh for this drawable","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture for this drawble","name":"textureName"}],"name":"BicoloredDrawable","longname":"BicoloredDrawable","kind":"class","scope":"global","$longname":"BicoloredDrawable","$constructor":{"comment":"","meta":{"range":[936,1131],"filename":"bicolored.js","lineno":36,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001180","name":"BicoloredDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"BicoloredDrawable","longname":"BicoloredDrawable","kind":"class","scope":"global","params":[],"$longname":"BicoloredDrawable"}},{"comment":"/**\n * Base class for all \"drawable\" things.\n *\n * Requires, at the very least, a program to run.\n */","meta":{"range":[221,9445],"filename":"drawable.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000017","name":"Drawable","type":"ClassDeclaration","paramnames":["programName","meshName"]}},"classdesc":"Base class for all \"drawable\" things.\n\nRequires, at the very least, a program to run.","name":"Drawable","longname":"Drawable","kind":"class","scope":"global","description":"Given a mesh internal name and a program internal name, construct\na Drawable","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal Name","name":"meshName"}],"$longname":"Drawable","$members":[{"comment":"/**\n   * Adds an animation\n   *\n   * @chainable\n   * @param {Animation} animation The animation to be run.\n   *                              This will need to be started independently, or prior to being added.\n   * @return {this} Returns `this`\n   */","meta":{"range":[9112,9201],"filename":"drawable.js","lineno":359,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000893","name":"Drawable#addAnimation","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Adds an animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to be run.\n                             This will need to be started independently, or prior to being added.","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"addAnimation","longname":"Drawable#addAnimation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#addAnimation"},{"comment":"/**\n   * Adds a drawable as a child of this one.\n   * @param {Drawable} drawable The child drawable.\n   * @return {void}\n   */","meta":{"range":[4129,4350],"filename":"drawable.js","lineno":147,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000411","name":"Drawable#addChild","type":"MethodDefinition","paramnames":["drawable"]},"vars":{"":null}},"description":"Adds a drawable as a child of this one.","params":[{"type":{"names":["Drawable"]},"description":"The child drawable.","name":"drawable"}],"returns":[{"type":{"names":["void"]}}],"name":"addChild","longname":"Drawable#addChild","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#addChild"},{"comment":"/**\n   * NYI\n   * @return {void}\n   */","meta":{"range":[8827,8855],"filename":"drawable.js","lineno":347,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000889","name":"Drawable#dispose","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"NYI","returns":[{"type":{"names":["void"]}}],"name":"dispose","longname":"Drawable#dispose","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#dispose"},{"comment":"/**\n   * Executes a draw call for this object\n   *\n   * Issues a warning if the drawable has not yet been initialized with `init`\n   * @return {void}\n   */","meta":{"range":[2942,3053],"filename":"drawable.js","lineno":104,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000349","name":"Drawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Executes a draw call for this object\n\nIssues a warning if the drawable has not yet been initialized with `init`","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"Drawable#draw","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#draw"},{"comment":"/**\n   * Sets the draw mode to draw triangles\n   * @return {void}\n   */","meta":{"range":[8722,8782],"filename":"drawable.js","lineno":339,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000877","name":"Drawable#drawFaces","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Sets the draw mode to draw triangles","returns":[{"type":{"names":["void"]}}],"name":"drawFaces","longname":"Drawable#drawFaces","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#drawFaces"},{"comment":"/**\n   * Sets the draw mode to draw lines\n   * @return {void}\n   */","meta":{"range":[8588,8644],"filename":"drawable.js","lineno":331,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000865","name":"Drawable#drawLines","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Sets the draw mode to draw lines","returns":[{"type":{"names":["void"]}}],"name":"drawLines","longname":"Drawable#drawLines","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#drawLines"},{"comment":"/**\n   * Initializer for the drawable\n   *\n   * Hooks up the drawable to all its gl-bound resources\n   *\n   * @param  {AssetManager} manager AssetManager containing the managed resources for this\n   *                                drawable.\n   * @return {Promise}              Resolves if the assets are successfully found and initialized,\n   *                                rejects (and generates a warning) otherwise.\n   */","meta":{"range":[2355,2518],"filename":"drawable.js","lineno":78,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000304","name":"Drawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initializer for the drawable\n\nHooks up the drawable to all its gl-bound resources","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the managed resources for this\n                               drawable.","name":"manager"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves if the assets are successfully found and initialized,\n                               rejects (and generates a warning) otherwise."}],"name":"init","longname":"Drawable#init","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#init"},{"comment":"/**\n   * Rotate a model with a quaternion\n   * @param  {quat} q   The quaternion\n   * @return {void}\n   */","meta":{"range":[6802,6892],"filename":"drawable.js","lineno":251,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000697","name":"Drawable#rotate","type":"MethodDefinition","paramnames":["q"]},"vars":{"":null}},"description":"Rotate a model with a quaternion","params":[{"type":{"names":["quat"]},"description":"The quaternion","name":"q"}],"returns":[{"type":{"names":["void"]}}],"name":"rotate","longname":"Drawable#rotate","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#rotate"},{"comment":"/**\n   * Scale all dimensions by the same value\n   * @param  {Number} f The amount to _scale\n   * @return {void}\n   */","meta":{"range":[7809,7871],"filename":"drawable.js","lineno":298,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000790","name":"Drawable#scalarScale","type":"MethodDefinition","paramnames":["f"]},"vars":{"":null}},"description":"Scale all dimensions by the same value","params":[{"type":{"names":["Number"]},"description":"The amount to _scale","name":"f"}],"returns":[{"type":{"names":["void"]}}],"name":"scalarScale","longname":"Drawable#scalarScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#scalarScale"},{"comment":"/**\n   * Scale a model by some vector\n   * @param  {vec3} vec   The vector\n   * @return {void}\n   */","meta":{"range":[6391,6482],"filename":"drawable.js","lineno":231,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000652","name":"Drawable#scale","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Scale a model by some vector","params":[{"type":{"names":["vec3"]},"description":"The vector","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"scale","longname":"Drawable#scale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#scale"},{"comment":"/**\n   * Sets the specific draw function for this drawable\n   *\n   * @chainable\n   * @param {Function} fn The draw function to use when drawable this object\n   * @return {this} Returns `this`\n   */","meta":{"range":[2722,2780],"filename":"drawable.js","lineno":93,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000336","name":"Drawable#setDrawFn","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"Sets the specific draw function for this drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["function"]},"description":"The draw function to use when drawable this object","name":"fn"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setDrawFn","longname":"Drawable#setDrawFn","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setDrawFn"},{"comment":"/**\n   * Sets the drawing mode for this drawable.  Should be one of the modes\n   * found on Mesh\n   *\n   * @see  Mesh\n   * @param {enum} mode One of the Mesh.MODE_* constants\n   * @return {void}\n   */","meta":{"range":[8298,8514],"filename":"drawable.js","lineno":319,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000824","name":"Drawable#setDrawMode","type":"MethodDefinition","paramnames":["mode"]},"vars":{"":null}},"description":"Sets the drawing mode for this drawable.  Should be one of the modes\nfound on Mesh","see":["Mesh"],"params":[{"type":{"names":["enum"]},"description":"One of the Mesh.MODE_* constants","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"setDrawMode","longname":"Drawable#setDrawMode","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setDrawMode"},{"comment":"/**\n   * Sets the object's rotation from a quaternion\n   * @param {quat} q The new rotation\n   * @return {void}\n   */","meta":{"range":[7016,7090],"filename":"drawable.js","lineno":261,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000719","name":"Drawable#setRotation","type":"MethodDefinition","paramnames":["q"]},"vars":{"":null}},"description":"Sets the object's rotation from a quaternion","params":[{"type":{"names":["quat"]},"description":"The new rotation","name":"q"}],"returns":[{"type":{"names":["void"]}}],"name":"setRotation","longname":"Drawable#setRotation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setRotation"},{"comment":"/**\n   * Sets the local scale to some scalar value (for x, y, and z)\n   * @param {Number} f Amount to set the scale to.\n   * @return {void}\n   */","meta":{"range":[8023,8091],"filename":"drawable.js","lineno":307,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000807","name":"Drawable#setScalarScale","type":"MethodDefinition","paramnames":["f"]},"vars":{"":null}},"description":"Sets the local scale to some scalar value (for x, y, and z)","params":[{"type":{"names":["Number"]},"description":"Amount to set the scale to.","name":"f"}],"returns":[{"type":{"names":["void"]}}],"name":"setScalarScale","longname":"Drawable#setScalarScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setScalarScale"},{"comment":"/**\n   * Sets the scale of the local transform\n   * @param {vec3} vec The scale to set to.\n   * @return {void}\n   */","meta":{"range":[6605,6689],"filename":"drawable.js","lineno":241,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000674","name":"Drawable#setScale","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Sets the scale of the local transform","params":[{"type":{"names":["vec3"]},"description":"The scale to set to.","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"setScale","longname":"Drawable#setScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setScale"},{"comment":"/**\n   * Sets the position to some vector\n   * @param {vec3} vec The new position\n   * @return {void}\n   */","meta":{"range":[6197,6284],"filename":"drawable.js","lineno":221,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000632","name":"Drawable#setTranslation","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Sets the position to some vector","params":[{"type":{"names":["vec3"]},"description":"The new position","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"setTranslation","longname":"Drawable#setTranslation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setTranslation"},{"comment":"/**\n   * Sets a uniform on the drawable\n   *\n   * @chainable\n   * @param {String} name  Name of the drawable to set\n   * @param {mixed} value  Value to set on the drawable.\n   * @returns {this} Returns `this`\n   */","meta":{"range":[3274,3353],"filename":"drawable.js","lineno":120,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000373","name":"Drawable#setUniform","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets a uniform on the drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the drawable to set","name":"name"},{"type":{"names":["mixed"]},"description":"Value to set on the drawable.","name":"value"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setUniform","longname":"Drawable#setUniform","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setUniform"},{"comment":"/**\n   * Translate a model along some vector\n   * @param  {vec3} vec   The vector\n   * @return {void}\n   */","meta":{"range":[5963,6083],"filename":"drawable.js","lineno":210,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000605","name":"Drawable#translate","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Translate a model along some vector","params":[{"type":{"names":["vec3"]},"description":"The vector","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"translate","longname":"Drawable#translate","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translate"},{"comment":"/**\n   * Translate the model along the X axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7217,7288],"filename":"drawable.js","lineno":271,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000739","name":"Drawable#translateX","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the X axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateX","longname":"Drawable#translateX","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateX"},{"comment":"/**\n   * Translate the model along the Y axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7415,7486],"filename":"drawable.js","lineno":280,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000756","name":"Drawable#translateY","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the Y axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateY","longname":"Drawable#translateY","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateY"},{"comment":"/**\n   * Translate the model along the Z axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7613,7684],"filename":"drawable.js","lineno":289,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000773","name":"Drawable#translateZ","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the Z axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateZ","longname":"Drawable#translateZ","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateZ"},{"comment":"/**\n   * Update the internal u_modelViewProject uniform\n   * by applying world and local transforms to the model\n   * matrix.  Then, propagate the new local transform to all the children\n   * by way of their world transforms.\n   * @return {void}\n   */","meta":{"range":[4608,5034],"filename":"drawable.js","lineno":162,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000442","name":"Drawable#updateMatrix","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the internal u_modelViewProject uniform\nby applying world and local transforms to the model\nmatrix.  Then, propagate the new local transform to all the children\nby way of their world transforms.","returns":[{"type":{"names":["void"]}}],"name":"updateMatrix","longname":"Drawable#updateMatrix","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#updateMatrix"},{"comment":"/**\n   * Updates the internal representation of the ray from the camera to the\n   * drawable\n   * @return {void}\n   */","meta":{"range":[5667,5849],"filename":"drawable.js","lineno":199,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000562","name":"Drawable#updateRay","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Updates the internal representation of the ray from the camera to the\ndrawable","returns":[{"type":{"names":["void"]}}],"name":"updateRay","longname":"Drawable#updateRay","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#updateRay"},{"comment":"/**\n   * Updates the elapsed time for this object.\n   *\n   * Also executes any periodic updates that have been applied to the drawable\n   * (i.e. animations).  If this function returns a falsey value, it signals that the\n   * animation has ended, and that the object should be removed from the draw loop.\n   *\n   * @param  {Number} delta Amount of time that has elapsed since the last draw call\n   * @return {boolean}      Return false if the object should be removed from the\n   *                        return loop.\n   */","meta":{"range":[3883,3996],"filename":"drawable.js","lineno":136,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000389","name":"Drawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates the elapsed time for this object.\n\nAlso executes any periodic updates that have been applied to the drawable\n(i.e. animations).  If this function returns a falsey value, it signals that the\nanimation has ended, and that the object should be removed from the draw loop.","params":[{"type":{"names":["Number"]},"description":"Amount of time that has elapsed since the last draw call","name":"delta"}],"returns":[{"type":{"names":["boolean"]},"description":"Return false if the object should be removed from the\n                       return loop."}],"name":"updateTime","longname":"Drawable#updateTime","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateTime"},{"comment":"/**\n   * Update the internal viewProject matrix (projection * view matrices)\n   * @param  {mat4} viewProject Projection matrix multiplied by view matrix\n   * @return {void}\n   */","meta":{"range":[5418,5542],"filename":"drawable.js","lineno":188,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000541","name":"Drawable#updateView","type":"MethodDefinition","paramnames":["viewProject"]},"vars":{"":null}},"description":"Update the internal viewProject matrix (projection * view matrices)","params":[{"type":{"names":["mat4"]},"description":"Projection matrix multiplied by view matrix","name":"viewProject"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"Drawable#updateView","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateView"},{"comment":"/**\n   * Updates the model's \"world\" transform.\n   * @param  {mat4} world   A world transform\n   * @return {void}\n   */","meta":{"range":[5160,5233],"filename":"drawable.js","lineno":178,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000525","name":"Drawable#updateWorld","type":"MethodDefinition","paramnames":["world"]},"vars":{"":null}},"description":"Updates the model's \"world\" transform.","params":[{"type":{"names":["mat4"]},"description":"A world transform","name":"world"}],"returns":[{"type":{"names":["void"]}}],"name":"updateWorld","longname":"Drawable#updateWorld","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateWorld"}],"$constructor":{"comment":"/**\n   * Given a mesh internal name and a program internal name, construct\n   * a Drawable\n   * @param  {String} programName Program internal name\n   * @param  {String} meshName    Mesh internal Name\n   */","meta":{"range":[449,1149],"filename":"drawable.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000020","name":"Drawable","type":"MethodDefinition","paramnames":["programName","meshName"]},"vars":{"":null}},"description":"Given a mesh internal name and a program internal name, construct\na Drawable","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal Name","name":"meshName"}],"name":"Drawable","longname":"Drawable","kind":"class","scope":"global","undocumented":true,"$longname":"Drawable"}},{"comment":"","meta":{"range":[532,581],"filename":"world.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002982","name":"glowrampbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"glowrampbase","longname":"glowrampbase","kind":"class","scope":"global","params":[],"$longname":"glowrampbase"},{"comment":"/**\n * A \"glowramp\" refers to the usage of the red, green, and blue channels to create\n * a \"glowing\" texture.\n *\n * @param  {String} meshName    Internal name of the mesh\n * @param  {String} textureName Internal name of the texture\n */","meta":{"range":[553,1364],"filename":"glowramp.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001251","name":"GlowrampDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"A \"glowramp\" refers to the usage of the red, green, and blue channels to create\na \"glowing\" texture.","params":[{"type":{"names":["String"]},"description":"Internal name of the mesh","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture","name":"textureName"}],"name":"GlowrampDrawable","longname":"GlowrampDrawable","kind":"class","scope":"global","$longname":"GlowrampDrawable","$members":[{"comment":"/**\n   * Updates default glowramp variables (rotation, ramp target, elapsed time\n   * and alpha)\n   * @param  {Number} tick Time delta since last tick\n   * @return {Boolean}     @see src/drawable.js#updateTime\n   */","meta":{"range":[1076,1362],"filename":"glowramp.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001303","name":"GlowrampDrawable#updateTime","type":"MethodDefinition","paramnames":["tick"]},"vars":{"":null}},"description":"Updates default glowramp variables (rotation, ramp target, elapsed time\nand alpha)","params":[{"type":{"names":["Number"]},"description":"Time delta since last tick","name":"tick"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"GlowrampDrawable#updateTime","kind":"function","memberof":"GlowrampDrawable","scope":"instance","$longname":"GlowrampDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[606,854],"filename":"glowramp.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001255","name":"GlowrampDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"GlowrampDrawable","longname":"GlowrampDrawable","kind":"class","scope":"global","params":[],"$longname":"GlowrampDrawable"}},{"comment":"/**\n * Contains drawable primitives for many of the inventory items.\n */","meta":{"range":[235,249],"filename":"inventory.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001394","name":"Inventory","type":"ObjectExpression","value":"{}"}},"description":"Contains drawable primitives for many of the inventory items.","name":"Inventory","longname":"Inventory","kind":"member","scope":"global","$longname":"Inventory"},{"comment":"","meta":{"range":[648,715],"filename":"inventory.js","lineno":25,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001419","name":"itembase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"itembase","longname":"itembase","kind":"class","scope":"global","params":[],"$longname":"itembase"},{"comment":"","meta":{"range":[392,468],"filename":"resource.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002360","name":"itembase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"itembase","longname":"itembase","kind":"class","scope":"global","params":[],"$longname":"itembase"},{"comment":"/**\n * The LinkDrawable represents the base class for link-type drawables.\n *\n * @param  {String} programName Internal name of the program to use\n * @param  {String} textureName Internal name of the texture to use\n */","meta":{"range":[308,1441],"filename":"link.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001554","name":"LinkDrawable","type":"ClassDeclaration","paramnames":["programName","textureName"]}},"classdesc":"The LinkDrawable represents the base class for link-type drawables.","params":[{"type":{"names":["String"]},"description":"Internal name of the program to use","name":"programName"},{"type":{"names":["String"]},"description":"Internal name of the texture to use","name":"textureName"}],"name":"LinkDrawable","longname":"LinkDrawable","kind":"class","scope":"global","$longname":"LinkDrawable","$members":[{"comment":"/**\n   * Updates default periodic uniforms for links\n   * @param  {Number} delta Time delta since last draw\n   * @return {Boolean}      @see src/drawable.js#updateTime\n   */","meta":{"range":[1288,1439],"filename":"link.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001670","name":"LinkDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates default periodic uniforms for links","params":[{"type":{"names":["Number"]},"description":"Time delta since last draw","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"LinkDrawable#updateTime","kind":"function","memberof":"LinkDrawable","scope":"instance","$longname":"LinkDrawable#updateTime"},{"comment":"/**\n   * Updates the camera transforms for the link drawables\n   * @param  {mat4}   viewProject Combined view and project matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[745,1108],"filename":"link.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001593","name":"LinkDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Updates the camera transforms for the link drawables","params":[{"type":{"names":["mat4"]},"description":"Combined view and project matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"LinkDrawable#updateView","kind":"function","memberof":"LinkDrawable","scope":"instance","$longname":"LinkDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[357,539],"filename":"link.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001558","name":"LinkDrawable","type":"MethodDefinition","paramnames":["programName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"LinkDrawable","longname":"LinkDrawable","kind":"class","scope":"global","params":[],"$longname":"LinkDrawable"}},{"comment":"","meta":{"range":[1437,1573],"filename":"inventory.js","lineno":61,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001465","name":"media","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"media","longname":"media","kind":"class","scope":"global","params":[],"$longname":"media"},{"comment":"","meta":{"range":[1068,1117],"filename":"world.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003042","name":"ornamentbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"ornamentbase","longname":"ornamentbase","kind":"class","scope":"global","params":[],"$longname":"ornamentbase"},{"comment":"/**\n * An OrnamentDrawable is a TextuedDrawable that draws an ornament on\n * a unit plane.\n * @param  {String} meshName    Internal name of the ornament mesh\n * @param  {String} textureName Internal name of the texture\n */","meta":{"range":[396,718],"filename":"ornament.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001726","name":"OrnamentDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"An OrnamentDrawable is a TextuedDrawable that draws an ornament on\na unit plane.","params":[{"type":{"names":["String"]},"description":"Internal name of the ornament mesh","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture","name":"textureName"}],"name":"OrnamentDrawable","longname":"OrnamentDrawable","kind":"class","scope":"global","$longname":"OrnamentDrawable","$constructor":{"comment":"","meta":{"range":[448,716],"filename":"ornament.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001730","name":"OrnamentDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"OrnamentDrawable","longname":"OrnamentDrawable","kind":"class","scope":"global","params":[],"$longname":"OrnamentDrawable"}},{"comment":"/**\n * A ParticleDrawable represents the base class for particles\n *\n * @extends {TexturedDrawable}\n */","meta":{"range":[265,615],"filename":"particle.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002057","name":"ParticleDrawable","type":"ClassDeclaration","paramnames":["programName"]}},"classdesc":"A ParticleDrawable represents the base class for particles","augments":["TexturedDrawable"],"name":"ParticleDrawable","longname":"ParticleDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticleDrawable","$members":[{"comment":"/**\n   * Draw the textured object\n   *\n   * @return {void}\n   */","meta":{"range":[530,651],"filename":"textured.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002841","name":"TexturedDrawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Draw the textured object","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"ParticleDrawable#draw","kind":"function","memberof":"ParticleDrawable","scope":"instance","params":[],"inherits":"TexturedDrawable#draw","inherited":true,"$longname":"ParticleDrawable#draw"}],"$constructor":{"comment":"","meta":{"range":[318,445],"filename":"particle.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002061","name":"ParticleDrawable","type":"MethodDefinition","paramnames":["programName"]},"vars":{"":null}},"undocumented":true,"name":"ParticleDrawable","longname":"ParticleDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticleDrawable"}},{"comment":"/**\n * A drawable representing a system of particles emanating from a portal\n *\n * @class\n * @extends {ParticleDrawable}\n * @param  {vec4}   color    The particle color\n * @param  {Number} height   The height to propagate\n * @param  {Number} count    The number of particles\n * @param  {Number} spread   The spread between particles\n * @param  {Number} distance The distance\n */","meta":{"range":[634,2481],"filename":"particle-portal.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001817","name":"ParticlePortalDrawable","type":"ClassDeclaration","paramnames":["color","height","count","spread","distance"]}},"classdesc":"A drawable representing a system of particles emanating from a portal","kind":"class","augments":["ParticleDrawable"],"params":[{"type":{"names":["vec4"]},"description":"The particle color","name":"color"},{"type":{"names":["Number"]},"description":"The height to propagate","name":"height"},{"type":{"names":["Number"]},"description":"The number of particles","name":"count"},{"type":{"names":["Number"]},"description":"The spread between particles","name":"spread"},{"type":{"names":["Number"]},"description":"The distance","name":"distance"}],"name":"ParticlePortalDrawable","longname":"ParticlePortalDrawable","scope":"global","$longname":"ParticlePortalDrawable","$members":[{"comment":"/**\n   * Initialize the portal particle mesh\n   * @param  {AssetManager} manager AssetManager containing the remaining assets\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[2375,2479],"filename":"particle-portal.js","lineno":69,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002013","name":"ParticlePortalDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initialize the portal particle mesh","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the remaining assets","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"ParticlePortalDrawable#init","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#init"},{"comment":"/**\n   * Update the time for the system\n   * @param  {Number} delta Time since last tick\n   * @return {Boolean}      Results of onUpdate\n   */","meta":{"range":[2022,2185],"filename":"particle-portal.js","lineno":58,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001976","name":"ParticlePortalDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Update the time for the system","params":[{"type":{"names":["Number"]},"description":"Time since last tick","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Results of onUpdate"}],"name":"updateTime","longname":"ParticlePortalDrawable#updateTime","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#updateTime"},{"comment":"/**\n   * Update the view, and uniforms pertaining to the view\n   * @param  {mat4} viewProject   Camera's combine view and projection matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[1643,1873],"filename":"particle-portal.js","lineno":44,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001931","name":"ParticlePortalDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Update the view, and uniforms pertaining to the view","params":[{"type":{"names":["mat4"]},"description":"Camera's combine view and projection matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"ParticlePortalDrawable#updateView","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[693,1426],"filename":"particle-portal.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001821","name":"ParticlePortalDrawable","type":"MethodDefinition","paramnames":["color","height","count","spread","distance"]},"vars":{"":null}},"undocumented":true,"name":"ParticlePortalDrawable","longname":"ParticlePortalDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticlePortalDrawable"}},{"comment":"/**\n * A LinkDrawable that represents a link from one portal to another\n * @extends {LinkDrawable}\n * @param  {vec2} start          X, Z of origin portal\n * @param  {vec2} end            X, Z of destination portal\n * @param  {vec4} color          Color of link\n * @param  {Number} startPercent Percent health of the origin portal\n * @param  {Number} endPercent   Percent health of the destination portal\n */","meta":{"range":[532,1222],"filename":"portal-link.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002130","name":"PortalLinkDrawable","type":"ClassDeclaration","paramnames":["start","end","color","startPercent","endPercent"]}},"classdesc":"A LinkDrawable that represents a link from one portal to another","augments":["LinkDrawable"],"params":[{"type":{"names":["vec2"]},"description":"X, Z of origin portal","name":"start"},{"type":{"names":["vec2"]},"description":"X, Z of destination portal","name":"end"},{"type":{"names":["vec4"]},"description":"Color of link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the origin portal","name":"startPercent"},{"type":{"names":["Number"]},"description":"Percent health of the destination portal","name":"endPercent"}],"name":"PortalLinkDrawable","longname":"PortalLinkDrawable","kind":"class","scope":"global","$longname":"PortalLinkDrawable","$members":[{"comment":"/**\n   * Construct the PortalLinkMesh for this link\n   * @param  {AssetManager} manager AssetManager to look up the program and texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1050,1220],"filename":"portal-link.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002186","name":"PortalLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Construct the PortalLinkMesh for this link","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager to look up the program and texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"PortalLinkDrawable#init","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","$longname":"PortalLinkDrawable#init"},{"comment":"/**\n   * Updates default periodic uniforms for links\n   * @param  {Number} delta Time delta since last draw\n   * @return {Boolean}      @see src/drawable.js#updateTime\n   */","meta":{"range":[1288,1439],"filename":"link.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001670","name":"LinkDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates default periodic uniforms for links","params":[{"type":{"names":["Number"]},"description":"Time delta since last draw","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"PortalLinkDrawable#updateTime","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","inherits":"LinkDrawable#updateTime","inherited":true,"$longname":"PortalLinkDrawable#updateTime"},{"comment":"/**\n   * Updates the camera transforms for the link drawables\n   * @param  {mat4}   viewProject Combined view and project matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[745,1108],"filename":"link.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001593","name":"LinkDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Updates the camera transforms for the link drawables","params":[{"type":{"names":["mat4"]},"description":"Combined view and project matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"PortalLinkDrawable#updateView","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","inherits":"LinkDrawable#updateView","inherited":true,"$longname":"PortalLinkDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[583,850],"filename":"portal-link.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002134","name":"PortalLinkDrawable","type":"MethodDefinition","paramnames":["start","end","color","startPercent","endPercent"]},"vars":{"":null}},"undocumented":true,"name":"PortalLinkDrawable","longname":"PortalLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"PortalLinkDrawable"}},{"comment":"/**\n * A ResonatorLinkDrawable is a LinkDrawable that represents a link\n * between a portal and a resonator\n * @param  {vec2} portalPosition     X,Z of the portal (usually 0,0)\n * @param  {Number} slot             Slot (0-7)\n * @param  {Number} distance         Usually 0-40\n * @param  {vec4} color              Color of the resonator link (TODO: make this disco)\n * @param  {Number} resonatorPercent Percent health of the resonator\n */","meta":{"range":[568,1411],"filename":"resonator-link.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002237","name":"ResonatorLinkDrawable","type":"ClassDeclaration","paramnames":["portalPosition","slot","distance","color","resonatorPercent"]}},"classdesc":"A ResonatorLinkDrawable is a LinkDrawable that represents a link\nbetween a portal and a resonator","params":[{"type":{"names":["vec2"]},"description":"X,Z of the portal (usually 0,0)","name":"portalPosition"},{"type":{"names":["Number"]},"description":"Slot (0-7)","name":"slot"},{"type":{"names":["Number"]},"description":"Usually 0-40","name":"distance"},{"type":{"names":["vec4"]},"description":"Color of the resonator link (TODO: make this disco)","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the resonator","name":"resonatorPercent"}],"name":"ResonatorLinkDrawable","longname":"ResonatorLinkDrawable","kind":"class","scope":"global","$longname":"ResonatorLinkDrawable","$members":[{"comment":"/**\n   * Creates a ResonatorLinkMesh with the given params, and initializes the\n   * texture/program\n   * @param  {AssetManager} manager AssetManager containing the required program/texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1182,1409],"filename":"resonator-link.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002293","name":"ResonatorLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Creates a ResonatorLinkMesh with the given params, and initializes the\ntexture/program","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the required program/texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"ResonatorLinkDrawable#init","kind":"function","memberof":"ResonatorLinkDrawable","scope":"instance","$longname":"ResonatorLinkDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[622,928],"filename":"resonator-link.js","lineno":17,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002241","name":"ResonatorLinkDrawable","type":"MethodDefinition","paramnames":["portalPosition","slot","distance","color","resonatorPercent"]},"vars":{"":null}},"undocumented":true,"name":"ResonatorLinkDrawable","longname":"ResonatorLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"ResonatorLinkDrawable"}},{"comment":"","meta":{"range":[892,941],"filename":"world.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003022","name":"shieldeffectbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"shieldeffectbase","longname":"shieldeffectbase","kind":"class","scope":"global","params":[],"$longname":"shieldeffectbase"},{"comment":"/**\n * Represents the shield idle effect\n *\n * Note: This probably should actually be generalized differently...\n * Apparently all three shield effects use the same texture and mesh, but have\n * different programs and variables.\n *\n * So, perhaps a better way would be to have the base class hardcode the texture\n * and mesh internal names, and then the derived classes pick a program and handle\n * the variables.\n *\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n */","meta":{"range":[1077,2251],"filename":"shield-effect.js","lineno":29,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002449","name":"ShieldEffectDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"Represents the shield idle effect\n\nNote: This probably should actually be generalized differently...\nApparently all three shield effects use the same texture and mesh, but have\ndifferent programs and variables.\n\nSo, perhaps a better way would be to have the base class hardcode the texture\nand mesh internal names, and then the derived classes pick a program and handle\nthe variables.","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"}],"name":"ShieldEffectDrawable","longname":"ShieldEffectDrawable","kind":"class","scope":"global","$longname":"ShieldEffectDrawable","$members":[{"comment":"/**\n   * Updates the default uniforms\n   *\n   * Note: these are nothing like what's in the apk, just some functions that\n   * happen to look kinda sorta nice\n   * @param  {Number} delta Time since last frame\n   * @return {Boolean}      Returns true to continue the animation.\n   */","meta":{"range":[1712,2249],"filename":"shield-effect.js","lineno":46,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002501","name":"ShieldEffectDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates the default uniforms\n\nNote: these are nothing like what's in the apk, just some functions that\nhappen to look kinda sorta nice","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue the animation."}],"name":"updateTime","longname":"ShieldEffectDrawable#updateTime","kind":"function","memberof":"ShieldEffectDrawable","scope":"instance","$longname":"ShieldEffectDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[1134,1424],"filename":"shield-effect.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002453","name":"ShieldEffectDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"ShieldEffectDrawable","longname":"ShieldEffectDrawable","kind":"class","scope":"global","params":[],"$longname":"ShieldEffectDrawable"}},{"comment":"/**\n * Represents a portal link that follows the surface of a sphere.\n *\n * Hooray for custom shaders, etc!\n *\n * @param  {Number} sphereRadius Radius of the sphere\n * @param  {vec2} start          Lat,lng of the origin portal\n * @param  {vec2} end            Lat,lng of the destination portal\n * @param  {vec4} color          Color of the link\n * @param  {Number} startPercent Percent health of the origin portal\n * @param  {Number} endPercent   Percent health of the destination portal\n */","meta":{"range":[636,1650],"filename":"spherical-portal-link.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002582","name":"SphericalPortalLinkDrawable","type":"ClassDeclaration","paramnames":["sphereRadius","start","end","color","startPercent","endPercent"]}},"classdesc":"Represents a portal link that follows the surface of a sphere.\n\nHooray for custom shaders, etc!","params":[{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"sphereRadius"},{"type":{"names":["vec2"]},"description":"Lat,lng of the origin portal","name":"start"},{"type":{"names":["vec2"]},"description":"Lat,lng of the destination portal","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the origin portal","name":"startPercent"},{"type":{"names":["Number"]},"description":"Percent health of the destination portal","name":"endPercent"}],"name":"SphericalPortalLinkDrawable","longname":"SphericalPortalLinkDrawable","kind":"class","scope":"global","$longname":"SphericalPortalLinkDrawable","$members":[{"comment":"/**\n   * Constructs a mesh for the link, then initializes the remaining assets.\n   * @param  {AssetManager} manager AssetManager containing the program/texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1283,1523],"filename":"spherical-portal-link.js","lineno":36,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002655","name":"SphericalPortalLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Constructs a mesh for the link, then initializes the remaining assets.","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the program/texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"SphericalPortalLinkDrawable#init","kind":"function","memberof":"SphericalPortalLinkDrawable","scope":"instance","$longname":"SphericalPortalLinkDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[696,1059],"filename":"spherical-portal-link.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002586","name":"SphericalPortalLinkDrawable","type":"MethodDefinition","paramnames":["sphereRadius","start","end","color","startPercent","endPercent"]},"vars":{"":null}},"undocumented":true,"name":"SphericalPortalLinkDrawable","longname":"SphericalPortalLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"SphericalPortalLinkDrawable"}},{"comment":"/**\n * A TexturedDrawable is a Drawable with a specific texture\n *\n * @param  {String} programName Program internal name\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n */","meta":{"range":[267,1039],"filename":"textured.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002813","name":"TexturedDrawable","type":"ClassDeclaration","paramnames":["programName","meshName","textureName"]}},"classdesc":"A TexturedDrawable is a Drawable with a specific texture","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"}],"name":"TexturedDrawable","longname":"TexturedDrawable","kind":"class","scope":"global","$longname":"TexturedDrawable","$members":[{"comment":"/**\n   * Draw the textured object\n   *\n   * @return {void}\n   */","meta":{"range":[530,651],"filename":"textured.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002841","name":"TexturedDrawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Draw the textured object","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"TexturedDrawable#draw","kind":"function","memberof":"TexturedDrawable","scope":"instance","params":[],"$longname":"TexturedDrawable#draw"}],"$constructor":{"comment":"","meta":{"range":[311,459],"filename":"textured.js","lineno":11,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002817","name":"TexturedDrawable","type":"MethodDefinition","paramnames":["programName","meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"TexturedDrawable","longname":"TexturedDrawable","kind":"class","scope":"global","params":[],"$longname":"TexturedDrawable"}},{"comment":"/**\n * A sphere with a texture mapped to it\n *\n * @param  {String} textureName Internal name of the texture to use\n * @param  {Number} radius      Radius of the sphere\n * @param  {Number} vSlices     Number of vertical slices\n * @param  {Number} hSlices     Number of horizontal slices\n */","meta":{"range":[458,1071],"filename":"textured-sphere.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002740","name":"TexturedSphereDrawable","type":"ClassDeclaration","paramnames":["textureName","radius","vSlices","hSlices"]}},"classdesc":"A sphere with a texture mapped to it","params":[{"type":{"names":["String"]},"description":"Internal name of the texture to use","name":"textureName"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices","name":"hSlices"}],"name":"TexturedSphereDrawable","longname":"TexturedSphereDrawable","kind":"class","scope":"global","$longname":"TexturedSphereDrawable","$members":[{"comment":"/**\n   * Create a sphere mesh and initialize the other resources\n   * @param  {AssetManager} manager AssetManager containing the texture/program\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[902,1069],"filename":"textured-sphere.js","lineno":28,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002776","name":"TexturedSphereDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Create a sphere mesh and initialize the other resources","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the texture/program","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"TexturedSphereDrawable#init","kind":"function","memberof":"TexturedSphereDrawable","scope":"instance","$longname":"TexturedSphereDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[516,693],"filename":"textured-sphere.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002744","name":"TexturedSphereDrawable","type":"MethodDefinition","paramnames":["textureName","radius","vSlices","hSlices"]},"vars":{"":null}},"undocumented":true,"name":"TexturedSphereDrawable","longname":"TexturedSphereDrawable","kind":"class","scope":"global","params":[],"$longname":"TexturedSphereDrawable"}},{"comment":"/**\n * Various world drawables\n *\n * Includes Portal, ShieldEffect, waypoints, resonators, and artifact glows\n * @type {Object}\n */","meta":{"range":[358,368],"filename":"world.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100002956","name":"World","type":"ObjectExpression","value":"{}"}},"description":"Various world drawables\n\nIncludes Portal, ShieldEffect, waypoints, resonators, and artifact glows","type":{"names":["Object"]},"name":"World","longname":"World","kind":"member","scope":"global","$longname":"World"},{"comment":"","meta":{"range":[1037,1098],"filename":"inventory.js","lineno":43,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100001442","name":"xmbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"xmbase","longname":"xmbase","kind":"class","scope":"global","params":[],"$longname":"xmbase"},{"comment":"/**\n * An XmDrawable is a drawable representing the animate \"xm core\" of inventory items\n *\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n * @param  {vec4} teamColor     Color of the xm glow.\n * @return {void}\n */","meta":{"range":[563,1189],"filename":"xm.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003256","name":"XmDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName","teamColor"]}},"classdesc":"An XmDrawable is a drawable representing the animate \"xm core\" of inventory items","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"},{"type":{"names":["vec4"]},"description":"Color of the xm glow.","name":"teamColor"}],"returns":[{"type":{"names":["void"]}}],"name":"XmDrawable","longname":"XmDrawable","kind":"class","scope":"global","$longname":"XmDrawable","$members":[{"comment":"/**\n   * Animates the xm core\n   * @param  {Number} delta Time since last frame\n   * @return {Boolean}      Returns true to continue the animation.\n   */","meta":{"range":[1036,1187],"filename":"xm.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003307","name":"XmDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Animates the xm core","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue the animation."}],"name":"updateTime","longname":"XmDrawable#updateTime","kind":"function","memberof":"XmDrawable","scope":"instance","$longname":"XmDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[610,876],"filename":"xm.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100003260","name":"XmDrawable","type":"MethodDefinition","paramnames":["meshName","textureName","teamColor"]},"vars":{"":null}},"undocumented":true,"name":"XmDrawable","longname":"XmDrawable","kind":"class","scope":"global","params":[],"$longname":"XmDrawable"}}],"symbols":["AtmosphereDrawable","AtmosphereDrawable#init","AtmosphereDrawable#updateView","bicoloredbase","BicoloredDrawable","Drawable","Drawable#addAnimation","Drawable#addChild","Drawable#dispose","Drawable#draw","Drawable#drawFaces","Drawable#drawLines","Drawable#init","Drawable#rotate","Drawable#scalarScale","Drawable#scale","Drawable#setDrawFn","Drawable#setDrawMode","Drawable#setRotation","Drawable#setScalarScale","Drawable#setScale","Drawable#setTranslation","Drawable#setUniform","Drawable#translate","Drawable#translateX","Drawable#translateY","Drawable#translateZ","Drawable#updateMatrix","Drawable#updateRay","Drawable#updateTime","Drawable#updateView","Drawable#updateWorld","glowrampbase","GlowrampDrawable","GlowrampDrawable#updateTime","Inventory","itembase","itembase","LinkDrawable","LinkDrawable#updateTime","LinkDrawable#updateView","media","ornamentbase","OrnamentDrawable","ParticleDrawable","ParticleDrawable#draw","ParticlePortalDrawable","ParticlePortalDrawable#init","ParticlePortalDrawable#updateTime","ParticlePortalDrawable#updateView","PortalLinkDrawable","PortalLinkDrawable#init","PortalLinkDrawable#updateTime","PortalLinkDrawable#updateView","ResonatorLinkDrawable","ResonatorLinkDrawable#init","shieldeffectbase","ShieldEffectDrawable","ShieldEffectDrawable#updateTime","SphericalPortalLinkDrawable","SphericalPortalLinkDrawable#init","TexturedDrawable","TexturedDrawable#draw","TexturedSphereDrawable","TexturedSphereDrawable#init","World","xmbase","XmDrawable","XmDrawable#updateTime"]},"constants":{"documentation":[{"comment":"/**\n * A bunch of useful constants.\n * @type {Object}\n */","meta":{"range":[97,8988],"filename":"constants.js","lineno":7,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000006","name":"Constants","type":"ObjectExpression","value":"{\"teamColors\":\"\",\"qualityColors\":\"\",\"anomalyColors\":\"\",\"artifactGlowColors\":\"\",\"xmColors\":\"\",\"Mesh\":\"\",\"Program\":\"\",\"Texture\":\"\"}"}},"description":"A bunch of useful constants.","type":{"names":["Object"]},"name":"Constants","longname":"Constants","kind":"member","scope":"global","$longname":"Constants","$members":[{"comment":"/**\n   * Color constants for anomaly markers.\n   * @type {Object}\n   */","meta":{"range":[2011,2566],"filename":"constants.js","lineno":43,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000184","name":"anomalyColors","type":"ObjectExpression","value":"{\"undefined\":\"\"}"}},"description":"Color constants for anomaly markers.","type":{"names":["Object"]},"name":"anomalyColors","longname":"Constants.anomalyColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.anomalyColors"},{"comment":"/**\n   * Glow colors for the various artifact<color>Glow decorations for shard portals and\n   * target portals, by series.\n   * @type {Object}\n   */","meta":{"range":[2721,4156],"filename":"constants.js","lineno":57,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000249","name":"artifactGlowColors","type":"ObjectExpression","value":"{\"Helios\":\"\",\"Amar\":\"\",\"Jarvis\":\"\",\"Shonin\":\"\",\"Lightman\":\"\",\"Abaddon1\":\"\",\"Abaddon2\":\"\",\"Shard2017\":\"\"}"}},"description":"Glow colors for the various artifact<color>Glow decorations for shard portals and\ntarget portals, by series.","type":{"names":["Object"]},"name":"artifactGlowColors","longname":"Constants.artifactGlowColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.artifactGlowColors"},{"comment":"/**\n   * Mesh internal name constants.\n   * @type {Object}\n   */","meta":{"range":[4605,7924],"filename":"constants.js","lineno":113,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000521","name":"Mesh","type":"ObjectExpression","value":"{\"Inventory\":\"\",\"Resource\":\"\",\"Player\":\"\",\"Ornament\":\"\",\"World\":\"\"}"}},"description":"Mesh internal name constants.","type":{"names":["Object"]},"name":"Mesh","longname":"Constants.Mesh","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Mesh"},{"comment":"/**\n   * Program internal name constants.\n   * @type {Object}\n   */","meta":{"range":[7998,8308],"filename":"constants.js","lineno":208,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000691","name":"Program","type":"ObjectExpression","value":"{\"Bicolored\":\"bicolor_textured\",\"Textured\":\"textured\",\"RegionTextured\":\"region_textured\",\"Glowramp\":\"portal_scanner\",\"Xm\":\"xm\",\"ShieldEffect\":\"shield\",\"Atmosphere\":\"atmosphere\",\"Link\":\"LinkShader\",\"SphericalLink\":\"link3d\",\"ParticlePortal\":\"particle_portals\"}"}},"description":"Program internal name constants.","type":{"names":["Object"]},"name":"Program","longname":"Constants.Program","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Program"},{"comment":"/**\n   * Quality and level colors, by internal name.\n   * @type {Object}\n   */","meta":{"range":[628,1933],"filename":"constants.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000047","name":"qualityColors","type":"ObjectExpression","value":"{\"EXTREMELY_RARE\":\"\",\"VERY_RARE\":\"\",\"MORE_RARE\":\"\",\"RARE\":\"\",\"LESS_COMMON\":\"\",\"COMMON\":\"\",\"VERY_COMMON\":\"\",\"L1\":\"\",\"L2\":\"\",\"L3\":\"\",\"L4\":\"\",\"L5\":\"\",\"L6\":\"\",\"L7\":\"\",\"L8\":\"\"}"}},"description":"Quality and level colors, by internal name.","type":{"names":["Object"]},"name":"qualityColors","longname":"Constants.qualityColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.qualityColors"},{"comment":"/**\n   * Short list of team colors by internal name.\n   * @type {Object}\n   */","meta":{"range":[194,543],"filename":"constants.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000009","name":"teamColors","type":"ObjectExpression","value":"{\"RESISTANCE\":\"\",\"ENLIGHTENED\":\"\",\"NEUTRAL\":\"\",\"LOKI\":\"\"}"}},"description":"Short list of team colors by internal name.","type":{"names":["Object"]},"name":"teamColors","longname":"Constants.teamColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.teamColors"},{"comment":"/**\n   * Texture internal name constants.\n   * @type {Object}\n   */","meta":{"range":[8382,8986],"filename":"constants.js","lineno":224,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000713","name":"Texture","type":"ObjectExpression","value":"{\"FlipCard\":\"FlipCardTexture\",\"Xm\":\"ObjectXMTexture\",\"Glowramp\":\"GlowrampTexture\",\"Media\":\"MediaCubeTexture\",\"Waypoint\":\"FtWaypointTexture\",\"ShieldEffect\":\"PortalShieldTexture\",\"ColorGlow\":\"ColorGlowTexture\",\"TargetGlow\":\"TargetGlowTexture\",\"PortalLink\":\"PortalLinkTexture\",\"ResonatorLink\":\"ResonatorLinkTexture\",\"OrnamentMeetupPoint\":\"OrnamentMeetupPointTexture\",\"OrnamentFinishPoint\":\"OrnamentFinishPointTexture\",\"OrnamentCluster\":\"OrnamentClusterTexture\",\"OrnamentVolatile\":\"OrnamentVolatileTexture\",\"Particle\":\"ParticleTexture\"}"}},"description":"Texture internal name constants.","type":{"names":["Object"]},"name":"Texture","longname":"Constants.Texture","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Texture"},{"comment":"/**\n   * Constants for xm glow colors (for item xm cores)\n   * @type {Object}\n   */","meta":{"range":[4246,4534],"filename":"constants.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100000483","name":"xmColors","type":"ObjectExpression","value":"{\"coreGlow\":\"\",\"coreGlowAlt\":\"\",\"coreGlowAda\":\"\",\"coreGlowJarvis\":\"\"}"}},"description":"Constants for xm glow colors (for item xm cores)","type":{"names":["Object"]},"name":"xmColors","longname":"Constants.xmColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.xmColors"}]}],"symbols":["Constants","Constants.anomalyColors","Constants.artifactGlowColors","Constants.Mesh","Constants.Program","Constants.qualityColors","Constants.teamColors","Constants.Texture","Constants.xmColors"]},"internals":{"documentation":[{"comment":"/**\n * Simple class for hooking up animations to drawables.\n *\n * Animations refers specifically to things like moving objects/cameras around.\n * Animations handled by the existing shaders should be implemented that way, instead.\n */","meta":{"range":[264,2841],"filename":"animation.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000005","name":"Animation","type":"ClassDeclaration","paramnames":["duration","transform","timing","loop"]}},"classdesc":"Simple class for hooking up animations to drawables.\n\nAnimations refers specifically to things like moving objects/cameras around.\nAnimations handled by the existing shaders should be implemented that way, instead.","name":"Animation","longname":"Animation","kind":"class","scope":"global","description":"Create an animation for a drawable","params":[{"type":{"names":["Number"]},"description":"Duration of one cycle of the animation","name":"duration"},{"type":{"names":["function"]},"description":"Animation callback\n                             Parameter: Number t\n                             Parameter: Drawable drawable","name":"transform"},{"type":{"names":["function"]},"description":"Timing function (i.e. easing)  Defaults. to Ease.linear","name":"timing"},{"type":{"names":["Boolean"]},"description":"Whether or not to loop the animation","name":"loop"}],"$longname":"Animation","$members":[{"comment":"/**\n   * Allows for chaining of animations\n   *\n   * @chainable\n   * @param  {Animation} animation  The animation to queue after this one\n   *                                completes. Note that this isn't really\n   *                                valid for looping animations\n   * @return {this} Returns `this`\n   */","meta":{"range":[2640,2839],"filename":"animation.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000195","name":"Animation#chain","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Allows for chaining of animations","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to queue after this one\n                               completes. Note that this isn't really\n                               valid for looping animations","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"chain","longname":"Animation#chain","kind":"function","memberof":"Animation","scope":"instance","$longname":"Animation#chain"},{"comment":"/**\n   * Pauses the running animation\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1553,1640],"filename":"animation.js","lineno":64,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000097","name":"Animation#pause","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Pauses the running animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"pause","longname":"Animation#pause","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#pause"},{"comment":"/**\n   * Starts the animation\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1170,1257],"filename":"animation.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000064","name":"Animation#start","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Starts the animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"start","longname":"Animation#start","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#start"},{"comment":"/**\n   * Perform a step of the animation\n   * @param  {Number} delta      Time elasped since last frame\n   * @param  {Drawable} drawable The drawable to operate on\n   * @return {Boolean}           Return true to signal the end of the animation\n   */","meta":{"range":[1896,2315],"filename":"animation.js","lineno":77,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000114","name":"Animation#step","type":"MethodDefinition","paramnames":["delta","drawable"]},"vars":{"":null}},"description":"Perform a step of the animation","params":[{"type":{"names":["Number"]},"description":"Time elasped since last frame","name":"delta"},{"type":{"names":["Drawable"]},"description":"The drawable to operate on","name":"drawable"}],"returns":[{"type":{"names":["Boolean"]},"description":"Return true to signal the end of the animation"}],"name":"step","longname":"Animation#step","kind":"function","memberof":"Animation","scope":"instance","$longname":"Animation#step"},{"comment":"/**\n   * Stops the animation, and resets the elasped time to 0\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1388,1447],"filename":"animation.js","lineno":53,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000082","name":"Animation#stop","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Stops the animation, and resets the elasped time to 0","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"stop","longname":"Animation#stop","kind":"function","memberof":"Animation","scope":"instance","params":[],"$longname":"Animation#stop"}],"$constructor":{"comment":"/**\n   * Create an animation for a drawable\n   *\n   * @chainable\n   * @param  {Number}  duration   Duration of one cycle of the animation\n   * @param  {Function} transform Animation callback\n   *                              Parameter: Number t\n   *                              Parameter: Drawable drawable\n   * @param  {Function} timing    Timing function (i.e. easing)  Defaults. to Ease.linear\n   * @param  {Boolean}  loop      Whether or not to loop the animation\n   * @return {this}               The animation\n   */","meta":{"range":[810,1072],"filename":"animation.js","lineno":23,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000008","name":"Animation","type":"MethodDefinition","paramnames":["duration","transform","timing","loop"]},"vars":{"":null}},"description":"Create an animation for a drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Duration of one cycle of the animation","name":"duration"},{"type":{"names":["function"]},"description":"Animation callback\n                             Parameter: Number t\n                             Parameter: Drawable drawable","name":"transform"},{"type":{"names":["function"]},"description":"Timing function (i.e. easing)  Defaults. to Ease.linear","name":"timing"},{"type":{"names":["Boolean"]},"description":"Whether or not to loop the animation","name":"loop"}],"returns":[{"type":{"names":["this"]},"description":"The animation"}],"name":"Animation","longname":"Animation","kind":"class","scope":"global","undocumented":true,"$longname":"Animation"}},{"comment":"/**\n * This class handles running animations on animatable objects.\n *\n * This is generally composed into a class (e.g. Camera or Drawable)\n */","meta":{"range":[182,1289],"filename":"animator.js","lineno":8,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000227","name":"Animator","type":"ClassDeclaration","paramnames":[]}},"classdesc":"This class handles running animations on animatable objects.\n\nThis is generally composed into a class (e.g. Camera or Drawable)","name":"Animator","longname":"Animator","kind":"class","scope":"global","params":[],"$longname":"Animator","$members":[{"comment":"/**\n   * Adds an animation.\n   *\n   * Note that this does not start the animation.\n   *\n   * @chainable\n   * @param {Animation} animation The animation to be run.\n   *                              This will need to be started independently, or\n   *                              prior to being added.\n   * @return {this} Returns `this`\n   */","meta":{"range":[592,808],"filename":"animator.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000240","name":"Animator#addAnimation","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Adds an animation.\n\nNote that this does not start the animation.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to be run.\n                             This will need to be started independently, or\n                             prior to being added.","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"addAnimation","longname":"Animator#addAnimation","kind":"function","memberof":"Animator","scope":"instance","$longname":"Animator#addAnimation"}],"$constructor":{"comment":"","meta":{"range":[200,245],"filename":"animator.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000230","name":"Animator","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"Animator","longname":"Animator","kind":"class","scope":"global","params":[],"$longname":"Animator"}},{"comment":"","meta":{"range":[1995,2080],"filename":"utils.js","lineno":69,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022942","name":"artifact","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"artifact","longname":"artifact","kind":"class","scope":"global","params":[],"$longname":"artifact"},{"comment":"/**\n * An AssetLoader manages loading one or more assets.  It handles debouncing of\n * of multiple requests for the same asset, etc.\n *\n * @class\n */","meta":{"range":[216,4573],"filename":"asset-loader.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001332","name":"AssetLoader","type":"ClassDeclaration","paramnames":[]}},"classdesc":"An AssetLoader manages loading one or more assets.  It handles debouncing of\nof multiple requests for the same asset, etc.","kind":"class","name":"AssetLoader","longname":"AssetLoader","scope":"global","description":"Noop.","params":[],"$longname":"AssetLoader","$members":[{"comment":"/**\n   * Loads a resource via xhr or Image\n   *\n   * @static\n   * @param  {String}   url      href of the resource to fetch\n   * @param  {String}   type     One of XHMLHttpRequest's supported responseType\n   *                             values (arraybuffer, blob, document, json, text)\n   *                             or 'image' or 'image.co' (for a cross-origin image)\n   * @return {Promise}           Returns a promise that resolves on success, or rejects\n   *                             on failure.\n   */","meta":{"range":[2905,4571],"filename":"asset-loader.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001565","name":"AssetLoader.loadResource","type":"MethodDefinition","paramnames":["url","type"]},"vars":{"":null}},"description":"Loads a resource via xhr or Image","scope":"static","params":[{"type":{"names":["String"]},"description":"href of the resource to fetch","name":"url"},{"type":{"names":["String"]},"description":"One of XHMLHttpRequest's supported responseType\n                            values (arraybuffer, blob, document, json, text)\n                            or 'image' or 'image.co' (for a cross-origin image)","name":"type"}],"returns":[{"type":{"names":["Promise"]},"description":"Returns a promise that resolves on success, or rejects\n                            on failure."}],"name":"loadResource","longname":"AssetLoader.loadResource","kind":"function","memberof":"AssetLoader","$longname":"AssetLoader.loadResource"},{"comment":"/**\n   * Directly retrieve an asset from the cache\n   * @param  {String} name The cache key\n   * @return {mixed}       The cached asset, if it exists.\n   */","meta":{"range":[2337,2388],"filename":"asset-loader.js","lineno":88,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001554","name":"AssetLoader#getAsset","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Directly retrieve an asset from the cache","params":[{"type":{"names":["String"]},"description":"The cache key","name":"name"}],"returns":[{"type":{"names":["mixed"]},"description":"The cached asset, if it exists."}],"name":"getAsset","longname":"AssetLoader#getAsset","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#getAsset"},{"comment":"/**\n   * Loads a single asset.\n   *\n   * @param {String} url  The url of the asset to load.\n   * @param {String} type The type of asset being requested\n   *\n   * @returns { Promise }  Returns a promise.  Resolves immediately\n   *                       if the asset it already loaded.\n   * @see AssetLoader.loadResource\n   */","meta":{"range":[661,1541],"filename":"asset-loader.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001351","name":"AssetLoader#loadAsset","type":"MethodDefinition","paramnames":["url","type"]},"vars":{"":null}},"description":"Loads a single asset.","params":[{"type":{"names":["String"]},"description":"The url of the asset to load.","name":"url"},{"type":{"names":["String"]},"description":"The type of asset being requested","name":"type"}],"returns":[{"type":{"names":["Promise"]},"description":"Returns a promise.  Resolves immediately\n                      if the asset it already loaded."}],"see":["AssetLoader.loadResource"],"name":"loadAsset","longname":"AssetLoader#loadAsset","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#loadAsset"},{"comment":"/**\n   * Load a set of assets in parallel\n   * @param  {Array} urls   Array of urls of resources\n   * @param  {Array} types  Array of types of resources\n   * @return {Promise}      A Promise that resolves when all assets are loaded,\n   *                        or rejects when any fail.\n   * @see  AssetLoader.loadResource\n   */","meta":{"range":[1876,2174],"filename":"asset-loader.js","lineno":71,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001505","name":"AssetLoader#loadAssetGroup","type":"MethodDefinition","paramnames":["urls","types"]},"vars":{"":null}},"description":"Load a set of assets in parallel","params":[{"type":{"names":["Array"]},"description":"Array of urls of resources","name":"urls"},{"type":{"names":["Array"]},"description":"Array of types of resources","name":"types"}],"returns":[{"type":{"names":["Promise"]},"description":"A Promise that resolves when all assets are loaded,\n                       or rejects when any fail."}],"see":["AssetLoader.loadResource"],"name":"loadAssetGroup","longname":"AssetLoader#loadAssetGroup","kind":"function","memberof":"AssetLoader","scope":"instance","$longname":"AssetLoader#loadAssetGroup"}],"$constructor":{"comment":"/**\n   * Noop.\n   */","meta":{"range":[262,330],"filename":"asset-loader.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001335","name":"AssetLoader","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Noop.","name":"AssetLoader","longname":"AssetLoader","kind":"class","scope":"global","params":[],"undocumented":true,"$longname":"AssetLoader"}},{"comment":"/**\n * An AssetManager manages all the various types of assets that need to be bound to\n * to a gl context.  It uses an AssetLoader to handle the loading and caching of the\n * asset sources, and also maintains a parallel cache of the bound resources.\n */","meta":{"range":[1003,7912],"filename":"asset-manager.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001918","name":"AssetManager","type":"ClassDeclaration","paramnames":["gl","manifest"]}},"classdesc":"An AssetManager manages all the various types of assets that need to be bound to\nto a gl context.  It uses an AssetLoader to handle the loading and caching of the\nasset sources, and also maintains a parallel cache of the bound resources.","name":"AssetManager","longname":"AssetManager","kind":"class","scope":"global","description":"Constructs an asset loader.","params":[{"type":{"names":["context"]},"description":"A 3d context from a canvas","name":"gl"},{"type":{"names":["Object"]},"description":"A mapping of key:value pairs for the following types:\n                          texture, mesh, program, rawProgram","name":"manifest"}],"$longname":"AssetManager","$members":[{"comment":"/**\n   * Merges in another manifest to the existing asset manifest\n   *\n   * Additional manifests should be merged in before loading.\n   * @param {Object} manifest @see constructor\n   *\n   * @return {void}\n   */","meta":{"range":[1907,1993],"filename":"asset-manager.js","lineno":75,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001995","name":"AssetManager#addAssets","type":"MethodDefinition","paramnames":["manifest"]},"vars":{"":null}},"description":"Merges in another manifest to the existing asset manifest\n\nAdditional manifests should be merged in before loading.","params":[{"type":{"names":["Object"]},"description":"@see constructor","name":"manifest"}],"returns":[{"type":{"names":["void"]}}],"name":"addAssets","longname":"AssetManager#addAssets","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addAssets"},{"comment":"/**\n   * Adds a bound mesh to the mesh cache, under a given internal name\n   * @param {String} name Mesh internal name\n   * @param {Mesh} mesh   A bound mesh\n   *\n   * @return {void}\n   */","meta":{"range":[2469,2524],"filename":"asset-manager.js","lineno":97,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002025","name":"AssetManager#addMesh","type":"MethodDefinition","paramnames":["name","mesh"]},"vars":{"":null}},"description":"Adds a bound mesh to the mesh cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"name"},{"type":{"names":["Mesh"]},"description":"A bound mesh","name":"mesh"}],"returns":[{"type":{"names":["void"]}}],"name":"addMesh","longname":"AssetManager#addMesh","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addMesh"},{"comment":"/**\n   * Adds a bound program to the program cache, under a given internal name\n   * @param {String} name     Program internal name\n   * @param {Program} program A bound Program\n   *\n   * @return {void}\n   */","meta":{"range":[2739,2805],"filename":"asset-manager.js","lineno":108,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002039","name":"AssetManager#addProgram","type":"MethodDefinition","paramnames":["name","program"]},"vars":{"":null}},"description":"Adds a bound program to the program cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"name"},{"type":{"names":["Program"]},"description":"A bound Program","name":"program"}],"returns":[{"type":{"names":["void"]}}],"name":"addProgram","longname":"AssetManager#addProgram","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addProgram"},{"comment":"/**\n   * Adds a bound texture to the texture cache, under a given internal name\n   * @param {String} name     Texture internal name\n   * @param {Texture} texture A bound Texture\n   *\n   * @return {void}\n   */","meta":{"range":[2208,2274],"filename":"asset-manager.js","lineno":86,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002011","name":"AssetManager#addTexture","type":"MethodDefinition","paramnames":["name","texture"]},"vars":{"":null}},"description":"Adds a bound texture to the texture cache, under a given internal name","params":[{"type":{"names":["String"]},"description":"Texture internal name","name":"name"},{"type":{"names":["Texture"]},"description":"A bound Texture","name":"texture"}],"returns":[{"type":{"names":["void"]}}],"name":"addTexture","longname":"AssetManager#addTexture","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#addTexture"},{"comment":"/**\n   * Generates a compact manifest containing only the resources that have been\n   * actually be fetched from the cache, after loading.  Useful to reduce loading\n   * time for scenes that only use a few resources.\n   * @return {Object} A manifest containing only the resources that were actually used\n   *                  after loading.\n   */","meta":{"range":[7318,7727],"filename":"asset-manager.js","lineno":234,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002650","name":"AssetManager#generateManifest","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Generates a compact manifest containing only the resources that have been\nactually be fetched from the cache, after loading.  Useful to reduce loading\ntime for scenes that only use a few resources.","returns":[{"type":{"names":["Object"]},"description":"A manifest containing only the resources that were actually used\n                 after loading."}],"name":"generateManifest","longname":"AssetManager#generateManifest","kind":"function","memberof":"AssetManager","scope":"instance","params":[],"$longname":"AssetManager#generateManifest"},{"comment":"/**\n   * Loads all remote resources found in the manifest, and creates any static programs\n   * included in the manifest's rawPrograms section, if it exists.\n   * @return {Promise}          Promise that resolves when all assets are loaded\n   */","meta":{"range":[6277,6965],"filename":"asset-manager.js","lineno":204,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002531","name":"AssetManager#loadAll","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Loads all remote resources found in the manifest, and creates any static programs\nincluded in the manifest's rawPrograms section, if it exists.","returns":[{"type":{"names":["Promise"]},"description":"Promise that resolves when all assets are loaded"}],"name":"loadAll","longname":"AssetManager#loadAll","kind":"function","memberof":"AssetManager","scope":"instance","params":[],"$longname":"AssetManager#loadAll"},{"comment":"/**\n   * Returns a promise that resolves to a bound mesh.\n   * @param  {String} name Mesh internal name\n   * @return {Promise}     Resolves to the bound mesh.\n   */","meta":{"range":[3824,4458],"filename":"asset-manager.js","lineno":141,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002172","name":"AssetManager#loadMesh","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound mesh.","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound mesh."}],"name":"loadMesh","longname":"AssetManager#loadMesh","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadMesh"},{"comment":"/**\n   * Returns a promise that resolves to a bound program.\n   * @param  {String} name Program internal name (raw or loaded)\n   * @return {Promise}     Resolves to the bound program.\n   */","meta":{"range":[4654,6026],"filename":"asset-manager.js","lineno":165,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002290","name":"AssetManager#loadProgram","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound program.","params":[{"type":{"names":["String"]},"description":"Program internal name (raw or loaded)","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound program."}],"name":"loadProgram","longname":"AssetManager#loadProgram","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadProgram"},{"comment":"/**\n   * Returns a promise that resolves to a bound texture.\n   * @param  {String} name Texture internal name\n   * @return {Promise}     Resolves to the bound texture.\n   */","meta":{"range":[2985,3653],"filename":"asset-manager.js","lineno":117,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002053","name":"AssetManager#loadTexture","type":"MethodDefinition","paramnames":["name"]},"vars":{"":null}},"description":"Returns a promise that resolves to a bound texture.","params":[{"type":{"names":["String"]},"description":"Texture internal name","name":"name"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves to the bound texture."}],"name":"loadTexture","longname":"AssetManager#loadTexture","kind":"function","memberof":"AssetManager","scope":"instance","$longname":"AssetManager#loadTexture"}],"$constructor":{"comment":"/**\n   * Constructs an asset loader.\n   * @param  {context} gl      A 3d context from a canvas\n   * @param  {Object} manifest A mapping of key:value pairs for the following types:\n   *                           texture, mesh, program, rawProgram\n   */","meta":{"range":[1297,1689],"filename":"asset-manager.js","lineno":46,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100001922","name":"AssetManager","type":"MethodDefinition","paramnames":["gl","manifest"]},"vars":{"":null}},"description":"Constructs an asset loader.","params":[{"type":{"names":["context"]},"description":"A 3d context from a canvas","name":"gl"},{"type":{"names":["Object"]},"description":"A mapping of key:value pairs for the following types:\n                          texture, mesh, program, rawProgram","name":"manifest"}],"name":"AssetManager","longname":"AssetManager","kind":"class","scope":"global","undocumented":true,"$longname":"AssetManager"}},{"comment":"/**\n * Creates an \"atmosphere\" effect.\n *\n * This is a modified version of the atmosphere program from:\n * https://github.com/dataarts/webgl-globe/blob/master/globe/globe.js\n * @param  {Number} radius      Radius of the world.\n *                              This should match the radius of the world mesh the\n *                              atmosphere is being rendered over.\n * @param  {Number} vSlices     Number of vertical slices for the sphere mesh\n * @param  {Number} hSlices     Number of horizontal slices for the sphere mesh\n * @param  {Number} scaleFactor The percent to scale the mesh\n * @return {void}\n */","meta":{"range":[822,2104],"filename":"atmosphere.js","lineno":21,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100004832","name":"AtmosphereDrawable","type":"ClassDeclaration","paramnames":["radius","vSlices","hSlices","scaleFactor"]}},"classdesc":"Creates an \"atmosphere\" effect.\n\nThis is a modified version of the atmosphere program from:\nhttps://github.com/dataarts/webgl-globe/blob/master/globe/globe.js","params":[{"type":{"names":["Number"]},"description":"Radius of the world.\n                             This should match the radius of the world mesh the\n                             atmosphere is being rendered over.","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices for the sphere mesh","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices for the sphere mesh","name":"hSlices"},{"type":{"names":["Number"]},"description":"The percent to scale the mesh","name":"scaleFactor"}],"returns":[{"type":{"names":["void"]}}],"name":"AtmosphereDrawable","longname":"AtmosphereDrawable","kind":"class","scope":"global","$longname":"AtmosphereDrawable","$members":[{"comment":"/**\n   * Initializes the drawable\n   *\n   * @see    src/drawable.js\n   * @param  {AssetManager} manager The AssetManager containing the required assets.\n   * @return {Promise}  A Promise that resolves when the asset is initialized\n   */","meta":{"range":[1935,2102],"filename":"atmosphere.js","lineno":55,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100004946","name":"AtmosphereDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initializes the drawable","see":["src/drawable.js"],"params":[{"type":{"names":["AssetManager"]},"description":"The AssetManager containing the required assets.","name":"manager"}],"returns":[{"type":{"names":["Promise"]},"description":"A Promise that resolves when the asset is initialized"}],"name":"init","longname":"AtmosphereDrawable#init","kind":"function","memberof":"AtmosphereDrawable","scope":"instance","$longname":"AtmosphereDrawable#init"},{"comment":"/**\n   * Updates the view matrices of the model\n   *\n   * @chainable\n   * @see    src/drawable/model.js#updateView\n   * @param  {mat4} viewProject   combined projection matrix multiplied by view matrix.\n   * @return {this} Returns `this`\n   */","meta":{"range":[1418,1692],"filename":"atmosphere.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100004894","name":"AtmosphereDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject"]},"vars":{"":null}},"description":"Updates the view matrices of the model","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"see":["src/drawable/model.js#updateView"],"params":[{"type":{"names":["mat4"]},"description":"combined projection matrix multiplied by view matrix.","name":"viewProject"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateView","longname":"AtmosphereDrawable#updateView","kind":"function","memberof":"AtmosphereDrawable","scope":"instance","$longname":"AtmosphereDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[868,1168],"filename":"atmosphere.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100004836","name":"AtmosphereDrawable","type":"MethodDefinition","paramnames":["radius","vSlices","hSlices","scaleFactor"]},"vars":{"":null}},"undocumented":true,"name":"AtmosphereDrawable","longname":"AtmosphereDrawable","kind":"class","scope":"global","params":[],"$longname":"AtmosphereDrawable"}},{"comment":"","meta":{"range":[707,756],"filename":"world.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006849","name":"bicoloredbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"bicoloredbase","longname":"bicoloredbase","kind":"class","scope":"global","params":[],"$longname":"bicoloredbase"},{"comment":"/**\n * This is used for items and other renderables that have two visible colors\n *\n * The specifics of it are basically: if the texture has an opacity less than 0.5,\n * the texture color is blended with u_color0\n * Otherwise, it's the texture color blended with u_color1\n *\n * Or something like that.\n * @param  {String} meshName    Internal name of the mesh for this drawable\n * @param  {String} textureName Internal name of the texture for this drawble\n */","meta":{"range":[882,1133],"filename":"bicolored.js","lineno":34,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005023","name":"BicoloredDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"This is used for items and other renderables that have two visible colors\n\nThe specifics of it are basically: if the texture has an opacity less than 0.5,\nthe texture color is blended with u_color0\nOtherwise, it's the texture color blended with u_color1\n\nOr something like that.","params":[{"type":{"names":["String"]},"description":"Internal name of the mesh for this drawable","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture for this drawble","name":"textureName"}],"name":"BicoloredDrawable","longname":"BicoloredDrawable","kind":"class","scope":"global","$longname":"BicoloredDrawable","$constructor":{"comment":"","meta":{"range":[936,1131],"filename":"bicolored.js","lineno":36,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005027","name":"BicoloredDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"BicoloredDrawable","longname":"BicoloredDrawable","kind":"class","scope":"global","params":[],"$longname":"BicoloredDrawable"}},{"comment":"/**\n * A Camera is a class to manage view of the scene.\n *\n * @class\n * @chainable\n * @param {Number} width  The width of the viewport\n * @param {Number} height The height of the viewport\n * @return {this} The new Camera\n */","meta":{"range":[311,3515],"filename":"camera.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002784","name":"Camera","type":"ClassDeclaration","paramnames":["width","height"]}},"classdesc":"A Camera is a class to manage view of the scene.","kind":"class","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"The width of the viewport","name":"width"},{"type":{"names":["Number"]},"description":"The height of the viewport","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"The new Camera"}],"name":"Camera","longname":"Camera","scope":"global","$longname":"Camera","$members":[{"comment":"/**\n   * Adds an animation\n   *\n   * @chainable\n   * @param {Animation} animation The animation to be run.\n   *                              This will need to be started independently, or prior to being added.\n   * @return {this} Returns `this`\n   */","meta":{"range":[2713,2802],"filename":"camera.js","lineno":115,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003014","name":"Camera#addAnimation","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Adds an animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to be run.\n                             This will need to be started independently, or prior to being added.","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"addAnimation","longname":"Camera#addAnimation","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#addAnimation"},{"comment":"/**\n   * Generates a view matrix, as if the camera is looking at the specified point.\n   *\n   * @chainable\n   * @param  {vec3} point   The point to look at\n   * @return {this} Returns `this`\n   */","meta":{"range":[981,1065],"filename":"camera.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002899","name":"Camera#lookAt","type":"MethodDefinition","paramnames":["point"]},"vars":{"":null}},"description":"Generates a view matrix, as if the camera is looking at the specified point.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"The point to look at","name":"point"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"lookAt","longname":"Camera#lookAt","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#lookAt"},{"comment":"/**\n   * Set the viewport dimensions and update the projection matrix\n   *\n   * @chainable\n   * @param {Number} width  Viewport width\n   * @param {Number} height Viewport height\n   * @return {this} Returns `this`\n   */","meta":{"range":[1866,1987],"filename":"camera.js","lineno":77,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002959","name":"Camera#setDimensions","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Set the viewport dimensions and update the projection matrix","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Viewport width","name":"width"},{"type":{"names":["Number"]},"description":"Viewport height","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setDimensions","longname":"Camera#setDimensions","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setDimensions"},{"comment":"/**\n   * Sets the far clip distance\n   *\n   * @chainable\n   * @param {Number} far Max viewable distance\n   * @return {this} Returns `this`\n   */","meta":{"range":[2382,2456],"filename":"camera.js","lineno":102,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002998","name":"Camera#setFar","type":"MethodDefinition","paramnames":["far"]},"vars":{"":null}},"description":"Sets the far clip distance","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Max viewable distance","name":"far"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setFar","longname":"Camera#setFar","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setFar"},{"comment":"/**\n   * Set the horizontal field of view\n   *\n   * @chainable\n   * @param {Number} fov Field of view, in radians\n   * @return {this} Returns `this`\n   */","meta":{"range":[2148,2231],"filename":"camera.js","lineno":90,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002982","name":"Camera#setFieldOfView","type":"MethodDefinition","paramnames":["fov"]},"vars":{"":null}},"description":"Set the horizontal field of view","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Field of view, in radians","name":"fov"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setFieldOfView","longname":"Camera#setFieldOfView","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setFieldOfView"},{"comment":"/**\n   * Sets the camera's position\n   *\n   * @chainable\n   * @param {vec3} position Camera position\n   * @return {this} Returns `this`\n   */","meta":{"range":[1543,1641],"filename":"camera.js","lineno":64,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002940","name":"Camera#setPosition","type":"MethodDefinition","paramnames":["position"]},"vars":{"":null}},"description":"Sets the camera's position","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"Camera position","name":"position"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setPosition","longname":"Camera#setPosition","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#setPosition"},{"comment":"/**\n   * Moves the camera's position in some direction\n   *\n   * Maintains the camera's current focus.\n   *\n   * @chainable\n   * @param  {vec3} vec   The vector to translate by\n   * @return {this} Returns `this`\n   */","meta":{"range":[1289,1395],"filename":"camera.js","lineno":52,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002918","name":"Camera#translate","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Moves the camera's position in some direction\n\nMaintains the camera's current focus.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["vec3"]},"description":"The vector to translate by","name":"vec"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"translate","longname":"Camera#translate","kind":"function","memberof":"Camera","scope":"instance","$longname":"Camera#translate"}],"$constructor":{"comment":"","meta":{"range":[329,778],"filename":"camera.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100002787","name":"Camera","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"undocumented":true,"name":"Camera","longname":"Camera","kind":"class","scope":"global","params":[],"$longname":"Camera"}},{"comment":"/**\n * A bunch of useful constants.\n * @type {Object}\n */","meta":{"range":[97,8988],"filename":"constants.js","lineno":7,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003106","name":"Constants","type":"ObjectExpression","value":"{\"teamColors\":\"\",\"qualityColors\":\"\",\"anomalyColors\":\"\",\"artifactGlowColors\":\"\",\"xmColors\":\"\",\"Mesh\":\"\",\"Program\":\"\",\"Texture\":\"\"}"}},"description":"A bunch of useful constants.","type":{"names":["Object"]},"name":"Constants","longname":"Constants","kind":"member","scope":"global","$longname":"Constants","$members":[{"comment":"/**\n   * Color constants for anomaly markers.\n   * @type {Object}\n   */","meta":{"range":[2011,2566],"filename":"constants.js","lineno":43,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003284","name":"anomalyColors","type":"ObjectExpression","value":"{\"undefined\":\"\"}"}},"description":"Color constants for anomaly markers.","type":{"names":["Object"]},"name":"anomalyColors","longname":"Constants.anomalyColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.anomalyColors"},{"comment":"/**\n   * Glow colors for the various artifact<color>Glow decorations for shard portals and\n   * target portals, by series.\n   * @type {Object}\n   */","meta":{"range":[2721,4156],"filename":"constants.js","lineno":57,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003349","name":"artifactGlowColors","type":"ObjectExpression","value":"{\"Helios\":\"\",\"Amar\":\"\",\"Jarvis\":\"\",\"Shonin\":\"\",\"Lightman\":\"\",\"Abaddon1\":\"\",\"Abaddon2\":\"\",\"Shard2017\":\"\"}"}},"description":"Glow colors for the various artifact<color>Glow decorations for shard portals and\ntarget portals, by series.","type":{"names":["Object"]},"name":"artifactGlowColors","longname":"Constants.artifactGlowColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.artifactGlowColors"},{"comment":"/**\n   * Mesh internal name constants.\n   * @type {Object}\n   */","meta":{"range":[4605,7924],"filename":"constants.js","lineno":113,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003621","name":"Mesh","type":"ObjectExpression","value":"{\"Inventory\":\"\",\"Resource\":\"\",\"Player\":\"\",\"Ornament\":\"\",\"World\":\"\"}"}},"description":"Mesh internal name constants.","type":{"names":["Object"]},"name":"Mesh","longname":"Constants.Mesh","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Mesh"},{"comment":"/**\n   * Program internal name constants.\n   * @type {Object}\n   */","meta":{"range":[7998,8308],"filename":"constants.js","lineno":208,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003791","name":"Program","type":"ObjectExpression","value":"{\"Bicolored\":\"bicolor_textured\",\"Textured\":\"textured\",\"RegionTextured\":\"region_textured\",\"Glowramp\":\"portal_scanner\",\"Xm\":\"xm\",\"ShieldEffect\":\"shield\",\"Atmosphere\":\"atmosphere\",\"Link\":\"LinkShader\",\"SphericalLink\":\"link3d\",\"ParticlePortal\":\"particle_portals\"}"}},"description":"Program internal name constants.","type":{"names":["Object"]},"name":"Program","longname":"Constants.Program","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Program"},{"comment":"/**\n   * Quality and level colors, by internal name.\n   * @type {Object}\n   */","meta":{"range":[628,1933],"filename":"constants.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003147","name":"qualityColors","type":"ObjectExpression","value":"{\"EXTREMELY_RARE\":\"\",\"VERY_RARE\":\"\",\"MORE_RARE\":\"\",\"RARE\":\"\",\"LESS_COMMON\":\"\",\"COMMON\":\"\",\"VERY_COMMON\":\"\",\"L1\":\"\",\"L2\":\"\",\"L3\":\"\",\"L4\":\"\",\"L5\":\"\",\"L6\":\"\",\"L7\":\"\",\"L8\":\"\"}"}},"description":"Quality and level colors, by internal name.","type":{"names":["Object"]},"name":"qualityColors","longname":"Constants.qualityColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.qualityColors"},{"comment":"/**\n   * Short list of team colors by internal name.\n   * @type {Object}\n   */","meta":{"range":[194,543],"filename":"constants.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003109","name":"teamColors","type":"ObjectExpression","value":"{\"RESISTANCE\":\"\",\"ENLIGHTENED\":\"\",\"NEUTRAL\":\"\",\"LOKI\":\"\"}"}},"description":"Short list of team colors by internal name.","type":{"names":["Object"]},"name":"teamColors","longname":"Constants.teamColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.teamColors"},{"comment":"/**\n   * Texture internal name constants.\n   * @type {Object}\n   */","meta":{"range":[8382,8986],"filename":"constants.js","lineno":224,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003813","name":"Texture","type":"ObjectExpression","value":"{\"FlipCard\":\"FlipCardTexture\",\"Xm\":\"ObjectXMTexture\",\"Glowramp\":\"GlowrampTexture\",\"Media\":\"MediaCubeTexture\",\"Waypoint\":\"FtWaypointTexture\",\"ShieldEffect\":\"PortalShieldTexture\",\"ColorGlow\":\"ColorGlowTexture\",\"TargetGlow\":\"TargetGlowTexture\",\"PortalLink\":\"PortalLinkTexture\",\"ResonatorLink\":\"ResonatorLinkTexture\",\"OrnamentMeetupPoint\":\"OrnamentMeetupPointTexture\",\"OrnamentFinishPoint\":\"OrnamentFinishPointTexture\",\"OrnamentCluster\":\"OrnamentClusterTexture\",\"OrnamentVolatile\":\"OrnamentVolatileTexture\",\"Particle\":\"ParticleTexture\"}"}},"description":"Texture internal name constants.","type":{"names":["Object"]},"name":"Texture","longname":"Constants.Texture","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.Texture"},{"comment":"/**\n   * Constants for xm glow colors (for item xm cores)\n   * @type {Object}\n   */","meta":{"range":[4246,4534],"filename":"constants.js","lineno":103,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003583","name":"xmColors","type":"ObjectExpression","value":"{\"coreGlow\":\"\",\"coreGlowAlt\":\"\",\"coreGlowAda\":\"\",\"coreGlowJarvis\":\"\"}"}},"description":"Constants for xm glow colors (for item xm cores)","type":{"names":["Object"]},"name":"xmColors","longname":"Constants.xmColors","kind":"member","memberof":"Constants","scope":"static","$longname":"Constants.xmColors"}]},{"comment":"/**\n * Disco portal animation\n * @param  {Number} delta   Time since last frame\n * @param  {Number} elapsed Total time elapsed\n * @return {Boolean}        Returns true to continue animation\n */","meta":{"range":[1393,1661],"filename":"utils.js","lineno":53,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022860","name":"exports.disco","type":"FunctionDeclaration","paramnames":["delta","elapsed"]}},"description":"Disco portal animation","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"},{"type":{"names":["Number"]},"description":"Total time elapsed","name":"elapsed"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue animation"}],"name":"disco","longname":"disco","kind":"function","scope":"global","$longname":"disco"},{"comment":"/**\n * Base class for all \"drawable\" things.\n *\n * Requires, at the very least, a program to run.\n */","meta":{"range":[221,9445],"filename":"drawable.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003864","name":"Drawable","type":"ClassDeclaration","paramnames":["programName","meshName"]}},"classdesc":"Base class for all \"drawable\" things.\n\nRequires, at the very least, a program to run.","name":"Drawable","longname":"Drawable","kind":"class","scope":"global","description":"Given a mesh internal name and a program internal name, construct\na Drawable","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal Name","name":"meshName"}],"$longname":"Drawable","$members":[{"comment":"/**\n   * Adds an animation\n   *\n   * @chainable\n   * @param {Animation} animation The animation to be run.\n   *                              This will need to be started independently, or prior to being added.\n   * @return {this} Returns `this`\n   */","meta":{"range":[9112,9201],"filename":"drawable.js","lineno":359,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004740","name":"Drawable#addAnimation","type":"MethodDefinition","paramnames":["animation"]},"vars":{"":null}},"description":"Adds an animation","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Animation"]},"description":"The animation to be run.\n                             This will need to be started independently, or prior to being added.","name":"animation"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"addAnimation","longname":"Drawable#addAnimation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#addAnimation"},{"comment":"/**\n   * Adds a drawable as a child of this one.\n   * @param {Drawable} drawable The child drawable.\n   * @return {void}\n   */","meta":{"range":[4129,4350],"filename":"drawable.js","lineno":147,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004258","name":"Drawable#addChild","type":"MethodDefinition","paramnames":["drawable"]},"vars":{"":null}},"description":"Adds a drawable as a child of this one.","params":[{"type":{"names":["Drawable"]},"description":"The child drawable.","name":"drawable"}],"returns":[{"type":{"names":["void"]}}],"name":"addChild","longname":"Drawable#addChild","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#addChild"},{"comment":"/**\n   * NYI\n   * @return {void}\n   */","meta":{"range":[8827,8855],"filename":"drawable.js","lineno":347,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004736","name":"Drawable#dispose","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"NYI","returns":[{"type":{"names":["void"]}}],"name":"dispose","longname":"Drawable#dispose","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#dispose"},{"comment":"/**\n   * Executes a draw call for this object\n   *\n   * Issues a warning if the drawable has not yet been initialized with `init`\n   * @return {void}\n   */","meta":{"range":[2942,3053],"filename":"drawable.js","lineno":104,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004196","name":"Drawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Executes a draw call for this object\n\nIssues a warning if the drawable has not yet been initialized with `init`","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"Drawable#draw","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#draw"},{"comment":"/**\n   * Sets the draw mode to draw triangles\n   * @return {void}\n   */","meta":{"range":[8722,8782],"filename":"drawable.js","lineno":339,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004724","name":"Drawable#drawFaces","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Sets the draw mode to draw triangles","returns":[{"type":{"names":["void"]}}],"name":"drawFaces","longname":"Drawable#drawFaces","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#drawFaces"},{"comment":"/**\n   * Sets the draw mode to draw lines\n   * @return {void}\n   */","meta":{"range":[8588,8644],"filename":"drawable.js","lineno":331,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004712","name":"Drawable#drawLines","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Sets the draw mode to draw lines","returns":[{"type":{"names":["void"]}}],"name":"drawLines","longname":"Drawable#drawLines","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#drawLines"},{"comment":"/**\n   * Initializer for the drawable\n   *\n   * Hooks up the drawable to all its gl-bound resources\n   *\n   * @param  {AssetManager} manager AssetManager containing the managed resources for this\n   *                                drawable.\n   * @return {Promise}              Resolves if the assets are successfully found and initialized,\n   *                                rejects (and generates a warning) otherwise.\n   */","meta":{"range":[2355,2518],"filename":"drawable.js","lineno":78,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004151","name":"Drawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initializer for the drawable\n\nHooks up the drawable to all its gl-bound resources","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the managed resources for this\n                               drawable.","name":"manager"}],"returns":[{"type":{"names":["Promise"]},"description":"Resolves if the assets are successfully found and initialized,\n                               rejects (and generates a warning) otherwise."}],"name":"init","longname":"Drawable#init","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#init"},{"comment":"/**\n   * Rotate a model with a quaternion\n   * @param  {quat} q   The quaternion\n   * @return {void}\n   */","meta":{"range":[6802,6892],"filename":"drawable.js","lineno":251,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004544","name":"Drawable#rotate","type":"MethodDefinition","paramnames":["q"]},"vars":{"":null}},"description":"Rotate a model with a quaternion","params":[{"type":{"names":["quat"]},"description":"The quaternion","name":"q"}],"returns":[{"type":{"names":["void"]}}],"name":"rotate","longname":"Drawable#rotate","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#rotate"},{"comment":"/**\n   * Scale all dimensions by the same value\n   * @param  {Number} f The amount to _scale\n   * @return {void}\n   */","meta":{"range":[7809,7871],"filename":"drawable.js","lineno":298,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004637","name":"Drawable#scalarScale","type":"MethodDefinition","paramnames":["f"]},"vars":{"":null}},"description":"Scale all dimensions by the same value","params":[{"type":{"names":["Number"]},"description":"The amount to _scale","name":"f"}],"returns":[{"type":{"names":["void"]}}],"name":"scalarScale","longname":"Drawable#scalarScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#scalarScale"},{"comment":"/**\n   * Scale a model by some vector\n   * @param  {vec3} vec   The vector\n   * @return {void}\n   */","meta":{"range":[6391,6482],"filename":"drawable.js","lineno":231,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004499","name":"Drawable#scale","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Scale a model by some vector","params":[{"type":{"names":["vec3"]},"description":"The vector","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"scale","longname":"Drawable#scale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#scale"},{"comment":"/**\n   * Sets the specific draw function for this drawable\n   *\n   * @chainable\n   * @param {Function} fn The draw function to use when drawable this object\n   * @return {this} Returns `this`\n   */","meta":{"range":[2722,2780],"filename":"drawable.js","lineno":93,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004183","name":"Drawable#setDrawFn","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"Sets the specific draw function for this drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["function"]},"description":"The draw function to use when drawable this object","name":"fn"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setDrawFn","longname":"Drawable#setDrawFn","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setDrawFn"},{"comment":"/**\n   * Sets the drawing mode for this drawable.  Should be one of the modes\n   * found on Mesh\n   *\n   * @see  Mesh\n   * @param {enum} mode One of the Mesh.MODE_* constants\n   * @return {void}\n   */","meta":{"range":[8298,8514],"filename":"drawable.js","lineno":319,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004671","name":"Drawable#setDrawMode","type":"MethodDefinition","paramnames":["mode"]},"vars":{"":null}},"description":"Sets the drawing mode for this drawable.  Should be one of the modes\nfound on Mesh","see":["Mesh"],"params":[{"type":{"names":["enum"]},"description":"One of the Mesh.MODE_* constants","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"setDrawMode","longname":"Drawable#setDrawMode","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setDrawMode"},{"comment":"/**\n   * Sets the object's rotation from a quaternion\n   * @param {quat} q The new rotation\n   * @return {void}\n   */","meta":{"range":[7016,7090],"filename":"drawable.js","lineno":261,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004566","name":"Drawable#setRotation","type":"MethodDefinition","paramnames":["q"]},"vars":{"":null}},"description":"Sets the object's rotation from a quaternion","params":[{"type":{"names":["quat"]},"description":"The new rotation","name":"q"}],"returns":[{"type":{"names":["void"]}}],"name":"setRotation","longname":"Drawable#setRotation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setRotation"},{"comment":"/**\n   * Sets the local scale to some scalar value (for x, y, and z)\n   * @param {Number} f Amount to set the scale to.\n   * @return {void}\n   */","meta":{"range":[8023,8091],"filename":"drawable.js","lineno":307,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004654","name":"Drawable#setScalarScale","type":"MethodDefinition","paramnames":["f"]},"vars":{"":null}},"description":"Sets the local scale to some scalar value (for x, y, and z)","params":[{"type":{"names":["Number"]},"description":"Amount to set the scale to.","name":"f"}],"returns":[{"type":{"names":["void"]}}],"name":"setScalarScale","longname":"Drawable#setScalarScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setScalarScale"},{"comment":"/**\n   * Sets the scale of the local transform\n   * @param {vec3} vec The scale to set to.\n   * @return {void}\n   */","meta":{"range":[6605,6689],"filename":"drawable.js","lineno":241,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004521","name":"Drawable#setScale","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Sets the scale of the local transform","params":[{"type":{"names":["vec3"]},"description":"The scale to set to.","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"setScale","longname":"Drawable#setScale","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setScale"},{"comment":"/**\n   * Sets the position to some vector\n   * @param {vec3} vec The new position\n   * @return {void}\n   */","meta":{"range":[6197,6284],"filename":"drawable.js","lineno":221,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004479","name":"Drawable#setTranslation","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Sets the position to some vector","params":[{"type":{"names":["vec3"]},"description":"The new position","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"setTranslation","longname":"Drawable#setTranslation","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setTranslation"},{"comment":"/**\n   * Sets a uniform on the drawable\n   *\n   * @chainable\n   * @param {String} name  Name of the drawable to set\n   * @param {mixed} value  Value to set on the drawable.\n   * @returns {this} Returns `this`\n   */","meta":{"range":[3274,3353],"filename":"drawable.js","lineno":120,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004220","name":"Drawable#setUniform","type":"MethodDefinition","paramnames":["name","value"]},"vars":{"":null}},"description":"Sets a uniform on the drawable","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["String"]},"description":"Name of the drawable to set","name":"name"},{"type":{"names":["mixed"]},"description":"Value to set on the drawable.","name":"value"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setUniform","longname":"Drawable#setUniform","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#setUniform"},{"comment":"/**\n   * Translate a model along some vector\n   * @param  {vec3} vec   The vector\n   * @return {void}\n   */","meta":{"range":[5963,6083],"filename":"drawable.js","lineno":210,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004452","name":"Drawable#translate","type":"MethodDefinition","paramnames":["vec"]},"vars":{"":null}},"description":"Translate a model along some vector","params":[{"type":{"names":["vec3"]},"description":"The vector","name":"vec"}],"returns":[{"type":{"names":["void"]}}],"name":"translate","longname":"Drawable#translate","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translate"},{"comment":"/**\n   * Translate the model along the X axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7217,7288],"filename":"drawable.js","lineno":271,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004586","name":"Drawable#translateX","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the X axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateX","longname":"Drawable#translateX","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateX"},{"comment":"/**\n   * Translate the model along the Y axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7415,7486],"filename":"drawable.js","lineno":280,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004603","name":"Drawable#translateY","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the Y axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateY","longname":"Drawable#translateY","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateY"},{"comment":"/**\n   * Translate the model along the Z axis\n   * @param  {float} dist  Distance to translate\n   * @return {void}\n   */","meta":{"range":[7613,7684],"filename":"drawable.js","lineno":289,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004620","name":"Drawable#translateZ","type":"MethodDefinition","paramnames":["dist"]},"vars":{"":null}},"description":"Translate the model along the Z axis","params":[{"type":{"names":["float"]},"description":"Distance to translate","name":"dist"}],"returns":[{"type":{"names":["void"]}}],"name":"translateZ","longname":"Drawable#translateZ","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#translateZ"},{"comment":"/**\n   * Update the internal u_modelViewProject uniform\n   * by applying world and local transforms to the model\n   * matrix.  Then, propagate the new local transform to all the children\n   * by way of their world transforms.\n   * @return {void}\n   */","meta":{"range":[4608,5034],"filename":"drawable.js","lineno":162,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004289","name":"Drawable#updateMatrix","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the internal u_modelViewProject uniform\nby applying world and local transforms to the model\nmatrix.  Then, propagate the new local transform to all the children\nby way of their world transforms.","returns":[{"type":{"names":["void"]}}],"name":"updateMatrix","longname":"Drawable#updateMatrix","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#updateMatrix"},{"comment":"/**\n   * Updates the internal representation of the ray from the camera to the\n   * drawable\n   * @return {void}\n   */","meta":{"range":[5667,5849],"filename":"drawable.js","lineno":199,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004409","name":"Drawable#updateRay","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Updates the internal representation of the ray from the camera to the\ndrawable","returns":[{"type":{"names":["void"]}}],"name":"updateRay","longname":"Drawable#updateRay","kind":"function","memberof":"Drawable","scope":"instance","params":[],"$longname":"Drawable#updateRay"},{"comment":"/**\n   * Updates the elapsed time for this object.\n   *\n   * Also executes any periodic updates that have been applied to the drawable\n   * (i.e. animations).  If this function returns a falsey value, it signals that the\n   * animation has ended, and that the object should be removed from the draw loop.\n   *\n   * @param  {Number} delta Amount of time that has elapsed since the last draw call\n   * @return {boolean}      Return false if the object should be removed from the\n   *                        return loop.\n   */","meta":{"range":[3883,3996],"filename":"drawable.js","lineno":136,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004236","name":"Drawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates the elapsed time for this object.\n\nAlso executes any periodic updates that have been applied to the drawable\n(i.e. animations).  If this function returns a falsey value, it signals that the\nanimation has ended, and that the object should be removed from the draw loop.","params":[{"type":{"names":["Number"]},"description":"Amount of time that has elapsed since the last draw call","name":"delta"}],"returns":[{"type":{"names":["boolean"]},"description":"Return false if the object should be removed from the\n                       return loop."}],"name":"updateTime","longname":"Drawable#updateTime","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateTime"},{"comment":"/**\n   * Update the internal viewProject matrix (projection * view matrices)\n   * @param  {mat4} viewProject Projection matrix multiplied by view matrix\n   * @return {void}\n   */","meta":{"range":[5418,5542],"filename":"drawable.js","lineno":188,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004388","name":"Drawable#updateView","type":"MethodDefinition","paramnames":["viewProject"]},"vars":{"":null}},"description":"Update the internal viewProject matrix (projection * view matrices)","params":[{"type":{"names":["mat4"]},"description":"Projection matrix multiplied by view matrix","name":"viewProject"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"Drawable#updateView","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateView"},{"comment":"/**\n   * Updates the model's \"world\" transform.\n   * @param  {mat4} world   A world transform\n   * @return {void}\n   */","meta":{"range":[5160,5233],"filename":"drawable.js","lineno":178,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100004372","name":"Drawable#updateWorld","type":"MethodDefinition","paramnames":["world"]},"vars":{"":null}},"description":"Updates the model's \"world\" transform.","params":[{"type":{"names":["mat4"]},"description":"A world transform","name":"world"}],"returns":[{"type":{"names":["void"]}}],"name":"updateWorld","longname":"Drawable#updateWorld","kind":"function","memberof":"Drawable","scope":"instance","$longname":"Drawable#updateWorld"}],"$constructor":{"comment":"/**\n   * Given a mesh internal name and a program internal name, construct\n   * a Drawable\n   * @param  {String} programName Program internal name\n   * @param  {String} meshName    Mesh internal Name\n   */","meta":{"range":[449,1149],"filename":"drawable.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100003867","name":"Drawable","type":"MethodDefinition","paramnames":["programName","meshName"]},"vars":{"":null}},"description":"Given a mesh internal name and a program internal name, construct\na Drawable","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal Name","name":"meshName"}],"name":"Drawable","longname":"Drawable","kind":"class","scope":"global","undocumented":true,"$longname":"Drawable"}},{"comment":"/**\n * Easing functions\n *\n * Adapted from https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js\n * @namespace\n */","meta":{"range":[162,171],"filename":"easing.js","lineno":8,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{"id":"astnode100000333","name":"Ease","type":"ObjectExpression","value":"{}"}},"description":"Easing functions\n\nAdapted from https://github.com/CreateJS/TweenJS/blob/master/src/tweenjs/Ease.js","kind":"namespace","name":"Ease","longname":"Ease","scope":"global","$longname":"Ease","$members":[{"comment":"/**\n * Mimics the simple -100 to 100 easing in Flash Pro.\n * @method get\n * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[565,843],"filename":"easing.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Mimics the simple -100 to 100 easing in Flash Pro.","kind":"function","name":"get","params":[{"type":{"names":["Number"]},"description":"A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.get","$longname":"Ease.get"},{"comment":"/**\n * Configurable \"back in\" ease.\n * @method getBackIn\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back in\" ease function\n **/","meta":{"range":[5097,5300],"filename":"easing.js","lineno":235,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back in\" ease.","kind":"function","name":"getBackIn","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back in\" ease function"}],"longname":"Ease.getBackIn","$longname":"Ease.getBackIn"},{"comment":"/**\n * Configurable \"back in out\" ease.\n * @method getBackInOut\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back in out\" ease function\n **/","meta":{"range":[6131,6345],"filename":"easing.js","lineno":281,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back in out\" ease.","kind":"function","name":"getBackInOut","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back in out\" ease function"}],"longname":"Ease.getBackInOut","$longname":"Ease.getBackInOut"},{"comment":"/**\n * Configurable \"back out\" ease.\n * @method getBackOut\n * @param {Number} amount The strength of the ease.\n * @static\n * @memberOf Ease\n * @return {Function} The configured \"back out\" ease function\n **/","meta":{"range":[5606,5812],"filename":"easing.js","lineno":258,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable \"back out\" ease.","kind":"function","name":"getBackOut","params":[{"type":{"names":["Number"]},"description":"The strength of the ease.","name":"amount"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The configured \"back out\" ease function"}],"longname":"Ease.getBackOut","$longname":"Ease.getBackOut"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticIn\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic in\" ease function\n **/","meta":{"range":[8521,8774],"filename":"easing.js","lineno":388,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticIn","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic in\" ease function"}],"longname":"Ease.getElasticIn","$longname":"Ease.getElasticIn"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticInOut\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic in-out\" ease function\n **/","meta":{"range":[10040,10300],"filename":"easing.js","lineno":446,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticInOut","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic in-out\" ease function"}],"longname":"Ease.getElasticInOut","$longname":"Ease.getElasticInOut"},{"comment":"/**\n * Configurable elastic ease.\n * @method getElasticOut\n * @param {Number} amplitude Amplitude of the bounce\n * @param {Number} period Period of the bounce\n * @static\n * @memberOf Ease\n * @return {Function} A configured \"elastic out\" ease function\n **/","meta":{"range":[9278,9533],"filename":"easing.js","lineno":417,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable elastic ease.","kind":"function","name":"getElasticOut","params":[{"type":{"names":["Number"]},"description":"Amplitude of the bounce","name":"amplitude"},{"type":{"names":["Number"]},"description":"Period of the bounce","name":"period"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"A configured \"elastic out\" ease function"}],"longname":"Ease.getElasticOut","$longname":"Ease.getElasticOut"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowIn\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1157,1379],"filename":"easing.js","lineno":57,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowIn","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowIn","$longname":"Ease.getPowIn"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowInOut\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1799,2024],"filename":"easing.js","lineno":85,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowInOut","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowInOut","$longname":"Ease.getPowInOut"},{"comment":"/**\n * Configurable exponential ease.\n * @method getPowOut\n * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n * @static\n * @memberOf Ease\n * @return {Function} The parametric easing function\n **/","meta":{"range":[1473,1696],"filename":"easing.js","lineno":71,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Configurable exponential ease.","kind":"function","name":"getPowOut","params":[{"type":{"names":["Number"]},"description":"The exponent to use (ex. 3 would return a cubic ease).","name":"pow"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["function"]},"description":"The parametric easing function"}],"longname":"Ease.getPowOut","$longname":"Ease.getPowOut"},{"comment":"/**\n * Identical to linear.\n * @method none\n * @param {Number} t Parametric value (from 0 to 1)\n * @static\n * @memberOf Ease\n * @return {Number} The linear transform\n **/","meta":{"range":[368,538],"filename":"easing.js","lineno":21,"path":"/Users/danielb/repositories/ingress-model-viewer/src/animation","code":{}},"description":"Identical to linear.","kind":"function","name":"none","params":[{"type":{"names":["Number"]},"description":"Parametric value (from 0 to 1)","name":"t"}],"scope":"static","memberof":"Ease","returns":[{"type":{"names":["Number"]},"description":"The linear transform"}],"longname":"Ease.none","$longname":"Ease.none"}]},{"comment":"/**\n * The Engine provides nearly all the mechanics for actually drawing things to a canvas.\n *\n * Also includes a few simple functions for demoing various entities/drawables.  This\n * will probably go away in a future release.\n *\n * @param  {HTMLCanvas} canvas       A Canvas element\n * @param  {Object} assets           A manifest to pass to the internal AssetManager\n *                                   @see  AssetManager\n * @param  {Boolean} enableSnapshots If set to true, the canvas will preserve its drawing\n *                                   buffer, to allow for accurate .toDataURL calls.\n *                                   This will have a performance impact.\n */","meta":{"range":[1099,7124],"filename":"engine.js","lineno":25,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007230","name":"Engine","type":"ClassDeclaration","paramnames":["canvas","assets","enableSnapshots"]}},"classdesc":"The Engine provides nearly all the mechanics for actually drawing things to a canvas.\n\nAlso includes a few simple functions for demoing various entities/drawables.  This\nwill probably go away in a future release.","params":[{"type":{"names":["HTMLCanvas"]},"description":"A Canvas element","name":"canvas"},{"type":{"names":["Object"]},"description":"A manifest to pass to the internal AssetManager","name":"assets"},{"type":{"names":["Boolean"]},"description":"If set to true, the canvas will preserve its drawing\n                                  buffer, to allow for accurate .toDataURL calls.\n                                  This will have a performance impact.","name":"enableSnapshots"}],"see":["AssetManager"],"name":"Engine","longname":"Engine","kind":"class","scope":"global","$longname":"Engine","$members":[{"comment":"/**\n   * Captures a screenshot, if enabled\n   *\n   * @param  {String} mimeType The mime type of the image\n   * @param  {Number} quality  Quality, if applicable (applies to image/jpeg)\n   * @return {Promise}         A promise that resolves when the screenshot is complete\n   */","meta":{"range":[6485,7122],"filename":"engine.js","lineno":246,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007958","name":"Engine#capture","type":"MethodDefinition","paramnames":["mimeType","quality"]},"vars":{"":null}},"description":"Captures a screenshot, if enabled","params":[{"type":{"names":["String"]},"description":"The mime type of the image","name":"mimeType"},{"type":{"names":["Number"]},"description":"Quality, if applicable (applies to image/jpeg)","name":"quality"}],"returns":[{"type":{"names":["Promise"]},"description":"A promise that resolves when the screenshot is complete"}],"name":"capture","longname":"Engine#capture","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#capture"},{"comment":"/**\n   * Adds one of each drawable to the scene\n   * @return {void}\n   */","meta":{"range":[4157,5069],"filename":"engine.js","lineno":146,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007643","name":"Engine#demo","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Adds one of each drawable to the scene","returns":[{"type":{"names":["void"]}}],"name":"demo","longname":"Engine#demo","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#demo"},{"comment":"/**\n   * Adds one of each inventory item, and a portal, to the scene\n   * @return {void}\n   */","meta":{"range":[3691,4077],"filename":"engine.js","lineno":124,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007562","name":"Engine#demoEntities","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Adds one of each inventory item, and a portal, to the scene","returns":[{"type":{"names":["void"]}}],"name":"demoEntities","longname":"Engine#demoEntities","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#demoEntities"},{"comment":"/**\n   * Draw a single frame, with a specified time since last draw\n   * @param  {Number} delta Time since last render\n   * @return {void}\n   */","meta":{"range":[5220,5573],"filename":"engine.js","lineno":194,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007831","name":"Engine#draw","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Draw a single frame, with a specified time since last draw","params":[{"type":{"names":["Number"]},"description":"Time since last render","name":"delta"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"Engine#draw","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#draw"},{"comment":"/**\n   * Preloads all assets\n   * @param  {Function} callback Callback to invoke on completion\n   * @return {void}\n   */","meta":{"range":[6147,6202],"filename":"engine.js","lineno":235,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007947","name":"Engine#preload","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Preloads all assets","params":[{"type":{"names":["function"]},"description":"Callback to invoke on completion","name":"callback"}],"returns":[{"type":{"names":["void"]}}],"name":"preload","longname":"Engine#preload","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#preload"},{"comment":"/**\n   * Start the render loop.\n   * @param  {Number} tick Time since last tick (optional)\n   * @return {void}\n   */","meta":{"range":[5696,6020],"filename":"engine.js","lineno":215,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007881","name":"Engine#render","type":"MethodDefinition","paramnames":["tick"]},"vars":{"":null}},"description":"Start the render loop.","params":[{"type":{"names":["Number"]},"description":"Time since last tick (optional)","name":"tick"}],"returns":[{"type":{"names":["void"]}}],"name":"render","longname":"Engine#render","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#render"},{"comment":"/**\n   * Sets the scaling factor for the canvas.\n   *\n   * @chainable\n   * @param  {Number} factor The scale factor\n   * @return {this} Returns `this`\n   */","meta":{"range":[3027,3099],"filename":"engine.js","lineno":90,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007501","name":"Engine#rescale","type":"MethodDefinition","paramnames":["factor"]},"vars":{"":null}},"description":"Sets the scaling factor for the canvas.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"The scale factor","name":"factor"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"rescale","longname":"Engine#rescale","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#rescale"},{"comment":"/**\n   * Resize the canvas and viewport to new dimensions.\n   * Uses the canvas' clientWidth and clientHeight to determine viewport size,\n   * if not provided.\n   *\n   * @chainable\n   * @param {Number} width   (optional) width\n   * @param {Number} height  (optional) height\n   * @return {this} Returns `this`\n   */","meta":{"range":[2302,2864],"filename":"engine.js","lineno":66,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007396","name":"Engine#resize","type":"MethodDefinition","paramnames":["width","height"]},"vars":{"":null}},"description":"Resize the canvas and viewport to new dimensions.\nUses the canvas' clientWidth and clientHeight to determine viewport size,\nif not provided.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"(optional) width","name":"width"},{"type":{"names":["Number"]},"description":"(optional) height","name":"height"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"resize","longname":"Engine#resize","kind":"function","memberof":"Engine","scope":"instance","$longname":"Engine#resize"},{"comment":"/**\n   * Stops the render loop, if it's running.\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[3448,3590],"filename":"engine.js","lineno":112,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007533","name":"Engine#stop","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Stops the render loop, if it's running.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"stop","longname":"Engine#stop","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#stop"},{"comment":"/**\n   * Updates the current drawing viewport to the canvas' current dimensions\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[3247,3331],"filename":"engine.js","lineno":101,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007517","name":"Engine#updateView","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Updates the current drawing viewport to the canvas' current dimensions","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateView","longname":"Engine#updateView","kind":"function","memberof":"Engine","scope":"instance","params":[],"$longname":"Engine#updateView"}],"$constructor":{"comment":"","meta":{"range":[1117,1981],"filename":"engine.js","lineno":27,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100007233","name":"Engine","type":"MethodDefinition","paramnames":["canvas","assets","enableSnapshots"]},"vars":{"":null}},"undocumented":true,"name":"Engine","longname":"Engine","kind":"class","scope":"global","params":[],"$longname":"Engine"}},{"comment":"","meta":{"range":[71,183],"filename":"entity.js","lineno":5,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100008027","name":"Entity","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"Entity","longname":"Entity","kind":"class","scope":"global","params":[],"$longname":"Entity"},{"comment":"","meta":{"range":[572,806],"filename":"inventory.js","lineno":26,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008275","name":"entitybase","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"entitybase","longname":"entitybase","kind":"class","scope":"global","params":[],"$longname":"entitybase"},{"comment":"","meta":{"range":[2101,2375],"filename":"inventory.js","lineno":68,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008549","name":"ExtraShield","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"ExtraShield","longname":"ExtraShield","kind":"class","scope":"global","params":[],"$longname":"ExtraShield"},{"comment":"/**\n * A FileMesh is a Mesh that is loaded from a serialzied Java object,\n * as found in the apk.\n *\n * @extends {Mesh}\n */","meta":{"range":[889,1725],"filename":"file.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100012852","name":"FileMesh","type":"ClassDeclaration","paramnames":["gl","arraybuf"]}},"classdesc":"A FileMesh is a Mesh that is loaded from a serialzied Java object,\nas found in the apk.","augments":["Mesh"],"name":"FileMesh","longname":"FileMesh","kind":"class","scope":"global","description":"Construct the Mesh from the given file","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["ArrayBuffer"]},"description":"ArrayBuffer representing the entire .obj file","name":"arraybuf"}],"$longname":"FileMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"FileMesh#boundingBox","kind":"function","memberof":"FileMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"FileMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"FileMesh#boundingBoxCenter","kind":"function","memberof":"FileMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"FileMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"FileMesh#draw","kind":"function","memberof":"FileMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"FileMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct the Mesh from the given file\n   * @param  {context} gl           WebGL context\n   * @param  {ArrayBuffer} arraybuf ArrayBuffer representing the entire .obj file\n   */","meta":{"range":[1110,1723],"filename":"file.js","lineno":45,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100012856","name":"FileMesh","type":"MethodDefinition","paramnames":["gl","arraybuf"]},"vars":{"":null}},"description":"Construct the Mesh from the given file","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["ArrayBuffer"]},"description":"ArrayBuffer representing the entire .obj file","name":"arraybuf"}],"name":"FileMesh","longname":"FileMesh","kind":"class","scope":"global","undocumented":true,"$longname":"FileMesh"}},{"comment":"","meta":{"range":[978,1444],"filename":"inventory.js","lineno":42,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008351","name":"FlipCardAda","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"FlipCardAda","longname":"FlipCardAda","kind":"class","scope":"global","params":[],"$longname":"FlipCardAda"},{"comment":"","meta":{"range":[1531,2011],"filename":"inventory.js","lineno":55,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008450","name":"FlipCardJarvis","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"FlipCardJarvis","longname":"FlipCardJarvis","kind":"class","scope":"global","params":[],"$longname":"FlipCardJarvis"},{"comment":"","meta":{"range":[524,1014],"filename":"gl-attribute.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011377","name":"GLAttribute","type":"MethodDefinition","paramnames":["gl","attributes","values","usage"]},"vars":{"":null}},"undocumented":true,"name":"GLAttribute","longname":"GLAttribute","kind":"class","scope":"global","params":[],"$longname":"GLAttribute","$members":[{"comment":"/**\n   * Binds the buffer to the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[823,1077],"filename":"gl-buffer.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011785","name":"GLBuffer#bindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Binds the buffer to the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"bindBuffer","longname":"GLAttribute#bindBuffer","kind":"function","memberof":"GLAttribute","scope":"instance","params":[],"inherits":"GLBuffer#bindBuffer","inherited":true,"$longname":"GLAttribute#bindBuffer"},{"comment":"/**\n   * Deletes a chunk of a buffer\n   *\n   * @chainable\n   * @param  {Number} start Start of deletion\n   * @param  {Number} end   End of deletion\n   * @return {this} Returns `this`\n   */","meta":{"range":[2351,2716],"filename":"gl-buffer.js","lineno":94,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011899","name":"GLBuffer#deleteWithin","type":"MethodDefinition","paramnames":["start","end"]},"vars":{"":null}},"description":"Deletes a chunk of a buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Start of deletion","name":"start"},{"type":{"names":["Number"]},"description":"End of deletion","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"deleteWithin","longname":"GLAttribute#deleteWithin","kind":"function","memberof":"GLAttribute","scope":"instance","inherits":"GLBuffer#deleteWithin","inherited":true,"$longname":"GLAttribute#deleteWithin"},{"comment":"/**\n   * Given a set of program locations, set up the attribute pointers\n   *\n   * @chainable\n   * @param  {Object} locations Map of attribute names to program locations\n   *\n   * @return {this} Returns `this`\n   */","meta":{"range":[1999,2677],"filename":"gl-attribute.js","lineno":73,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011535","name":"GLAttribute#draw","type":"MethodDefinition","paramnames":["locations"]},"vars":{"":null}},"description":"Given a set of program locations, set up the attribute pointers","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Object"]},"description":"Map of attribute names to program locations","name":"locations"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"draw","longname":"GLAttribute#draw","kind":"function","memberof":"GLAttribute","scope":"instance","$longname":"GLAttribute#draw"},{"comment":"/**\n   * Perform some operation on each set of values for some attribute\n   *\n   * @chainable\n   * @param  {Number}   attributeIndex Index of the attribute to select\n   * @param  {Function} callback       Callback\n   *\n   * @return {this} Returns `this`\n   */","meta":{"range":[2943,3385],"filename":"gl-attribute.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011640","name":"GLAttribute#eachAttribute","type":"MethodDefinition","paramnames":["attributeIndex","callback"]},"vars":{"":null}},"description":"Perform some operation on each set of values for some attribute","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Index of the attribute to select","name":"attributeIndex"},{"type":{"names":["function"]},"description":"Callback","name":"callback"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"eachAttribute","longname":"GLAttribute#eachAttribute","kind":"function","memberof":"GLAttribute","scope":"instance","$longname":"GLAttribute#eachAttribute"},{"comment":"/**\n   * Do something with each elemnt of the buffer\n   *\n   * @chainable\n   * @param  {Function} callback The callback (values returned will overwrite\n   *                             the contents of the buffer at that offset)\n   * @param  {Number}   start    Offset to start\n   * @param  {Number}   end      Offset to end\n   * @return {this} Returns `this`\n   */","meta":{"range":[3087,3333],"filename":"gl-buffer.js","lineno":116,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011968","name":"GLBuffer#map","type":"MethodDefinition","paramnames":["callback","start","end"]},"vars":{"":null}},"description":"Do something with each elemnt of the buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["function"]},"description":"The callback (values returned will overwrite\n                            the contents of the buffer at that offset)","name":"callback"},{"type":{"names":["Number"]},"description":"Offset to start","name":"start"},{"type":{"names":["Number"]},"description":"Offset to end","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"map","longname":"GLAttribute#map","kind":"function","memberof":"GLAttribute","scope":"instance","inherits":"GLBuffer#map","inherited":true,"$longname":"GLAttribute#map"},{"comment":"/**\n   * Sets the buffer contents\n   *\n   * @chainable\n   * @param {ArrayBuffer} values Values to store in the buffer\n   * @param {Number} offset      Offset to write the values\n   * @return {this} Returns `this`\n   */","meta":{"range":[1980,2156],"filename":"gl-buffer.js","lineno":76,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011864","name":"GLBuffer#setValues","type":"MethodDefinition","paramnames":["values","offset"]},"vars":{"":null}},"description":"Sets the buffer contents","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"Values to store in the buffer","name":"values"},{"type":{"names":["Number"]},"description":"Offset to write the values","name":"offset"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setValues","longname":"GLAttribute#setValues","kind":"function","memberof":"GLAttribute","scope":"instance","inherits":"GLBuffer#setValues","inherited":true,"$longname":"GLAttribute#setValues"},{"comment":"/**\n   * Unbinds the buffer (NPI)\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1179,1299],"filename":"gl-buffer.js","lineno":48,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011831","name":"GLBuffer#unbindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Unbinds the buffer (NPI)","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"unbindBuffer","longname":"GLAttribute#unbindBuffer","kind":"function","memberof":"GLAttribute","scope":"instance","params":[],"inherits":"GLBuffer#unbindBuffer","inherited":true,"$longname":"GLAttribute#unbindBuffer"},{"comment":"/**\n   * Update the buffer data on the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1410,1755],"filename":"gl-buffer.js","lineno":59,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011837","name":"GLBuffer#update","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the buffer data on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"update","longname":"GLAttribute#update","kind":"function","memberof":"GLAttribute","scope":"instance","params":[],"inherits":"GLBuffer#update","inherited":true,"$longname":"GLAttribute#update"},{"comment":"/**\n   * Update a buffer's values, and also update the buffer on the gpu\n   *\n   * @chainable\n   * @param  {ArrayBuffer} values New values to fill the buffer with\n   * @return {this} Returns `this`\n   */","meta":{"range":[3543,3621],"filename":"gl-buffer.js","lineno":132,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100012025","name":"GLBuffer#updateBuffer","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"Update a buffer's values, and also update the buffer on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"New values to fill the buffer with","name":"values"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateBuffer","longname":"GLAttribute#updateBuffer","kind":"function","memberof":"GLAttribute","scope":"instance","inherits":"GLBuffer#updateBuffer","inherited":true,"$longname":"GLAttribute#updateBuffer"},{"comment":"/**\n   * Update the values in the buffer and pushes the buffer to the gpu\n   *\n   * @chainable\n   * @param  {ArrayBuffer} values New values to write to the buffer\n   *\n   * @return {this} Returns `this`\n   */","meta":{"range":[1678,1777],"filename":"gl-attribute.js","lineno":59,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011514","name":"GLAttribute#updateValues","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"Update the values in the buffer and pushes the buffer to the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"New values to write to the buffer","name":"values"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateValues","longname":"GLAttribute#updateValues","kind":"function","memberof":"GLAttribute","scope":"instance","$longname":"GLAttribute#updateValues"},{"comment":"/**\n   * Confirms that the underlying buffer's length is an even multiple\n   * of total size of the attributes for the buffer\n   *\n   * Issues a warning if not.\n   *\n   * @return {void}\n   */","meta":{"range":[1212,1463],"filename":"gl-attribute.js","lineno":42,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011486","name":"GLAttribute#validate","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Confirms that the underlying buffer's length is an even multiple\nof total size of the attributes for the buffer\n\nIssues a warning if not.","returns":[{"type":{"names":["void"]}}],"name":"validate","longname":"GLAttribute#validate","kind":"function","memberof":"GLAttribute","scope":"instance","params":[],"$longname":"GLAttribute#validate"}]},{"comment":"/**\n * Base class for all things bound to a gl context.\n *\n * @param  {context} gl  A webgl context\n */","meta":{"range":[104,164],"filename":"gl-bound.js","lineno":6,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100011352","name":"GLBound","type":"ClassDeclaration","paramnames":["gl"]}},"classdesc":"Base class for all things bound to a gl context.","params":[{"type":{"names":["context"]},"description":"A webgl context","name":"gl"}],"name":"GLBound","longname":"GLBound","kind":"class","scope":"global","$longname":"GLBound","$constructor":{"comment":"","meta":{"range":[122,162],"filename":"gl-bound.js","lineno":7,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100011355","name":"GLBound","type":"MethodDefinition","paramnames":["gl"]},"vars":{"":null}},"undocumented":true,"name":"GLBound","longname":"GLBound","kind":"class","scope":"global","params":[],"$longname":"GLBound"}},{"comment":"","meta":{"range":[480,718],"filename":"gl-buffer.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011740","name":"GLBuffer","type":"MethodDefinition","paramnames":["gl","target","usage"]},"vars":{"":null}},"undocumented":true,"name":"GLBuffer","longname":"GLBuffer","kind":"class","scope":"global","params":[],"$longname":"GLBuffer","$members":[{"comment":"/**\n   * Binds the buffer to the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[823,1077],"filename":"gl-buffer.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011785","name":"GLBuffer#bindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Binds the buffer to the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"bindBuffer","longname":"GLBuffer#bindBuffer","kind":"function","memberof":"GLBuffer","scope":"instance","params":[],"$longname":"GLBuffer#bindBuffer"},{"comment":"/**\n   * Deletes a chunk of a buffer\n   *\n   * @chainable\n   * @param  {Number} start Start of deletion\n   * @param  {Number} end   End of deletion\n   * @return {this} Returns `this`\n   */","meta":{"range":[2351,2716],"filename":"gl-buffer.js","lineno":94,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011899","name":"GLBuffer#deleteWithin","type":"MethodDefinition","paramnames":["start","end"]},"vars":{"":null}},"description":"Deletes a chunk of a buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Start of deletion","name":"start"},{"type":{"names":["Number"]},"description":"End of deletion","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"deleteWithin","longname":"GLBuffer#deleteWithin","kind":"function","memberof":"GLBuffer","scope":"instance","$longname":"GLBuffer#deleteWithin"},{"comment":"/**\n   * Do something with each elemnt of the buffer\n   *\n   * @chainable\n   * @param  {Function} callback The callback (values returned will overwrite\n   *                             the contents of the buffer at that offset)\n   * @param  {Number}   start    Offset to start\n   * @param  {Number}   end      Offset to end\n   * @return {this} Returns `this`\n   */","meta":{"range":[3087,3333],"filename":"gl-buffer.js","lineno":116,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011968","name":"GLBuffer#map","type":"MethodDefinition","paramnames":["callback","start","end"]},"vars":{"":null}},"description":"Do something with each elemnt of the buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["function"]},"description":"The callback (values returned will overwrite\n                            the contents of the buffer at that offset)","name":"callback"},{"type":{"names":["Number"]},"description":"Offset to start","name":"start"},{"type":{"names":["Number"]},"description":"Offset to end","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"map","longname":"GLBuffer#map","kind":"function","memberof":"GLBuffer","scope":"instance","$longname":"GLBuffer#map"},{"comment":"/**\n   * Sets the buffer contents\n   *\n   * @chainable\n   * @param {ArrayBuffer} values Values to store in the buffer\n   * @param {Number} offset      Offset to write the values\n   * @return {this} Returns `this`\n   */","meta":{"range":[1980,2156],"filename":"gl-buffer.js","lineno":76,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011864","name":"GLBuffer#setValues","type":"MethodDefinition","paramnames":["values","offset"]},"vars":{"":null}},"description":"Sets the buffer contents","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"Values to store in the buffer","name":"values"},{"type":{"names":["Number"]},"description":"Offset to write the values","name":"offset"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setValues","longname":"GLBuffer#setValues","kind":"function","memberof":"GLBuffer","scope":"instance","$longname":"GLBuffer#setValues"},{"comment":"/**\n   * Unbinds the buffer (NPI)\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1179,1299],"filename":"gl-buffer.js","lineno":48,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011831","name":"GLBuffer#unbindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Unbinds the buffer (NPI)","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"unbindBuffer","longname":"GLBuffer#unbindBuffer","kind":"function","memberof":"GLBuffer","scope":"instance","params":[],"$longname":"GLBuffer#unbindBuffer"},{"comment":"/**\n   * Update the buffer data on the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1410,1755],"filename":"gl-buffer.js","lineno":59,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011837","name":"GLBuffer#update","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the buffer data on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"update","longname":"GLBuffer#update","kind":"function","memberof":"GLBuffer","scope":"instance","params":[],"$longname":"GLBuffer#update"},{"comment":"/**\n   * Update a buffer's values, and also update the buffer on the gpu\n   *\n   * @chainable\n   * @param  {ArrayBuffer} values New values to fill the buffer with\n   * @return {this} Returns `this`\n   */","meta":{"range":[3543,3621],"filename":"gl-buffer.js","lineno":132,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100012025","name":"GLBuffer#updateBuffer","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"Update a buffer's values, and also update the buffer on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"New values to fill the buffer with","name":"values"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateBuffer","longname":"GLBuffer#updateBuffer","kind":"function","memberof":"GLBuffer","scope":"instance","$longname":"GLBuffer#updateBuffer"}]},{"comment":"","meta":{"range":[564,786],"filename":"gl-index.js","lineno":17,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100012052","name":"GLIndex","type":"MethodDefinition","paramnames":["gl","values","drawMode","usage"]},"vars":{"":null}},"undocumented":true,"name":"GLIndex","longname":"GLIndex","kind":"class","scope":"global","params":[],"$longname":"GLIndex","$members":[{"comment":"/**\n   * Binds the buffer to the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[823,1077],"filename":"gl-buffer.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011785","name":"GLBuffer#bindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Binds the buffer to the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"bindBuffer","longname":"GLIndex#bindBuffer","kind":"function","memberof":"GLIndex","scope":"instance","params":[],"inherits":"GLBuffer#bindBuffer","inherited":true,"$longname":"GLIndex#bindBuffer"},{"comment":"/**\n   * Deletes a chunk of a buffer\n   *\n   * @chainable\n   * @param  {Number} start Start of deletion\n   * @param  {Number} end   End of deletion\n   * @return {this} Returns `this`\n   */","meta":{"range":[2351,2716],"filename":"gl-buffer.js","lineno":94,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011899","name":"GLBuffer#deleteWithin","type":"MethodDefinition","paramnames":["start","end"]},"vars":{"":null}},"description":"Deletes a chunk of a buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["Number"]},"description":"Start of deletion","name":"start"},{"type":{"names":["Number"]},"description":"End of deletion","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"deleteWithin","longname":"GLIndex#deleteWithin","kind":"function","memberof":"GLIndex","scope":"instance","inherits":"GLBuffer#deleteWithin","inherited":true,"$longname":"GLIndex#deleteWithin"},{"comment":"/**\n   * Perform a draw call using this index buffer.\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[908,1121],"filename":"gl-index.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100012096","name":"GLIndex#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Perform a draw call using this index buffer.","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"draw","longname":"GLIndex#draw","kind":"function","memberof":"GLIndex","scope":"instance","params":[],"$longname":"GLIndex#draw"},{"comment":"/**\n   * Do something with each elemnt of the buffer\n   *\n   * @chainable\n   * @param  {Function} callback The callback (values returned will overwrite\n   *                             the contents of the buffer at that offset)\n   * @param  {Number}   start    Offset to start\n   * @param  {Number}   end      Offset to end\n   * @return {this} Returns `this`\n   */","meta":{"range":[3087,3333],"filename":"gl-buffer.js","lineno":116,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011968","name":"GLBuffer#map","type":"MethodDefinition","paramnames":["callback","start","end"]},"vars":{"":null}},"description":"Do something with each elemnt of the buffer","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["function"]},"description":"The callback (values returned will overwrite\n                            the contents of the buffer at that offset)","name":"callback"},{"type":{"names":["Number"]},"description":"Offset to start","name":"start"},{"type":{"names":["Number"]},"description":"Offset to end","name":"end"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"map","longname":"GLIndex#map","kind":"function","memberof":"GLIndex","scope":"instance","inherits":"GLBuffer#map","inherited":true,"$longname":"GLIndex#map"},{"comment":"/**\n   * Sets the buffer contents\n   *\n   * @chainable\n   * @param {ArrayBuffer} values Values to store in the buffer\n   * @param {Number} offset      Offset to write the values\n   * @return {this} Returns `this`\n   */","meta":{"range":[1980,2156],"filename":"gl-buffer.js","lineno":76,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011864","name":"GLBuffer#setValues","type":"MethodDefinition","paramnames":["values","offset"]},"vars":{"":null}},"description":"Sets the buffer contents","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"Values to store in the buffer","name":"values"},{"type":{"names":["Number"]},"description":"Offset to write the values","name":"offset"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"setValues","longname":"GLIndex#setValues","kind":"function","memberof":"GLIndex","scope":"instance","inherits":"GLBuffer#setValues","inherited":true,"$longname":"GLIndex#setValues"},{"comment":"/**\n   * Unbinds the buffer (NPI)\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1179,1299],"filename":"gl-buffer.js","lineno":48,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011831","name":"GLBuffer#unbindBuffer","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Unbinds the buffer (NPI)","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"unbindBuffer","longname":"GLIndex#unbindBuffer","kind":"function","memberof":"GLIndex","scope":"instance","params":[],"inherits":"GLBuffer#unbindBuffer","inherited":true,"$longname":"GLIndex#unbindBuffer"},{"comment":"/**\n   * Update the buffer data on the gpu\n   *\n   * @chainable\n   * @return {this} Returns `this`\n   */","meta":{"range":[1410,1755],"filename":"gl-buffer.js","lineno":59,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100011837","name":"GLBuffer#update","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the buffer data on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"update","longname":"GLIndex#update","kind":"function","memberof":"GLIndex","scope":"instance","params":[],"inherits":"GLBuffer#update","inherited":true,"$longname":"GLIndex#update"},{"comment":"/**\n   * Update a buffer's values, and also update the buffer on the gpu\n   *\n   * @chainable\n   * @param  {ArrayBuffer} values New values to fill the buffer with\n   * @return {this} Returns `this`\n   */","meta":{"range":[3543,3621],"filename":"gl-buffer.js","lineno":132,"path":"/Users/danielb/repositories/ingress-model-viewer/src/gl","code":{"id":"astnode100012025","name":"GLBuffer#updateBuffer","type":"MethodDefinition","paramnames":["values"]},"vars":{"":null}},"description":"Update a buffer's values, and also update the buffer on the gpu","tags":[{"originalTitle":"chainable","title":"chainable","text":""}],"params":[{"type":{"names":["ArrayBuffer"]},"description":"New values to fill the buffer with","name":"values"}],"returns":[{"type":{"names":["this"]},"description":"Returns `this`"}],"name":"updateBuffer","longname":"GLIndex#updateBuffer","kind":"function","memberof":"GLIndex","scope":"instance","inherits":"GLBuffer#updateBuffer","inherited":true,"$longname":"GLIndex#updateBuffer"}]},{"comment":"","meta":{"range":[532,581],"filename":"world.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006829","name":"glowrampbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"glowrampbase","longname":"glowrampbase","kind":"class","scope":"global","params":[],"$longname":"glowrampbase"},{"comment":"/**\n * A \"glowramp\" refers to the usage of the red, green, and blue channels to create\n * a \"glowing\" texture.\n *\n * @param  {String} meshName    Internal name of the mesh\n * @param  {String} textureName Internal name of the texture\n */","meta":{"range":[553,1364],"filename":"glowramp.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005098","name":"GlowrampDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"A \"glowramp\" refers to the usage of the red, green, and blue channels to create\na \"glowing\" texture.","params":[{"type":{"names":["String"]},"description":"Internal name of the mesh","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture","name":"textureName"}],"name":"GlowrampDrawable","longname":"GlowrampDrawable","kind":"class","scope":"global","$longname":"GlowrampDrawable","$members":[{"comment":"/**\n   * Updates default glowramp variables (rotation, ramp target, elapsed time\n   * and alpha)\n   * @param  {Number} tick Time delta since last tick\n   * @return {Boolean}     @see src/drawable.js#updateTime\n   */","meta":{"range":[1076,1362],"filename":"glowramp.js","lineno":38,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005150","name":"GlowrampDrawable#updateTime","type":"MethodDefinition","paramnames":["tick"]},"vars":{"":null}},"description":"Updates default glowramp variables (rotation, ramp target, elapsed time\nand alpha)","params":[{"type":{"names":["Number"]},"description":"Time delta since last tick","name":"tick"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"GlowrampDrawable#updateTime","kind":"function","memberof":"GlowrampDrawable","scope":"instance","$longname":"GlowrampDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[606,854],"filename":"glowramp.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005102","name":"GlowrampDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"GlowrampDrawable","longname":"GlowrampDrawable","kind":"class","scope":"global","params":[],"$longname":"GlowrampDrawable"}},{"comment":"/**\n * A GlowrampProgram is a program meant for drawing\n * transparent glowramp drawables\n *\n * @extends {Program}\n * @param  {context} gl      WebGL context\n * @param  {String} vertex   Vertex shader source\n * @param  {String} fragment Fragment shader source\n */","meta":{"range":[335,1106],"filename":"glowramp.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021615","name":"GlowrampProgram","type":"ClassDeclaration","paramnames":["gl","vertex","fragment"]}},"classdesc":"A GlowrampProgram is a program meant for drawing\ntransparent glowramp drawables","augments":["Program"],"params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["String"]},"description":"Vertex shader source","name":"vertex"},{"type":{"names":["String"]},"description":"Fragment shader source","name":"fragment"}],"name":"GlowrampProgram","longname":"GlowrampProgram","kind":"class","scope":"global","$longname":"GlowrampProgram","$members":[{"comment":"/**\n   * Initialize the shader\n   *\n   * Parses out shader parameters, compiles the shader, and binds it to\n   * the context.\n   *\n   * @return {void}\n   */","meta":{"range":[3789,5104],"filename":"program.js","lineno":142,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021188","name":"Program#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Initialize the shader\n\nParses out shader parameters, compiles the shader, and binds it to\nthe context.","returns":[{"type":{"names":["void"]}}],"name":"init","longname":"GlowrampProgram#init","kind":"function","memberof":"GlowrampProgram","scope":"instance","params":[],"inherits":"Program#init","inherited":true,"$longname":"GlowrampProgram#init"},{"comment":"/**\n   * Use this program to draw\n   *\n   * Sets up the proper blending modes, etc\n   * @param  {Function} fn The draw function\n   * @return {void}\n   */","meta":{"range":[610,1104],"filename":"glowramp.js","lineno":26,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021632","name":"GlowrampProgram#use","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"Use this program to draw\n\nSets up the proper blending modes, etc","params":[{"type":{"names":["function"]},"description":"The draw function","name":"fn"}],"returns":[{"type":{"names":["void"]}}],"name":"use","longname":"GlowrampProgram#use","kind":"function","memberof":"GlowrampProgram","scope":"instance","overrides":"Program#use","$longname":"GlowrampProgram#use"}],"$constructor":{"comment":"","meta":{"range":[378,450],"filename":"glowramp.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021619","name":"GlowrampProgram","type":"MethodDefinition","paramnames":["gl","vertex","fragment"]},"vars":{"":null}},"undocumented":true,"name":"GlowrampProgram","longname":"GlowrampProgram","kind":"class","scope":"global","params":[],"$longname":"GlowrampProgram"}},{"comment":"","meta":{"range":[2463,2745],"filename":"inventory.js","lineno":79,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008608","name":"InterestCapsule","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"InterestCapsule","longname":"InterestCapsule","kind":"class","scope":"global","params":[],"$longname":"InterestCapsule"},{"comment":"/**\n * Contains drawable primitives for many of the inventory items.\n */","meta":{"range":[235,249],"filename":"inventory.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005241","name":"Inventory","type":"ObjectExpression","value":"{}"}},"description":"Contains drawable primitives for many of the inventory items.","name":"Inventory","longname":"Inventory","kind":"member","scope":"global","$longname":"Inventory"},{"comment":"","meta":{"range":[392,468],"filename":"resource.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006207","name":"itembase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"itembase","longname":"itembase","kind":"class","scope":"global","params":[],"$longname":"itembase"},{"comment":"","meta":{"range":[648,715],"filename":"inventory.js","lineno":25,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005266","name":"itembase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"itembase","longname":"itembase","kind":"class","scope":"global","params":[],"$longname":"itembase"},{"comment":"/**\n * The LinkDrawable represents the base class for link-type drawables.\n *\n * @param  {String} programName Internal name of the program to use\n * @param  {String} textureName Internal name of the texture to use\n */","meta":{"range":[308,1441],"filename":"link.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005401","name":"LinkDrawable","type":"ClassDeclaration","paramnames":["programName","textureName"]}},"classdesc":"The LinkDrawable represents the base class for link-type drawables.","params":[{"type":{"names":["String"]},"description":"Internal name of the program to use","name":"programName"},{"type":{"names":["String"]},"description":"Internal name of the texture to use","name":"textureName"}],"name":"LinkDrawable","longname":"LinkDrawable","kind":"class","scope":"global","$longname":"LinkDrawable","$members":[{"comment":"/**\n   * Updates default periodic uniforms for links\n   * @param  {Number} delta Time delta since last draw\n   * @return {Boolean}      @see src/drawable.js#updateTime\n   */","meta":{"range":[1288,1439],"filename":"link.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005517","name":"LinkDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates default periodic uniforms for links","params":[{"type":{"names":["Number"]},"description":"Time delta since last draw","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"LinkDrawable#updateTime","kind":"function","memberof":"LinkDrawable","scope":"instance","$longname":"LinkDrawable#updateTime"},{"comment":"/**\n   * Updates the camera transforms for the link drawables\n   * @param  {mat4}   viewProject Combined view and project matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[745,1108],"filename":"link.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005440","name":"LinkDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Updates the camera transforms for the link drawables","params":[{"type":{"names":["mat4"]},"description":"Combined view and project matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"LinkDrawable#updateView","kind":"function","memberof":"LinkDrawable","scope":"instance","$longname":"LinkDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[357,539],"filename":"link.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005405","name":"LinkDrawable","type":"MethodDefinition","paramnames":["programName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"LinkDrawable","longname":"LinkDrawable","kind":"class","scope":"global","params":[],"$longname":"LinkDrawable"}},{"comment":"/**\n * Makes an artifact drawable class\n * @param  {String} meshName    Name of the mesh to use\n * @param  {String} textureName Name of the texture to use\n * @return {ArtifactDrawable}   A new drawable class for this artifact\n */","meta":{"range":[1893,2106],"filename":"utils.js","lineno":67,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022932","name":"exports.makeArtifact","type":"FunctionDeclaration","paramnames":["meshName","textureName"]}},"description":"Makes an artifact drawable class","params":[{"type":{"names":["String"]},"description":"Name of the mesh to use","name":"meshName"},{"type":{"names":["String"]},"description":"Name of the texture to use","name":"textureName"}],"returns":[{"type":{"names":["ArtifactDrawable"]},"description":"A new drawable class for this artifact"}],"name":"makeArtifact","longname":"makeArtifact","kind":"function","scope":"global","$longname":"makeArtifact"},{"comment":"","meta":{"range":[1437,1573],"filename":"inventory.js","lineno":61,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005312","name":"media","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"media","longname":"media","kind":"class","scope":"global","params":[],"$longname":"media"},{"comment":"/**\n * Base class for all meshes\n *\n * @extends {GLBound}\n * @param  {context} gl              A webgl context\n * @param  {Float32Array} attributes A typed array of vertex attributes\n * @param  {Uint16Array} faces       A typed array of face indices\n * @param  {Uint16Array} lines       A typed array of line indices\n */","meta":{"range":[421,3411],"filename":"mesh.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012312","name":"Mesh","type":"ClassDeclaration","paramnames":["gl","attributes","faces","lines"]}},"classdesc":"Base class for all meshes","augments":["GLBound"],"params":[{"type":{"names":["context"]},"description":"A webgl context","name":"gl"},{"type":{"names":["Float32Array"]},"description":"A typed array of vertex attributes","name":"attributes"},{"type":{"names":["Uint16Array"]},"description":"A typed array of face indices","name":"faces"},{"type":{"names":["Uint16Array"]},"description":"A typed array of line indices","name":"lines"}],"name":"Mesh","longname":"Mesh","kind":"class","scope":"global","$longname":"Mesh","$members":[{"comment":"/**\n * Specifies drawing in `lines` mode\n * @type {String}\n */","meta":{"range":[3476,3504],"filename":"mesh.js","lineno":120,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012680","name":"Mesh.MODE_LINES","type":"Identifier","value":"MODE_LINES","paramnames":[]}},"description":"Specifies drawing in `lines` mode","type":{"names":["String"]},"name":"MODE_LINES","longname":"Mesh.MODE_LINES","kind":"member","memberof":"Mesh","scope":"static","$longname":"Mesh.MODE_LINES"},{"comment":"/**\n * Specifies drawing in `triangles` mode\n * @type {String}\n */","meta":{"range":[3574,3610],"filename":"mesh.js","lineno":126,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012686","name":"Mesh.MODE_TRIANGLES","type":"Identifier","value":"MODE_TRIANGLES","paramnames":[]}},"description":"Specifies drawing in `triangles` mode","type":{"names":["String"]},"name":"MODE_TRIANGLES","longname":"Mesh.MODE_TRIANGLES","kind":"member","memberof":"Mesh","scope":"static","$longname":"Mesh.MODE_TRIANGLES"},{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"Mesh#boundingBox","kind":"function","memberof":"Mesh","scope":"instance","$longname":"Mesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"Mesh#boundingBoxCenter","kind":"function","memberof":"Mesh","scope":"instance","$longname":"Mesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"Mesh#draw","kind":"function","memberof":"Mesh","scope":"instance","$longname":"Mesh#draw"}],"$constructor":{"comment":"","meta":{"range":[453,645],"filename":"mesh.js","lineno":17,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012316","name":"Mesh","type":"MethodDefinition","paramnames":["gl","attributes","faces","lines"]},"vars":{"":null}},"undocumented":true,"name":"Mesh","longname":"Mesh","kind":"class","scope":"global","params":[],"$longname":"Mesh"}},{"comment":"","meta":{"range":[136,215],"filename":"object.js","lineno":6,"path":"/Users/danielb/repositories/ingress-model-viewer/src/renderer","code":{"id":"astnode100021964","name":"ObjectRenderer","type":"MethodDefinition","paramnames":["gl","manager"]},"vars":{"":null}},"undocumented":true,"name":"ObjectRenderer","longname":"ObjectRenderer","kind":"class","scope":"global","params":[],"$longname":"ObjectRenderer"},{"comment":"/**\n * And OpaqueProgram is a Program used to draw opaque drawables\n *\n * @extends {Program}\n * @param  {context} gl      WebGL context\n * @param  {String} vertex   Vertex shader source\n * @param  {String} fragment Fragment shader source\n */","meta":{"range":[313,969],"filename":"opaque.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021733","name":"OpaqueProgram","type":"ClassDeclaration","paramnames":["gl","vertex","fragment"]}},"classdesc":"And OpaqueProgram is a Program used to draw opaque drawables","augments":["Program"],"params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["String"]},"description":"Vertex shader source","name":"vertex"},{"type":{"names":["String"]},"description":"Fragment shader source","name":"fragment"}],"name":"OpaqueProgram","longname":"OpaqueProgram","kind":"class","scope":"global","$longname":"OpaqueProgram","$members":[{"comment":"/**\n   * Initialize the shader\n   *\n   * Parses out shader parameters, compiles the shader, and binds it to\n   * the context.\n   *\n   * @return {void}\n   */","meta":{"range":[3789,5104],"filename":"program.js","lineno":142,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021188","name":"Program#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Initialize the shader\n\nParses out shader parameters, compiles the shader, and binds it to\nthe context.","returns":[{"type":{"names":["void"]}}],"name":"init","longname":"OpaqueProgram#init","kind":"function","memberof":"OpaqueProgram","scope":"instance","params":[],"inherits":"Program#init","inherited":true,"$longname":"OpaqueProgram#init"},{"comment":"/**\n   * Use this program to draw.\n   *\n   * Sets up the proper culling for drawing opaque objects\n   *\n   * @param  {Function} fn The draw function\n   * @return {void}\n   */","meta":{"range":[607,967],"filename":"opaque.js","lineno":26,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021750","name":"OpaqueProgram#use","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"Use this program to draw.\n\nSets up the proper culling for drawing opaque objects","params":[{"type":{"names":["function"]},"description":"The draw function","name":"fn"}],"returns":[{"type":{"names":["void"]}}],"name":"use","longname":"OpaqueProgram#use","kind":"function","memberof":"OpaqueProgram","scope":"instance","overrides":"Program#use","$longname":"OpaqueProgram#use"}],"$constructor":{"comment":"","meta":{"range":[354,426],"filename":"opaque.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/program","code":{"id":"astnode100021737","name":"OpaqueProgram","type":"MethodDefinition","paramnames":["gl","vertex","fragment"]},"vars":{"":null}},"undocumented":true,"name":"OpaqueProgram","longname":"OpaqueProgram","kind":"class","scope":"global","params":[],"$longname":"OpaqueProgram"}},{"comment":"/**\n * Camera controls for controlling a camera that orbits a fixed point,\n * with variable position and depth.\n *\n * This is a port of the THREE.js OrbitControls found with the webgl globe.\n *\n * @class\n * @param  {HTMLElement} element  Target element to bind listeners to\n * @param  {Number} distance Starting distance from origin\n * @param  {Object} options  Hash of options for configuration\n */","meta":{"range":[824,9511],"filename":"orbit-controls.js","lineno":35,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100018782","name":"OrbitControls","type":"ClassDeclaration","paramnames":["element","camera","distance","options"]}},"classdesc":"Camera controls for controlling a camera that orbits a fixed point,\nwith variable position and depth.\n\nThis is a port of the THREE.js OrbitControls found with the webgl globe.","kind":"class","params":[{"type":{"names":["HTMLElement"]},"description":"Target element to bind listeners to","name":"element"},{"type":{"names":["Number"]},"description":"Starting distance from origin","name":"distance"},{"type":{"names":["Object"]},"description":"Hash of options for configuration","name":"options"}],"name":"OrbitControls","longname":"OrbitControls","scope":"global","$longname":"OrbitControls","$members":[{"comment":"/**\n   * Unbinds all listeners and disables the controls\n   *\n   * @return {void}\n   */","meta":{"range":[2468,3319],"filename":"orbit-controls.js","lineno":85,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100019099","name":"OrbitControls#disable","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Unbinds all listeners and disables the controls","returns":[{"type":{"names":["void"]}}],"name":"disable","longname":"OrbitControls#disable","kind":"function","memberof":"OrbitControls","scope":"instance","params":[],"$longname":"OrbitControls#disable"},{"comment":"/**\n   * Binds all listeners and enables the controls\n   *\n   * @return {void}\n   */","meta":{"range":[3410,3851],"filename":"orbit-controls.js","lineno":105,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100019241","name":"OrbitControls#enable","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Binds all listeners and enables the controls","returns":[{"type":{"names":["void"]}}],"name":"enable","longname":"OrbitControls#enable","kind":"function","memberof":"OrbitControls","scope":"instance","params":[],"$longname":"OrbitControls#enable"},{"comment":"/**\n   * Update the given camera matrix with new position information, etc\n   * @param  {mat4} view   A view matrix\n   * @return {void}\n   */","meta":{"range":[3999,4834],"filename":"orbit-controls.js","lineno":122,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100019318","name":"OrbitControls#updateView","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Update the given camera matrix with new position information, etc","params":[{"type":{"names":["mat4"]},"description":"A view matrix","name":"view"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"OrbitControls#updateView","kind":"function","memberof":"OrbitControls","scope":"instance","$longname":"OrbitControls#updateView"}],"$constructor":{"comment":"","meta":{"range":[849,2374],"filename":"orbit-controls.js","lineno":37,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100018785","name":"OrbitControls","type":"MethodDefinition","paramnames":["element","camera","distance","options"]},"vars":{"":null}},"undocumented":true,"name":"OrbitControls","longname":"OrbitControls","kind":"class","scope":"global","params":[],"$longname":"OrbitControls"}},{"comment":"","meta":{"range":[1068,1117],"filename":"world.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006889","name":"ornamentbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"ornamentbase","longname":"ornamentbase","kind":"class","scope":"global","params":[],"$longname":"ornamentbase"},{"comment":"/**\n * An OrnamentDrawable is a TextuedDrawable that draws an ornament on\n * a unit plane.\n * @param  {String} meshName    Internal name of the ornament mesh\n * @param  {String} textureName Internal name of the texture\n */","meta":{"range":[396,718],"filename":"ornament.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005573","name":"OrnamentDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"An OrnamentDrawable is a TextuedDrawable that draws an ornament on\na unit plane.","params":[{"type":{"names":["String"]},"description":"Internal name of the ornament mesh","name":"meshName"},{"type":{"names":["String"]},"description":"Internal name of the texture","name":"textureName"}],"name":"OrnamentDrawable","longname":"OrnamentDrawable","kind":"class","scope":"global","$longname":"OrnamentDrawable","$constructor":{"comment":"","meta":{"range":[448,716],"filename":"ornament.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005577","name":"OrnamentDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"OrnamentDrawable","longname":"OrnamentDrawable","kind":"class","scope":"global","params":[],"$longname":"OrnamentDrawable"}},{"comment":"/**\n * A ParticleDrawable represents the base class for particles\n *\n * @extends {TexturedDrawable}\n */","meta":{"range":[265,615],"filename":"particle.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005904","name":"ParticleDrawable","type":"ClassDeclaration","paramnames":["programName"]}},"classdesc":"A ParticleDrawable represents the base class for particles","augments":["TexturedDrawable"],"name":"ParticleDrawable","longname":"ParticleDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticleDrawable","$members":[{"comment":"/**\n   * Draw the textured object\n   *\n   * @return {void}\n   */","meta":{"range":[530,651],"filename":"textured.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006688","name":"TexturedDrawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Draw the textured object","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"ParticleDrawable#draw","kind":"function","memberof":"ParticleDrawable","scope":"instance","params":[],"inherits":"TexturedDrawable#draw","inherited":true,"$longname":"ParticleDrawable#draw"}],"$constructor":{"comment":"","meta":{"range":[318,445],"filename":"particle.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005908","name":"ParticleDrawable","type":"MethodDefinition","paramnames":["programName"]},"vars":{"":null}},"undocumented":true,"name":"ParticleDrawable","longname":"ParticleDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticleDrawable"}},{"comment":"/**\n * A drawable representing a system of particles emanating from a portal\n *\n * @class\n * @extends {ParticleDrawable}\n * @param  {vec4}   color    The particle color\n * @param  {Number} height   The height to propagate\n * @param  {Number} count    The number of particles\n * @param  {Number} spread   The spread between particles\n * @param  {Number} distance The distance\n */","meta":{"range":[634,2481],"filename":"particle-portal.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005664","name":"ParticlePortalDrawable","type":"ClassDeclaration","paramnames":["color","height","count","spread","distance"]}},"classdesc":"A drawable representing a system of particles emanating from a portal","kind":"class","augments":["ParticleDrawable"],"params":[{"type":{"names":["vec4"]},"description":"The particle color","name":"color"},{"type":{"names":["Number"]},"description":"The height to propagate","name":"height"},{"type":{"names":["Number"]},"description":"The number of particles","name":"count"},{"type":{"names":["Number"]},"description":"The spread between particles","name":"spread"},{"type":{"names":["Number"]},"description":"The distance","name":"distance"}],"name":"ParticlePortalDrawable","longname":"ParticlePortalDrawable","scope":"global","$longname":"ParticlePortalDrawable","$members":[{"comment":"/**\n   * Initialize the portal particle mesh\n   * @param  {AssetManager} manager AssetManager containing the remaining assets\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[2375,2479],"filename":"particle-portal.js","lineno":69,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005860","name":"ParticlePortalDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Initialize the portal particle mesh","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the remaining assets","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"ParticlePortalDrawable#init","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#init"},{"comment":"/**\n   * Update the time for the system\n   * @param  {Number} delta Time since last tick\n   * @return {Boolean}      Results of onUpdate\n   */","meta":{"range":[2022,2185],"filename":"particle-portal.js","lineno":58,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005823","name":"ParticlePortalDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Update the time for the system","params":[{"type":{"names":["Number"]},"description":"Time since last tick","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Results of onUpdate"}],"name":"updateTime","longname":"ParticlePortalDrawable#updateTime","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#updateTime"},{"comment":"/**\n   * Update the view, and uniforms pertaining to the view\n   * @param  {mat4} viewProject   Camera's combine view and projection matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[1643,1873],"filename":"particle-portal.js","lineno":44,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005778","name":"ParticlePortalDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Update the view, and uniforms pertaining to the view","params":[{"type":{"names":["mat4"]},"description":"Camera's combine view and projection matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"ParticlePortalDrawable#updateView","kind":"function","memberof":"ParticlePortalDrawable","scope":"instance","$longname":"ParticlePortalDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[693,1426],"filename":"particle-portal.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005668","name":"ParticlePortalDrawable","type":"MethodDefinition","paramnames":["color","height","count","spread","distance"]},"vars":{"":null}},"undocumented":true,"name":"ParticlePortalDrawable","longname":"ParticlePortalDrawable","kind":"class","scope":"global","params":[],"$longname":"ParticlePortalDrawable"}},{"comment":"/**\n * A ParticlePortalMesh is a Mesh that represents a single system or portal particles.\n *\n * @extends {Mesh}\n */","meta":{"range":[806,2601],"filename":"particle-portal.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100013065","name":"ParticlePortalMesh","type":"ClassDeclaration","paramnames":["gl"]}},"classdesc":"A ParticlePortalMesh is a Mesh that represents a single system or portal particles.","augments":["Mesh"],"name":"ParticlePortalMesh","longname":"ParticlePortalMesh","kind":"class","scope":"global","description":"Construct a system of portal particles","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"}],"$longname":"ParticlePortalMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"ParticlePortalMesh#boundingBox","kind":"function","memberof":"ParticlePortalMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"ParticlePortalMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"ParticlePortalMesh#boundingBoxCenter","kind":"function","memberof":"ParticlePortalMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"ParticlePortalMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"ParticlePortalMesh#draw","kind":"function","memberof":"ParticlePortalMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"ParticlePortalMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct a system of portal particles\n   * @param  {context} gl     WebGL context\n   */","meta":{"range":[949,2599],"filename":"particle-portal.js","lineno":37,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100013069","name":"ParticlePortalMesh","type":"MethodDefinition","paramnames":["gl"]},"vars":{"":null}},"description":"Construct a system of portal particles","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"}],"name":"ParticlePortalMesh","longname":"ParticlePortalMesh","kind":"class","scope":"global","undocumented":true,"$longname":"ParticlePortalMesh"}},{"comment":"/**\n * A PlaneMesh is a Mesh that represents a unit square plane, centered on\n * 0,0.  Consists of a single quad.\n *\n * @extends {Mesh}\n */","meta":{"range":[304,1444],"filename":"plane.js","lineno":12,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100013386","name":"PlaneMesh","type":"ClassDeclaration","paramnames":["gl"]}},"classdesc":"A PlaneMesh is a Mesh that represents a unit square plane, centered on\n0,0.  Consists of a single quad.","augments":["Mesh"],"name":"PlaneMesh","longname":"PlaneMesh","kind":"class","scope":"global","description":"Construct a sphere","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"}],"$longname":"PlaneMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"PlaneMesh#boundingBox","kind":"function","memberof":"PlaneMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"PlaneMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"PlaneMesh#boundingBoxCenter","kind":"function","memberof":"PlaneMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"PlaneMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"PlaneMesh#draw","kind":"function","memberof":"PlaneMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"PlaneMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct a sphere\n   * @param  {context} gl     WebGL context\n   */","meta":{"range":[418,1442],"filename":"plane.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100013390","name":"PlaneMesh","type":"MethodDefinition","paramnames":["gl"]},"vars":{"":null}},"description":"Construct a sphere","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"}],"name":"PlaneMesh","longname":"PlaneMesh","kind":"class","scope":"global","undocumented":true,"$longname":"PlaneMesh"}},{"comment":"","meta":{"range":[303,592],"filename":"portal.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src/entity","code":{"id":"astnode100008694","name":"PortalEntity","type":"MethodDefinition","paramnames":["engine"]},"vars":{"":null}},"undocumented":true,"name":"PortalEntity","longname":"PortalEntity","kind":"class","scope":"global","params":[],"$longname":"PortalEntity"},{"comment":"/**\n * A LinkDrawable that represents a link from one portal to another\n * @extends {LinkDrawable}\n * @param  {vec2} start          X, Z of origin portal\n * @param  {vec2} end            X, Z of destination portal\n * @param  {vec4} color          Color of link\n * @param  {Number} startPercent Percent health of the origin portal\n * @param  {Number} endPercent   Percent health of the destination portal\n */","meta":{"range":[532,1222],"filename":"portal-link.js","lineno":14,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005977","name":"PortalLinkDrawable","type":"ClassDeclaration","paramnames":["start","end","color","startPercent","endPercent"]}},"classdesc":"A LinkDrawable that represents a link from one portal to another","augments":["LinkDrawable"],"params":[{"type":{"names":["vec2"]},"description":"X, Z of origin portal","name":"start"},{"type":{"names":["vec2"]},"description":"X, Z of destination portal","name":"end"},{"type":{"names":["vec4"]},"description":"Color of link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the origin portal","name":"startPercent"},{"type":{"names":["Number"]},"description":"Percent health of the destination portal","name":"endPercent"}],"name":"PortalLinkDrawable","longname":"PortalLinkDrawable","kind":"class","scope":"global","$longname":"PortalLinkDrawable","$members":[{"comment":"/**\n   * Construct the PortalLinkMesh for this link\n   * @param  {AssetManager} manager AssetManager to look up the program and texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1050,1220],"filename":"portal-link.js","lineno":30,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006033","name":"PortalLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Construct the PortalLinkMesh for this link","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager to look up the program and texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"PortalLinkDrawable#init","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","$longname":"PortalLinkDrawable#init"},{"comment":"/**\n   * Updates default periodic uniforms for links\n   * @param  {Number} delta Time delta since last draw\n   * @return {Boolean}      @see src/drawable.js#updateTime\n   */","meta":{"range":[1288,1439],"filename":"link.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005517","name":"LinkDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates default periodic uniforms for links","params":[{"type":{"names":["Number"]},"description":"Time delta since last draw","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"@see src/drawable.js#updateTime"}],"name":"updateTime","longname":"PortalLinkDrawable#updateTime","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","inherits":"LinkDrawable#updateTime","inherited":true,"$longname":"PortalLinkDrawable#updateTime"},{"comment":"/**\n   * Updates the camera transforms for the link drawables\n   * @param  {mat4}   viewProject Combined view and project matrix\n   * @param  {Camera} camera      The camera\n   * @return {void}\n   */","meta":{"range":[745,1108],"filename":"link.js","lineno":24,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005440","name":"LinkDrawable#updateView","type":"MethodDefinition","paramnames":["viewProject","camera"]},"vars":{"":null}},"description":"Updates the camera transforms for the link drawables","params":[{"type":{"names":["mat4"]},"description":"Combined view and project matrix","name":"viewProject"},{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"PortalLinkDrawable#updateView","kind":"function","memberof":"PortalLinkDrawable","scope":"instance","inherits":"LinkDrawable#updateView","inherited":true,"$longname":"PortalLinkDrawable#updateView"}],"$constructor":{"comment":"","meta":{"range":[583,850],"filename":"portal-link.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005981","name":"PortalLinkDrawable","type":"MethodDefinition","paramnames":["start","end","color","startPercent","endPercent"]},"vars":{"":null}},"undocumented":true,"name":"PortalLinkDrawable","longname":"PortalLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"PortalLinkDrawable"}},{"comment":"/**\n * A PortalLinkMesh represents the mesh for a single portal link.\n *\n * @extends {Mesh}\n */","meta":{"range":[3772,4787],"filename":"portal-link.js","lineno":115,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100014448","name":"PortalLinkMesh","type":"ClassDeclaration","paramnames":["gl","start","end","color","startPercent","endPercent"]}},"classdesc":"A PortalLinkMesh represents the mesh for a single portal link.","augments":["Mesh"],"name":"PortalLinkMesh","longname":"PortalLinkMesh","kind":"class","scope":"global","description":"Programatically constructs the mesh for a link between two points","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["vec2"]},"description":"X,Z of the origin point","name":"start"},{"type":{"names":["vec2"]},"description":"X,Z of the destination point","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Origin point percentage","name":"startPercent"},{"type":{"names":["Number"]},"description":"Destination point percentage","name":"endPercent"}],"$longname":"PortalLinkMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"PortalLinkMesh#boundingBox","kind":"function","memberof":"PortalLinkMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"PortalLinkMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"PortalLinkMesh#boundingBoxCenter","kind":"function","memberof":"PortalLinkMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"PortalLinkMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"PortalLinkMesh#draw","kind":"function","memberof":"PortalLinkMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"PortalLinkMesh#draw"}],"$constructor":{"comment":"/**\n   * Programatically constructs the mesh for a link between two points\n   * @param  {context} gl          WebGL context\n   * @param  {vec2} start          X,Z of the origin point\n   * @param  {vec2} end            X,Z of the destination point\n   * @param  {vec4} color          Color of the link\n   * @param  {Number} startPercent Origin point percentage\n   * @param  {Number} endPercent   Destination point percentage\n   */","meta":{"range":[4242,4785],"filename":"portal-link.js","lineno":126,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100014452","name":"PortalLinkMesh","type":"MethodDefinition","paramnames":["gl","start","end","color","startPercent","endPercent"]},"vars":{"":null}},"description":"Programatically constructs the mesh for a link between two points","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["vec2"]},"description":"X,Z of the origin point","name":"start"},{"type":{"names":["vec2"]},"description":"X,Z of the destination point","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Origin point percentage","name":"startPercent"},{"type":{"names":["Number"]},"description":"Destination point percentage","name":"endPercent"}],"name":"PortalLinkMesh","longname":"PortalLinkMesh","kind":"class","scope":"global","undocumented":true,"$longname":"PortalLinkMesh"}},{"comment":"","meta":{"range":[101,228],"filename":"portal.js","lineno":5,"path":"/Users/danielb/repositories/ingress-model-viewer/src/renderer","code":{"id":"astnode100022306","name":"PortalRenderer","type":"MethodDefinition","paramnames":["gl","manager"]},"vars":{"":null}},"undocumented":true,"name":"PortalRenderer","longname":"PortalRenderer","kind":"class","scope":"global","params":[],"$longname":"PortalRenderer"},{"comment":"/**\n * Represents a shader program consisting of a vertex shader and a fragment\n * shader.\n *\n * Manages the shader's attributes and uniforms.\n *\n * @class\n * @extends {GLBound}\n * @param  {context} gl      Webgl context\n * @param  {String} vertex   Vertex shader\n * @param  {String} fragment Fragment shader\n */","meta":{"range":[3372,7180],"filename":"program.js","lineno":123,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021139","name":"Program","type":"ClassDeclaration","paramnames":["gl","vertex","fragment"]}},"classdesc":"Represents a shader program consisting of a vertex shader and a fragment\nshader.\n\nManages the shader's attributes and uniforms.","kind":"class","augments":["GLBound"],"params":[{"type":{"names":["context"]},"description":"Webgl context","name":"gl"},{"type":{"names":["String"]},"description":"Vertex shader","name":"vertex"},{"type":{"names":["String"]},"description":"Fragment shader","name":"fragment"}],"name":"Program","longname":"Program","scope":"global","$longname":"Program","$members":[{"comment":"/**\n   * Fixes an issue with shaders where the shader doesn't set a precision,\n   * leading it to have a mismatch with its counterpart\n   *\n   * I.e. the vertex shader might set a precision, but the fragment shader\n   * does not, leading to precision mismatch errors.\n   * @static\n   * @param  {String} shader The shader to check/fix\n   * @return {String}        The fixed shader, or the original if it needed\n   *                         no patching.\n   */","meta":{"range":[6892,7178],"filename":"program.js","lineno":232,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021565","name":"Program.fixPrecision","type":"MethodDefinition","paramnames":["shader"]},"vars":{"":null}},"description":"Fixes an issue with shaders where the shader doesn't set a precision,\nleading it to have a mismatch with its counterpart\n\nI.e. the vertex shader might set a precision, but the fragment shader\ndoes not, leading to precision mismatch errors.","scope":"static","params":[{"type":{"names":["String"]},"description":"The shader to check/fix","name":"shader"}],"returns":[{"type":{"names":["String"]},"description":"The fixed shader, or the original if it needed\n                        no patching."}],"name":"fixPrecision","longname":"Program.fixPrecision","kind":"function","memberof":"Program","$longname":"Program.fixPrecision"},{"comment":"/**\n   * Initialize the shader\n   *\n   * Parses out shader parameters, compiles the shader, and binds it to\n   * the context.\n   *\n   * @return {void}\n   */","meta":{"range":[3789,5104],"filename":"program.js","lineno":142,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021188","name":"Program#init","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Initialize the shader\n\nParses out shader parameters, compiles the shader, and binds it to\nthe context.","returns":[{"type":{"names":["void"]}}],"name":"init","longname":"Program#init","kind":"function","memberof":"Program","scope":"instance","params":[],"$longname":"Program#init"},{"comment":"/**\n   * Use the program with the given draw function\n   * @param  {Function} fn Function to handle the actual drawing.\n   *                       The programs attributes and uniforms will\n   *                       be passed to the draw function for use.\n   * @return {void}\n   */","meta":{"range":[5392,5601],"filename":"program.js","lineno":186,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021381","name":"Program#use","type":"MethodDefinition","paramnames":["fn"]},"vars":{"":null}},"description":"Use the program with the given draw function","params":[{"type":{"names":["function"]},"description":"Function to handle the actual drawing.\n                      The programs attributes and uniforms will\n                      be passed to the draw function for use.","name":"fn"}],"returns":[{"type":{"names":["void"]}}],"name":"use","longname":"Program#use","kind":"function","memberof":"Program","scope":"instance","$longname":"Program#use"}],"$constructor":{"comment":"","meta":{"range":[3407,3626],"filename":"program.js","lineno":125,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021143","name":"Program","type":"MethodDefinition","paramnames":["gl","vertex","fragment"]},"vars":{"":null}},"undocumented":true,"name":"Program","longname":"Program","kind":"class","scope":"global","params":[],"$longname":"Program"}},{"comment":"/**\n * ... In retrospect, I'm not sure exactly the purpose this class serves\n * It seems that ObjectRenderer inherits from this class, but it's also\n * the only renderer that's currently used.\n * TODO: Revisit this\n *\n * @class\n * @extends {GLBound}\n * @param  {context} gl           A WebGL context\n * @param  {AssetManager} manager An AssetManager to manage GL-bound\n */","meta":{"range":[442,1335],"filename":"renderer.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021842","name":"Renderer","type":"ClassDeclaration","paramnames":["gl","manager"]}},"classdesc":"... In retrospect, I'm not sure exactly the purpose this class serves\nIt seems that ObjectRenderer inherits from this class, but it's also\nthe only renderer that's currently used.\nTODO: Revisit this","kind":"class","augments":["GLBound"],"params":[{"type":{"names":["context"]},"description":"A WebGL context","name":"gl"},{"type":{"names":["AssetManager"]},"description":"An AssetManager to manage GL-bound","name":"manager"}],"name":"Renderer","longname":"Renderer","scope":"global","$longname":"Renderer","$members":[{"comment":"/**\n   * Actually controls the render loop?\n   *\n   * @abstract\n   * @return {void}\n   */","meta":{"range":[1060,1127],"filename":"renderer.js","lineno":44,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021930","name":"Renderer#render","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Actually controls the render loop?","virtual":true,"returns":[{"type":{"names":["void"]}}],"name":"render","longname":"Renderer#render","kind":"function","memberof":"Renderer","scope":"instance","params":[],"$longname":"Renderer#render"},{"comment":"/**\n   * Updates the internal counter of elapsed time.\n   *\n   * @param  {Number} delta Time elapsed since last render call\n   * @return {void}\n   */","meta":{"range":[1283,1333],"filename":"renderer.js","lineno":54,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021938","name":"Renderer#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates the internal counter of elapsed time.","params":[{"type":{"names":["Number"]},"description":"Time elapsed since last render call","name":"delta"}],"returns":[{"type":{"names":["void"]}}],"name":"updateTime","longname":"Renderer#updateTime","kind":"function","memberof":"Renderer","scope":"instance","$longname":"Renderer#updateTime"},{"comment":"/**\n   * Update the internal view and projection matrices\n   *\n   * @param  {Camera} camera    The camera\n   * @return {void}\n   */","meta":{"range":[814,964],"filename":"renderer.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021895","name":"Renderer#updateView","type":"MethodDefinition","paramnames":["camera"]},"vars":{"":null}},"description":"Update the internal view and projection matrices","params":[{"type":{"names":["Camera"]},"description":"The camera","name":"camera"}],"returns":[{"type":{"names":["void"]}}],"name":"updateView","longname":"Renderer#updateView","kind":"function","memberof":"Renderer","scope":"instance","$longname":"Renderer#updateView"}],"$constructor":{"comment":"","meta":{"range":[478,676],"filename":"renderer.js","lineno":17,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100021846","name":"Renderer","type":"MethodDefinition","paramnames":["gl","manager"]},"vars":{"":null}},"undocumented":true,"name":"Renderer","longname":"Renderer","kind":"class","scope":"global","params":[],"$longname":"Renderer"}},{"comment":"/**\n * Reset the GL state to some base state\n * @param  {context} gl A WebGL context\n * @return {void}\n */","meta":{"range":[197,581],"filename":"utils.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022710","name":"exports.resetGL","type":"FunctionDeclaration","paramnames":["gl"]}},"description":"Reset the GL state to some base state","params":[{"type":{"names":["context"]},"description":"A WebGL context","name":"gl"}],"returns":[{"type":{"names":["void"]}}],"name":"resetGL","longname":"resetGL","kind":"function","scope":"global","$longname":"resetGL"},{"comment":"/**\n * A ResonatorLinkDrawable is a LinkDrawable that represents a link\n * between a portal and a resonator\n * @param  {vec2} portalPosition     X,Z of the portal (usually 0,0)\n * @param  {Number} slot             Slot (0-7)\n * @param  {Number} distance         Usually 0-40\n * @param  {vec4} color              Color of the resonator link (TODO: make this disco)\n * @param  {Number} resonatorPercent Percent health of the resonator\n */","meta":{"range":[568,1411],"filename":"resonator-link.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006084","name":"ResonatorLinkDrawable","type":"ClassDeclaration","paramnames":["portalPosition","slot","distance","color","resonatorPercent"]}},"classdesc":"A ResonatorLinkDrawable is a LinkDrawable that represents a link\nbetween a portal and a resonator","params":[{"type":{"names":["vec2"]},"description":"X,Z of the portal (usually 0,0)","name":"portalPosition"},{"type":{"names":["Number"]},"description":"Slot (0-7)","name":"slot"},{"type":{"names":["Number"]},"description":"Usually 0-40","name":"distance"},{"type":{"names":["vec4"]},"description":"Color of the resonator link (TODO: make this disco)","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the resonator","name":"resonatorPercent"}],"name":"ResonatorLinkDrawable","longname":"ResonatorLinkDrawable","kind":"class","scope":"global","$longname":"ResonatorLinkDrawable","$members":[{"comment":"/**\n   * Creates a ResonatorLinkMesh with the given params, and initializes the\n   * texture/program\n   * @param  {AssetManager} manager AssetManager containing the required program/texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1182,1409],"filename":"resonator-link.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006140","name":"ResonatorLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Creates a ResonatorLinkMesh with the given params, and initializes the\ntexture/program","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the required program/texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"ResonatorLinkDrawable#init","kind":"function","memberof":"ResonatorLinkDrawable","scope":"instance","$longname":"ResonatorLinkDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[622,928],"filename":"resonator-link.js","lineno":17,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006088","name":"ResonatorLinkDrawable","type":"MethodDefinition","paramnames":["portalPosition","slot","distance","color","resonatorPercent"]},"vars":{"":null}},"undocumented":true,"name":"ResonatorLinkDrawable","longname":"ResonatorLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"ResonatorLinkDrawable"}},{"comment":"/**\n * A ResonatorLinkMesh is a Mesh that represents a single link between a portal and a resonator\n *\n * TODO: Make disco\n *\n * @extends {Mesh}\n */","meta":{"range":[3814,5041],"filename":"resonator-link.js","lineno":118,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100015345","name":"ResonatorLinkMesh","type":"ClassDeclaration","paramnames":["gl","portalPosition","slot","distance","color","resonatorPercent"]}},"classdesc":"A ResonatorLinkMesh is a Mesh that represents a single link between a portal and a resonator\n\nTODO: Make disco","augments":["Mesh"],"name":"ResonatorLinkMesh","longname":"ResonatorLinkMesh","kind":"class","scope":"global","description":"Construct a resonator link mesh","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["vec2"]},"description":"X,Z of the portal","name":"portalPosition"},{"type":{"names":["Number"]},"description":"Resonator slot (0-7)","name":"slot"},{"type":{"names":["Number"]},"description":"Distance from the portal","name":"distance"},{"type":{"names":["vec4"]},"description":"Color of the resonator link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the resonator","name":"resonatorPercent"}],"$longname":"ResonatorLinkMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"ResonatorLinkMesh#boundingBox","kind":"function","memberof":"ResonatorLinkMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"ResonatorLinkMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"ResonatorLinkMesh#boundingBoxCenter","kind":"function","memberof":"ResonatorLinkMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"ResonatorLinkMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"ResonatorLinkMesh#draw","kind":"function","memberof":"ResonatorLinkMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"ResonatorLinkMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct a resonator link mesh\n   * @param  {context} gl              WebGL context\n   * @param  {vec2} portalPosition     X,Z of the portal\n   * @param  {Number} slot             Resonator slot (0-7)\n   * @param  {Number} distance         Distance from the portal\n   * @param  {vec4} color              Color of the resonator link\n   * @param  {Number} resonatorPercent Percent health of the resonator\n   */","meta":{"range":[4277,5039],"filename":"resonator-link.js","lineno":129,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100015349","name":"ResonatorLinkMesh","type":"MethodDefinition","paramnames":["gl","portalPosition","slot","distance","color","resonatorPercent"]},"vars":{"":null}},"description":"Construct a resonator link mesh","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["vec2"]},"description":"X,Z of the portal","name":"portalPosition"},{"type":{"names":["Number"]},"description":"Resonator slot (0-7)","name":"slot"},{"type":{"names":["Number"]},"description":"Distance from the portal","name":"distance"},{"type":{"names":["vec4"]},"description":"Color of the resonator link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the resonator","name":"resonatorPercent"}],"name":"ResonatorLinkMesh","longname":"ResonatorLinkMesh","kind":"class","scope":"global","undocumented":true,"$longname":"ResonatorLinkMesh"}},{"comment":"/**\n * Set parameters base on some base set of defaults\n * @param {Object} base  Parameter definition with defaults\n * @param {Object} opts  Options (overrides)\n * @param {Boolean} deep Do deep copying on objects.\n * @return {Object} The base object\n */","meta":{"range":[837,1197],"filename":"utils.js","lineno":29,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022792","name":"exports.setParams","type":"FunctionDeclaration","paramnames":["base","opts","deep"]}},"description":"Set parameters base on some base set of defaults","params":[{"type":{"names":["Object"]},"description":"Parameter definition with defaults","name":"base"},{"type":{"names":["Object"]},"description":"Options (overrides)","name":"opts"},{"type":{"names":["Boolean"]},"description":"Do deep copying on objects.","name":"deep"}],"returns":[{"type":{"names":["Object"]},"description":"The base object"}],"name":"setParams","longname":"setParams","kind":"function","scope":"global","$longname":"setParams"},{"comment":"","meta":{"range":[892,941],"filename":"world.js","lineno":40,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006869","name":"shieldeffectbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"shieldeffectbase","longname":"shieldeffectbase","kind":"class","scope":"global","params":[],"$longname":"shieldeffectbase"},{"comment":"/**\n * Represents the shield idle effect\n *\n * Note: This probably should actually be generalized differently...\n * Apparently all three shield effects use the same texture and mesh, but have\n * different programs and variables.\n *\n * So, perhaps a better way would be to have the base class hardcode the texture\n * and mesh internal names, and then the derived classes pick a program and handle\n * the variables.\n *\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n */","meta":{"range":[1077,2251],"filename":"shield-effect.js","lineno":29,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006296","name":"ShieldEffectDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName"]}},"classdesc":"Represents the shield idle effect\n\nNote: This probably should actually be generalized differently...\nApparently all three shield effects use the same texture and mesh, but have\ndifferent programs and variables.\n\nSo, perhaps a better way would be to have the base class hardcode the texture\nand mesh internal names, and then the derived classes pick a program and handle\nthe variables.","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"}],"name":"ShieldEffectDrawable","longname":"ShieldEffectDrawable","kind":"class","scope":"global","$longname":"ShieldEffectDrawable","$members":[{"comment":"/**\n   * Updates the default uniforms\n   *\n   * Note: these are nothing like what's in the apk, just some functions that\n   * happen to look kinda sorta nice\n   * @param  {Number} delta Time since last frame\n   * @return {Boolean}      Returns true to continue the animation.\n   */","meta":{"range":[1712,2249],"filename":"shield-effect.js","lineno":46,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006348","name":"ShieldEffectDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Updates the default uniforms\n\nNote: these are nothing like what's in the apk, just some functions that\nhappen to look kinda sorta nice","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue the animation."}],"name":"updateTime","longname":"ShieldEffectDrawable#updateTime","kind":"function","memberof":"ShieldEffectDrawable","scope":"instance","$longname":"ShieldEffectDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[1134,1424],"filename":"shield-effect.js","lineno":31,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006300","name":"ShieldEffectDrawable","type":"MethodDefinition","paramnames":["meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"ShieldEffectDrawable","longname":"ShieldEffectDrawable","kind":"class","scope":"global","params":[],"$longname":"ShieldEffectDrawable"}},{"comment":"/**\n * A SphereMesh is a Mesh that is a sphere, made of a number of quads determined\n * by the number of horizontal and vertical slices involved in its construction\n *\n * @extends {Mesh}\n */","meta":{"range":[3010,3567],"filename":"sphere.js","lineno":97,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100016039","name":"SphereMesh","type":"ClassDeclaration","paramnames":["gl","radius","vSlices","hSlices"]}},"classdesc":"A SphereMesh is a Mesh that is a sphere, made of a number of quads determined\nby the number of horizontal and vertical slices involved in its construction","augments":["Mesh"],"name":"SphereMesh","longname":"SphereMesh","kind":"class","scope":"global","description":"Construct a sphere","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices","name":"hSlices"}],"$longname":"SphereMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"SphereMesh#boundingBox","kind":"function","memberof":"SphereMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"SphereMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"SphereMesh#boundingBoxCenter","kind":"function","memberof":"SphereMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"SphereMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"SphereMesh#draw","kind":"function","memberof":"SphereMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"SphereMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct a sphere\n   * @param  {context} gl     WebGL context\n   * @param  {Number} radius  Radius of the sphere\n   * @param  {Number} vSlices Number of vertical slices\n   * @param  {Number} hSlices Number of horizontal slices\n   */","meta":{"range":[3290,3565],"filename":"sphere.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100016043","name":"SphereMesh","type":"MethodDefinition","paramnames":["gl","radius","vSlices","hSlices"]},"vars":{"":null}},"description":"Construct a sphere","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices","name":"hSlices"}],"name":"SphereMesh","longname":"SphereMesh","kind":"class","scope":"global","undocumented":true,"$longname":"SphereMesh"}},{"comment":"/**\n * Represents a portal link that follows the surface of a sphere.\n *\n * Hooray for custom shaders, etc!\n *\n * @param  {Number} sphereRadius Radius of the sphere\n * @param  {vec2} start          Lat,lng of the origin portal\n * @param  {vec2} end            Lat,lng of the destination portal\n * @param  {vec4} color          Color of the link\n * @param  {Number} startPercent Percent health of the origin portal\n * @param  {Number} endPercent   Percent health of the destination portal\n */","meta":{"range":[636,1650],"filename":"spherical-portal-link.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006429","name":"SphericalPortalLinkDrawable","type":"ClassDeclaration","paramnames":["sphereRadius","start","end","color","startPercent","endPercent"]}},"classdesc":"Represents a portal link that follows the surface of a sphere.\n\nHooray for custom shaders, etc!","params":[{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"sphereRadius"},{"type":{"names":["vec2"]},"description":"Lat,lng of the origin portal","name":"start"},{"type":{"names":["vec2"]},"description":"Lat,lng of the destination portal","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Percent health of the origin portal","name":"startPercent"},{"type":{"names":["Number"]},"description":"Percent health of the destination portal","name":"endPercent"}],"name":"SphericalPortalLinkDrawable","longname":"SphericalPortalLinkDrawable","kind":"class","scope":"global","$longname":"SphericalPortalLinkDrawable","$members":[{"comment":"/**\n   * Constructs a mesh for the link, then initializes the remaining assets.\n   * @param  {AssetManager} manager AssetManager containing the program/texture\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[1283,1523],"filename":"spherical-portal-link.js","lineno":36,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006502","name":"SphericalPortalLinkDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Constructs a mesh for the link, then initializes the remaining assets.","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the program/texture","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"SphericalPortalLinkDrawable#init","kind":"function","memberof":"SphericalPortalLinkDrawable","scope":"instance","$longname":"SphericalPortalLinkDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[696,1059],"filename":"spherical-portal-link.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006433","name":"SphericalPortalLinkDrawable","type":"MethodDefinition","paramnames":["sphereRadius","start","end","color","startPercent","endPercent"]},"vars":{"":null}},"undocumented":true,"name":"SphericalPortalLinkDrawable","longname":"SphericalPortalLinkDrawable","kind":"class","scope":"global","params":[],"$longname":"SphericalPortalLinkDrawable"}},{"comment":"/**\n * A SphereicalPortalLinkMesh is a Mesh that represents a portal link betwen two portals\n * on the surface of a sphere\n *\n * @extends {Mesh}\n */","meta":{"range":[6307,7563],"filename":"spherical-portal-link.js","lineno":191,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100017454","name":"SphericalPortalLinkMesh","type":"ClassDeclaration","paramnames":["gl","sphereRadius","start","end","color","startPercent","endPercent"]}},"classdesc":"A SphereicalPortalLinkMesh is a Mesh that represents a portal link betwen two portals\non the surface of a sphere","augments":["Mesh"],"name":"SphericalPortalLinkMesh","longname":"SphericalPortalLinkMesh","kind":"class","scope":"global","description":"Construct a spherical portal link","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"sphereRadius"},{"type":{"names":["vec2"]},"description":"lat,lng of the origin point","name":"start"},{"type":{"names":["vec2"]},"description":"lat,lng of the destionation point","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Origin portal health percentage","name":"startPercent"},{"type":{"names":["Number"]},"description":"Destination portal health percentage","name":"endPercent"}],"$longname":"SphericalPortalLinkMesh","$members":[{"comment":"/**\n   * Calculate the bounding box of the mesh\n   * @param  {Number} coordAttribute Index of the attribute representing vertex position\n   * @return {Object}                An object consisting of two arrays of the same length\n   *                                 as the coordinate attribute, representing min and max\n   *                                 coordinates.\n   */","meta":{"range":[1540,2307],"filename":"mesh.js","lineno":50,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012402","name":"Mesh#boundingBox","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the bounding box of the mesh","params":[{"type":{"names":["Number"]},"description":"Index of the attribute representing vertex position","name":"coordAttribute"}],"returns":[{"type":{"names":["Object"]},"description":"An object consisting of two arrays of the same length\n                                as the coordinate attribute, representing min and max\n                                coordinates."}],"name":"boundingBox","longname":"SphericalPortalLinkMesh#boundingBox","kind":"function","memberof":"SphericalPortalLinkMesh","scope":"instance","inherits":"Mesh#boundingBox","inherited":true,"$longname":"SphericalPortalLinkMesh#boundingBox"},{"comment":"/**\n   * Calculate the center of the bounding box.\n   * @param  {Number} coordAttribute Index of the attribute represention vertex position.\n   * @return {mixed}                 A vector of the same size as the position attribute,\n   *                                 representing the center of the bounding box.\n   */","meta":{"range":[3191,3409],"filename":"mesh.js","lineno":106,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012633","name":"Mesh#boundingBoxCenter","type":"MethodDefinition","paramnames":["coordAttribute"]},"vars":{"":null}},"description":"Calculate the center of the bounding box.","params":[{"type":{"names":["Number"]},"description":"Index of the attribute represention vertex position.","name":"coordAttribute"}],"returns":[{"type":{"names":["mixed"]},"description":"A vector of the same size as the position attribute,\n                                representing the center of the bounding box."}],"name":"boundingBoxCenter","longname":"SphericalPortalLinkMesh#boundingBoxCenter","kind":"function","memberof":"SphericalPortalLinkMesh","scope":"instance","inherits":"Mesh#boundingBoxCenter","inherited":true,"$longname":"SphericalPortalLinkMesh#boundingBoxCenter"},{"comment":"/**\n   * Given a set of locations from the currently-active shader, draw this mesh\n   * @param {Object} locations A hash of locations by name\n   * @param {String} mode (optional) The draw mode\n   *                      Either MODE_TRIANGLES or MODE_LINES\n   * @return {void}\n   */","meta":{"range":[932,1159],"filename":"mesh.js","lineno":33,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100012358","name":"Mesh#draw","type":"MethodDefinition","paramnames":["locations","mode"]},"vars":{"":null}},"description":"Given a set of locations from the currently-active shader, draw this mesh","params":[{"type":{"names":["Object"]},"description":"A hash of locations by name","name":"locations"},{"type":{"names":["String"]},"description":"(optional) The draw mode\n                     Either MODE_TRIANGLES or MODE_LINES","name":"mode"}],"returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"SphericalPortalLinkMesh#draw","kind":"function","memberof":"SphericalPortalLinkMesh","scope":"instance","inherits":"Mesh#draw","inherited":true,"$longname":"SphericalPortalLinkMesh#draw"}],"$constructor":{"comment":"/**\n   * Construct a spherical portal link\n   * @param  {context} gl          WebGL context\n   * @param  {Number} sphereRadius Radius of the sphere\n   * @param  {vec2} start          lat,lng of the origin point\n   * @param  {vec2} end            lat,lng of the destionation point\n   * @param  {vec4} color          Color of the link\n   * @param  {Number} startPercent Origin portal health percentage\n   * @param  {Number} endPercent   Destination portal health percentage\n   */","meta":{"range":[6835,7561],"filename":"spherical-portal-link.js","lineno":203,"path":"/Users/danielb/repositories/ingress-model-viewer/src/mesh","code":{"id":"astnode100017458","name":"SphericalPortalLinkMesh","type":"MethodDefinition","paramnames":["gl","sphereRadius","start","end","color","startPercent","endPercent"]},"vars":{"":null}},"description":"Construct a spherical portal link","params":[{"type":{"names":["context"]},"description":"WebGL context","name":"gl"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"sphereRadius"},{"type":{"names":["vec2"]},"description":"lat,lng of the origin point","name":"start"},{"type":{"names":["vec2"]},"description":"lat,lng of the destionation point","name":"end"},{"type":{"names":["vec4"]},"description":"Color of the link","name":"color"},{"type":{"names":["Number"]},"description":"Origin portal health percentage","name":"startPercent"},{"type":{"names":["Number"]},"description":"Destination portal health percentage","name":"endPercent"}],"name":"SphericalPortalLinkMesh","longname":"SphericalPortalLinkMesh","kind":"class","scope":"global","undocumented":true,"$longname":"SphericalPortalLinkMesh"}},{"comment":"/**\n * A gl-bound texture\n * Supports most (all?) of the texture binding options.\n * Also generates mipmaps if the texture requires it.\n *\n * @class\n * @param  {context} gl   A WebGL context\n * @param  {Object} info  Texture parameters\n * @param  {Images} image An image to use as the texture\n */","meta":{"range":[332,1786],"filename":"texture.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022477","name":"Texture","type":"ClassDeclaration","paramnames":["gl","info","image"]}},"classdesc":"A gl-bound texture\nSupports most (all?) of the texture binding options.\nAlso generates mipmaps if the texture requires it.","kind":"class","params":[{"type":{"names":["context"]},"description":"A WebGL context","name":"gl"},{"type":{"names":["Object"]},"description":"Texture parameters","name":"info"},{"type":{"names":["Images"]},"description":"An image to use as the texture","name":"image"}],"name":"Texture","longname":"Texture","scope":"global","$longname":"Texture","$members":[{"comment":"/**\n   * NYI: TODO\n   *\n   * @return {void}\n   */","meta":{"range":[1704,1784],"filename":"texture.js","lineno":61,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022695","name":"Texture#dispose","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"NYI: TODO","returns":[{"type":{"names":["void"]}}],"name":"dispose","longname":"Texture#dispose","kind":"function","memberof":"Texture","scope":"instance","params":[],"$longname":"Texture#dispose"},{"comment":"/**\n   * Bind the texture to a particular texture index\n   *\n   * @param  {Number} index Texture index to bind to\n   * @return {void}\n   */","meta":{"range":[1493,1648],"filename":"texture.js","lineno":49,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022657","name":"Texture#use","type":"MethodDefinition","paramnames":["index"]},"vars":{"":null}},"description":"Bind the texture to a particular texture index","params":[{"type":{"names":["Number"]},"description":"Texture index to bind to","name":"index"}],"returns":[{"type":{"names":["void"]}}],"name":"use","longname":"Texture#use","kind":"function","memberof":"Texture","scope":"instance","$longname":"Texture#use"}],"$constructor":{"comment":"","meta":{"range":[367,1347],"filename":"texture.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100022481","name":"Texture","type":"MethodDefinition","paramnames":["gl","info","image"]},"vars":{"":null}},"undocumented":true,"name":"Texture","longname":"Texture","kind":"class","scope":"global","params":[],"$longname":"Texture"}},{"comment":"/**\n * A TexturedDrawable is a Drawable with a specific texture\n *\n * @param  {String} programName Program internal name\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n */","meta":{"range":[267,1039],"filename":"textured.js","lineno":10,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006660","name":"TexturedDrawable","type":"ClassDeclaration","paramnames":["programName","meshName","textureName"]}},"classdesc":"A TexturedDrawable is a Drawable with a specific texture","params":[{"type":{"names":["String"]},"description":"Program internal name","name":"programName"},{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"}],"name":"TexturedDrawable","longname":"TexturedDrawable","kind":"class","scope":"global","$longname":"TexturedDrawable","$members":[{"comment":"/**\n   * Draw the textured object\n   *\n   * @return {void}\n   */","meta":{"range":[530,651],"filename":"textured.js","lineno":22,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006688","name":"TexturedDrawable#draw","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"description":"Draw the textured object","returns":[{"type":{"names":["void"]}}],"name":"draw","longname":"TexturedDrawable#draw","kind":"function","memberof":"TexturedDrawable","scope":"instance","params":[],"$longname":"TexturedDrawable#draw"}],"$constructor":{"comment":"","meta":{"range":[311,459],"filename":"textured.js","lineno":11,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006664","name":"TexturedDrawable","type":"MethodDefinition","paramnames":["programName","meshName","textureName"]},"vars":{"":null}},"undocumented":true,"name":"TexturedDrawable","longname":"TexturedDrawable","kind":"class","scope":"global","params":[],"$longname":"TexturedDrawable"}},{"comment":"/**\n * A sphere with a texture mapped to it\n *\n * @param  {String} textureName Internal name of the texture to use\n * @param  {Number} radius      Radius of the sphere\n * @param  {Number} vSlices     Number of vertical slices\n * @param  {Number} hSlices     Number of horizontal slices\n */","meta":{"range":[458,1071],"filename":"textured-sphere.js","lineno":15,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006587","name":"TexturedSphereDrawable","type":"ClassDeclaration","paramnames":["textureName","radius","vSlices","hSlices"]}},"classdesc":"A sphere with a texture mapped to it","params":[{"type":{"names":["String"]},"description":"Internal name of the texture to use","name":"textureName"},{"type":{"names":["Number"]},"description":"Radius of the sphere","name":"radius"},{"type":{"names":["Number"]},"description":"Number of vertical slices","name":"vSlices"},{"type":{"names":["Number"]},"description":"Number of horizontal slices","name":"hSlices"}],"name":"TexturedSphereDrawable","longname":"TexturedSphereDrawable","kind":"class","scope":"global","$longname":"TexturedSphereDrawable","$members":[{"comment":"/**\n   * Create a sphere mesh and initialize the other resources\n   * @param  {AssetManager} manager AssetManager containing the texture/program\n   * @return {Boolean}              Success/failure\n   */","meta":{"range":[902,1069],"filename":"textured-sphere.js","lineno":28,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006623","name":"TexturedSphereDrawable#init","type":"MethodDefinition","paramnames":["manager"]},"vars":{"":null}},"description":"Create a sphere mesh and initialize the other resources","params":[{"type":{"names":["AssetManager"]},"description":"AssetManager containing the texture/program","name":"manager"}],"returns":[{"type":{"names":["Boolean"]},"description":"Success/failure"}],"name":"init","longname":"TexturedSphereDrawable#init","kind":"function","memberof":"TexturedSphereDrawable","scope":"instance","$longname":"TexturedSphereDrawable#init"}],"$constructor":{"comment":"","meta":{"range":[516,693],"filename":"textured-sphere.js","lineno":16,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006591","name":"TexturedSphereDrawable","type":"MethodDefinition","paramnames":["textureName","radius","vSlices","hSlices"]},"vars":{"":null}},"undocumented":true,"name":"TexturedSphereDrawable","longname":"TexturedSphereDrawable","kind":"class","scope":"global","params":[],"$longname":"TexturedSphereDrawable"}},{"comment":"/**\n * A vertex attribute\n *\n * @param  {String} name Name of the attribute\n * @param  {Number} size Size of the attribute (in bytes)\n * @param  {Number} type The type of vertex attribute\n */","meta":{"range":[192,321],"filename":"vertex-attribute.js","lineno":8,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100023043","name":"VertexAttribute","type":"ClassDeclaration","paramnames":["name","size","type"]}},"classdesc":"A vertex attribute","params":[{"type":{"names":["String"]},"description":"Name of the attribute","name":"name"},{"type":{"names":["Number"]},"description":"Size of the attribute (in bytes)","name":"size"},{"type":{"names":["Number"]},"description":"The type of vertex attribute","name":"type"}],"name":"VertexAttribute","longname":"VertexAttribute","kind":"class","scope":"global","$longname":"VertexAttribute","$constructor":{"comment":"","meta":{"range":[218,319],"filename":"vertex-attribute.js","lineno":9,"path":"/Users/danielb/repositories/ingress-model-viewer/src","code":{"id":"astnode100023046","name":"VertexAttribute","type":"MethodDefinition","paramnames":["name","size","type"]},"vars":{"":null}},"undocumented":true,"name":"VertexAttribute","longname":"VertexAttribute","kind":"class","scope":"global","params":[],"$longname":"VertexAttribute"}},{"comment":"/**\n * Various world drawables\n *\n * Includes Portal, ShieldEffect, waypoints, resonators, and artifact glows\n * @type {Object}\n */","meta":{"range":[358,368],"filename":"world.js","lineno":13,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100006803","name":"World","type":"ObjectExpression","value":"{}"}},"description":"Various world drawables\n\nIncludes Portal, ShieldEffect, waypoints, resonators, and artifact glows","type":{"names":["Object"]},"name":"World","longname":"World","kind":"member","scope":"global","$longname":"World"},{"comment":"","meta":{"range":[1037,1098],"filename":"inventory.js","lineno":43,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100005289","name":"xmbase","type":"MethodDefinition","paramnames":[]},"vars":{"":null}},"undocumented":true,"name":"xmbase","longname":"xmbase","kind":"class","scope":"global","params":[],"$longname":"xmbase"},{"comment":"/**\n * An XmDrawable is a drawable representing the animate \"xm core\" of inventory items\n *\n * @param  {String} meshName    Mesh internal name\n * @param  {String} textureName Texture internal name\n * @param  {vec4} teamColor     Color of the xm glow.\n * @return {void}\n */","meta":{"range":[563,1189],"filename":"xm.js","lineno":18,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100007103","name":"XmDrawable","type":"ClassDeclaration","paramnames":["meshName","textureName","teamColor"]}},"classdesc":"An XmDrawable is a drawable representing the animate \"xm core\" of inventory items","params":[{"type":{"names":["String"]},"description":"Mesh internal name","name":"meshName"},{"type":{"names":["String"]},"description":"Texture internal name","name":"textureName"},{"type":{"names":["vec4"]},"description":"Color of the xm glow.","name":"teamColor"}],"returns":[{"type":{"names":["void"]}}],"name":"XmDrawable","longname":"XmDrawable","kind":"class","scope":"global","$longname":"XmDrawable","$members":[{"comment":"/**\n   * Animates the xm core\n   * @param  {Number} delta Time since last frame\n   * @return {Boolean}      Returns true to continue the animation.\n   */","meta":{"range":[1036,1187],"filename":"xm.js","lineno":32,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100007154","name":"XmDrawable#updateTime","type":"MethodDefinition","paramnames":["delta"]},"vars":{"":null}},"description":"Animates the xm core","params":[{"type":{"names":["Number"]},"description":"Time since last frame","name":"delta"}],"returns":[{"type":{"names":["Boolean"]},"description":"Returns true to continue the animation."}],"name":"updateTime","longname":"XmDrawable#updateTime","kind":"function","memberof":"XmDrawable","scope":"instance","$longname":"XmDrawable#updateTime"}],"$constructor":{"comment":"","meta":{"range":[610,876],"filename":"xm.js","lineno":20,"path":"/Users/danielb/repositories/ingress-model-viewer/src/drawable","code":{"id":"astnode100007107","name":"XmDrawable","type":"MethodDefinition","paramnames":["meshName","textureName","teamColor"]},"vars":{"":null}},"undocumented":true,"name":"XmDrawable","longname":"XmDrawable","kind":"class","scope":"global","params":[],"$longname":"XmDrawable"}}],"symbols":["Animation","Animation#chain","Animation#pause","Animation#start","Animation#step","Animation#stop","Animator","Animator#addAnimation","artifact","AssetLoader","AssetLoader.loadResource","AssetLoader#getAsset","AssetLoader#loadAsset","AssetLoader#loadAssetGroup","AssetManager","AssetManager#addAssets","AssetManager#addMesh","AssetManager#addProgram","AssetManager#addTexture","AssetManager#generateManifest","AssetManager#loadAll","AssetManager#loadMesh","AssetManager#loadProgram","AssetManager#loadTexture","AtmosphereDrawable","AtmosphereDrawable#init","AtmosphereDrawable#updateView","bicoloredbase","BicoloredDrawable","Camera","Camera#addAnimation","Camera#lookAt","Camera#setDimensions","Camera#setFar","Camera#setFieldOfView","Camera#setPosition","Camera#translate","Constants","Constants.anomalyColors","Constants.artifactGlowColors","Constants.Mesh","Constants.Program","Constants.qualityColors","Constants.teamColors","Constants.Texture","Constants.xmColors","disco","Drawable","Drawable#addAnimation","Drawable#addChild","Drawable#dispose","Drawable#draw","Drawable#drawFaces","Drawable#drawLines","Drawable#init","Drawable#rotate","Drawable#scalarScale","Drawable#scale","Drawable#setDrawFn","Drawable#setDrawMode","Drawable#setRotation","Drawable#setScalarScale","Drawable#setScale","Drawable#setTranslation","Drawable#setUniform","Drawable#translate","Drawable#translateX","Drawable#translateY","Drawable#translateZ","Drawable#updateMatrix","Drawable#updateRay","Drawable#updateTime","Drawable#updateView","Drawable#updateWorld","Ease","Ease.get","Ease.getBackIn","Ease.getBackInOut","Ease.getBackOut","Ease.getElasticIn","Ease.getElasticInOut","Ease.getElasticOut","Ease.getPowIn","Ease.getPowInOut","Ease.getPowOut","Ease.none","Engine","Engine#capture","Engine#demo","Engine#demoEntities","Engine#draw","Engine#preload","Engine#render","Engine#rescale","Engine#resize","Engine#stop","Engine#updateView","Entity","entitybase","ExtraShield","FileMesh","FileMesh#boundingBox","FileMesh#boundingBoxCenter","FileMesh#draw","FlipCardAda","FlipCardJarvis","GLAttribute","GLAttribute#bindBuffer","GLAttribute#deleteWithin","GLAttribute#draw","GLAttribute#eachAttribute","GLAttribute#map","GLAttribute#setValues","GLAttribute#unbindBuffer","GLAttribute#update","GLAttribute#updateBuffer","GLAttribute#updateValues","GLAttribute#validate","GLBound","GLBuffer","GLBuffer#bindBuffer","GLBuffer#deleteWithin","GLBuffer#map","GLBuffer#setValues","GLBuffer#unbindBuffer","GLBuffer#update","GLBuffer#updateBuffer","GLIndex","GLIndex#bindBuffer","GLIndex#deleteWithin","GLIndex#draw","GLIndex#map","GLIndex#setValues","GLIndex#unbindBuffer","GLIndex#update","GLIndex#updateBuffer","glowrampbase","GlowrampDrawable","GlowrampDrawable#updateTime","GlowrampProgram","GlowrampProgram#init","GlowrampProgram#use","InterestCapsule","Inventory","itembase","itembase","LinkDrawable","LinkDrawable#updateTime","LinkDrawable#updateView","makeArtifact","media","Mesh","Mesh.MODE_LINES","Mesh.MODE_TRIANGLES","Mesh#boundingBox","Mesh#boundingBoxCenter","Mesh#draw","ObjectRenderer","OpaqueProgram","OpaqueProgram#init","OpaqueProgram#use","OrbitControls","OrbitControls#disable","OrbitControls#enable","OrbitControls#updateView","ornamentbase","OrnamentDrawable","ParticleDrawable","ParticleDrawable#draw","ParticlePortalDrawable","ParticlePortalDrawable#init","ParticlePortalDrawable#updateTime","ParticlePortalDrawable#updateView","ParticlePortalMesh","ParticlePortalMesh#boundingBox","ParticlePortalMesh#boundingBoxCenter","ParticlePortalMesh#draw","PlaneMesh","PlaneMesh#boundingBox","PlaneMesh#boundingBoxCenter","PlaneMesh#draw","PortalEntity","PortalLinkDrawable","PortalLinkDrawable#init","PortalLinkDrawable#updateTime","PortalLinkDrawable#updateView","PortalLinkMesh","PortalLinkMesh#boundingBox","PortalLinkMesh#boundingBoxCenter","PortalLinkMesh#draw","PortalRenderer","Program","Program.fixPrecision","Program#init","Program#use","Renderer","Renderer#render","Renderer#updateTime","Renderer#updateView","resetGL","ResonatorLinkDrawable","ResonatorLinkDrawable#init","ResonatorLinkMesh","ResonatorLinkMesh#boundingBox","ResonatorLinkMesh#boundingBoxCenter","ResonatorLinkMesh#draw","setParams","shieldeffectbase","ShieldEffectDrawable","ShieldEffectDrawable#updateTime","SphereMesh","SphereMesh#boundingBox","SphereMesh#boundingBoxCenter","SphereMesh#draw","SphericalPortalLinkDrawable","SphericalPortalLinkDrawable#init","SphericalPortalLinkMesh","SphericalPortalLinkMesh#boundingBox","SphericalPortalLinkMesh#boundingBoxCenter","SphericalPortalLinkMesh#draw","Texture","Texture#dispose","Texture#use","TexturedDrawable","TexturedDrawable#draw","TexturedSphereDrawable","TexturedSphereDrawable#init","VertexAttribute","World","xmbase","XmDrawable","XmDrawable#updateTime"]}},"app":{"title":"Ingress Model Viewer","routing":{"method":"query","caseSensitive":true},"entrance":"api:engine","server":"github","base":"/ingress-model-viewer/","meta":null},"template":{"name":"Docma Default Template","version":"1.7.0","author":"Onur Yıldırım (onur@cutepilot.com)","license":"MIT","main":"index.html","options":{"outline":"tree","navItems":[{"label":"Documentation","iconClass":"ico-book","items":[{"label":"Core","href":"?api=engine"},{"label":"AssetLoader","href":"?api=assets"},{"label":"Utilities","href":"?api=utilities"},{"label":"Drawables","href":"?api=drawables"},{"label":"Constants","href":"?api=constants"},{"label":"Internals","href":"?api=internals"}]},{"label":"Github","href":"https://github.com/DeviateFish/ingress-model-viewer/","iconClass":"ico-github"}],"title":"","sidebar":true,"collapsed":false,"badges":true,"symbolMeta":false,"search":true,"navbar":true}},"_":{"partials":{"api":"docma-api","content":"docma-content","notFound":"docma-404"},"elementID":"docma-main","contentElementID":"docma-content","logsEnabled":false}};
!function(){var e={};e.createChild=function(e,t,n){n=n||{};var o=document.createElement(t||"div");return Object.keys(n).forEach(function(e){o[e]=n[e]}),e.appendChild(o),o},e.getDocmaElem=function(){var t=document.getElementById(docma._.elementID);return t||(t=e.createChild(document.body,"div",{id:docma._.elementID})),t},e.getContentElem=function(){var e=document.getElementById(docma._.contentElementID);if(!e)throw new Error("Partial "+docma._.partials.content+' should have an element with id="'+docma._.contentElementID+'".');return e},e.loadCompiledContent=function(t){e.getDocmaElem().innerHTML=t},e.loadContent=function(t){e.getContentElem().innerHTML=t,e.scrollTo()},e.getOffset=function(e){var t="object"==typeof e?e:document.getElementById(e);if(t){var n=t.getBoundingClientRect();if(n.width||n.height||t.getClientRects().length){var o=document.documentElement;return{top:n.top+window.pageYOffset-o.clientTop,left:n.left+window.pageXOffset-o.clientLeft}}}},e.scrollTo=function(t){if(!(t=(t||window.location.hash||"").replace(/^#/,"")))return void(document.body.scrollTop=0);var n=document.getElementById(t);n&&(document.body.scrollTop=e.getOffset(n).top)},e.fixAnchors=function(){docma.app.base&&setTimeout(function(){var e,t,n=document.querySelectorAll('a[href^="#"]');for(e=0;e<n.length;e++){t=n[e];var o=t.getAttribute("href");"#"===o.slice(0,1)&&o.length>1&&(o=window.location.pathname+(window.location.search||"")+o,t.setAttribute("href",o))}},50)},docma.dom=Object.freeze(e)}();
!function(){dust.filters=dust.filters||{},dust.filters.$pt=function(t){return docma.utils.parseTicks(t)},dust.filters.$pnl=function(t){return docma.utils.parseNewLines(t,{keepIfSingle:!0})},dust.filters.$pl=function(t){return docma.utils.parseLinks(t)},dust.filters.$tl=function(t){return docma.utils.trimLeft(t)},dust.filters.$p=function(t){return docma.utils.parse(t,{keepIfSingle:!0})},dust.filters.$nt=function(t){return docma.utils.normalizeTabs(t)},dust.filters.$desc=function(t){return docma.utils.parse(t.classdesc||t.description||"")},dust.filters.$def=function(t){return t.optional?String(t.defaultvalue):""};var t=/true|false|null|undefined|Infinity|NaN|\d+|Number\.\w+|Math\.(PI|E|LN(2|10)|LOG(2|10)E|SQRT(1_)?2)|\[.*?]|\{.*?}|new [a-zA-Z]+.*|\/.+\/[gmiu]*|Date\.(now\(\)|UTC\(.*)|window|document/;dust.filters.$val=function(e){var n=docma.utils.notate(e,"meta.code.value");if(void 0===n)return"";if("string"!=typeof n)return n;var i=docma.utils.notate(e,"type.names")||[];return!/['"`]/.test(n.slice(0,1))&&i.indexOf("String")>=0&&(1===i.length||-1===t.indexOf(n))?'"'+n+'"':n},dust.filters.$id=function(t){var e;if("string"==typeof t)e=t;else{e=(docma.utils.isConstructor(t)?"new-":"")+t.$longname}return e.replace(/ /g,"-")}}();
!function(){function o(o,e,n){return e?(o&&"/"!==e.slice(0,1)&&(e="/"+e),n&&"/"!==e.slice(-1)&&(e+="/"),e):o||n?"/":""}function e(o,e){e=void 0===e?window.location.search||"":e,"?"===e.slice(0,1)&&(e=e.slice(1)),o=o.replace(/[\[\]]/g,"\\$&");var n=new RegExp("&?"+o+"(=([^&#]*)|&|#|$)"),a=n.exec(e);return a&&a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):""}Object.defineProperty(docma,"location",{configurable:!1,get:function(){var n=o(!0,window.location.pathname,!0),a=o(!0,docma.app.base,!0),c=n;return n.slice(0,a.length)===a&&(c=n.slice(a.length-1,n.length)),{host:window.location.host,hostname:window.location.hostname,origin:window.location.origin,port:window.location.port,protocol:(window.location.protocol||"").replace(/:$/,""),entrance:o(!0,docma.app.entrance,!1),base:a,hash:(window.location.hash||"").replace(/^#/,""),query:(window.location.search||"").replace(/^\?/,""),href:window.location.href,fullpath:n,pathname:c,path:c+(window.location.search||""),getQuery:e}}}),docma.location=Object.freeze(docma.location)}();
!function(){function e(e){return e&&""!==e.trim()?e:null}function n(e){return(e||"").replace(/([^>]+>)?~?(.*)/,"$2")}function t(e){return e}var r={};r.notate=function(e,n){if("object"==typeof e){var t,i=Array.isArray(n)?n:n.split("."),a=i[0];if(a)return t=e[a],i.length>1?(i.shift(),r.notate(t,i)):t}},r.getName=function(e){if(e.alias){var t=n(r.notate(e,"meta.code.name")||"");if(t)return t.replace(/.*?[#.~:](\w+)$/i,"$1")}return e.name},r.getLongName=function(e){var t=n(e.longname);if(e.alias){var i=n(r.notate(e,"meta.code.name")||"");if(!i)return t;var a=n(e.memberof||"");if(!a)return i;var o=new RegExp("^"+a+"[#\\.~:]"),s="instance"===e.scope?"#":".";return o.test(i)?i:a+s+i}return t},r.getFullName=r.getLongName,r.getCodeName=function(e){return n(r.notate(e,"meta.code.name")||"")||r.getLongName(e)},r.getSymbolByName=function(e,n){var t,i;for(t=0;t<e.length;t++){if(i=e[t],i.name===n||i.longname===n||r.getFullName(i)===n)return i;if(i.$members){var a=r.getSymbolByName(i.$members,n);if(a)return a}}return null},r.isDeprecated=function(e){return e.deprecated},r.isGlobal=function(e){return"global"===e.scope},r.isNamespace=function(e){return"namespace"===e.kind},r.isModule=function(e){return"module"===e.kind},r.isClass=function(e){return!r.isConstructor(e)&&("class"===e.kind||"ClassDeclaration"===r.notate(e,"meta.code.type"))},r.isConstructor=function(e){return"class"===e.kind&&"MethodDefinition"===r.notate(e,"meta.code.type")},r.isStaticMember=function(e){return"static"===e.scope},r.isStatic=r.isStaticMember,r.isInner=function(e){return"inner"===e.scope},r.isInstanceMember=function(e){return"instance"===e.scope},r.isMethod=function(e){var n=r.notate(e,"meta.code.type");return"function"===e.kind||"MethodDefinition"===n||"FunctionExpression"===n},r.isFunction=r.isMethod,r.isInstanceMethod=function(e){return r.isInstanceMember(e)&&r.isMethod(e)},r.isStaticMethod=function(e){return r.isStaticMember(e)&&r.isMethod(e)},r.isProperty=function(e){return"member"===e.kind},r.isInstanceProperty=function(e){return r.isInstanceMember(e)&&r.isProperty(e)},r.isStaticProperty=function(e){return r.isStaticMember(e)&&r.isProperty(e)},r.isTypeDef=function(e){return"typedef"===e.kind},r.isCustomType=r.isTypeDef,r.isEnum=function(e){return e.isEnum},r.isReadOnly=function(e){return e.readonly},r.isPublic=function(e){return"string"!=typeof e.access||"public"===e.access},r.isPrivate=function(e){return"private"===e.access},r.isProtected=function(e){return"protected"===e.access},r.isUndocumented=function(e){return!e.comments},r.hasDescription=function(n){return Boolean(e(n.classdesc)||e(n.description))},r.getTypes=function(e){if("class"===e.kind)return"class";var n=r.notate(e,"type.names")||[];return n=n.map(function(e){return e.replace(/\.</g,"<")}).join("|"),e.isEnum?"enum<"+n+">":n},r.getReturnTypes=function(e){var n=e.returns;if(!Array.isArray(n))return"void";var t,i=n.reduce(function(e,n){return t=r.notate(n,"type.names"),Array.isArray(t)?e.concat(t):e},[]);return i.length>0?i.join("|"):"void"},r.trimLeft=function(e){return e.replace(/^[\s\n\r\-—]*/,"")},r.parseTicks=function(e){return e.replace(/(```\s*)([\s\S]*?)(\s*```)/g,function(e,n,t){return r.normalizeTabs(r._wrapEscapeCode(t,!0).replace(/`/g,"&#x60;"))}).replace(/(`)(.*?)(`)/g,function(e,n,t){return r._wrapEscapeCode(t)})},r.parseNewLines=function(e,n){return n=n||{},r._tokenize(e,function(e,t){if(t)return e;var r=e.split(/\n{2,}/);return r.length<=1&&n.keepIfSingle?e:r.map(function(e){return"<p>"+e+"</p>"}).join("")}).join("")},r.parseLinks=function(e,n){n=n||{};var t=/\{@link +([^}]*?)\}/g,i=e.replace(t,function(e,t){var r,i,a=t.split("|");return 1===a.length?r=i=a[0].trim():(r=a[0].trim(),i=a[1].trim()),'<a href="'+r+'"'+(n.target?' target="'+n.target+'"':"")+">"+i+"</a>"});return r.parseTicks(i)},r.parse=function(e,n){return n=n||{},e=r.trimLeft(e),e=r.parseNewLines(e,n),e=r.parseTicks(e),r.parseLinks(e,n)},r.normalizeTabs=function(e){var n=e.match(/^\s*/gm),t=1/0;if(n.forEach(function(e,n){e=e.replace(/\t/g,"  "),n>0&&(t=Math.min(e.length,t))}),t!==1/0){var r=new RegExp("^\\s{"+t+"}","g");e=e.replace(r,"")}e=e.replace(/^\s*/,"");var i;return e.replace(/(\n+)(\s+)/gm,function(e,n,t){return i=t.replace(/\t/g,"  "),i=new Array(i.length-i.length%2+1).join(" "),n+i})},r.getKeywords=function(e){if("string"==typeof e)return e.toLowerCase();var n=r.getFullName(e)+" "+e.longname+" "+e.name+" "+(e.alias||"")+" "+(e.memberOf||"")+" "+(e.kind||"")+" "+(e.scope||"")+" "+(e.classdesc||"")+" "+(e.description||"")+" "+(e.filename||"")+" "+(e.readonly?"readonly":"")+(e.isEnum?"enum":"");return r.isConstructor(e)&&(n+=" constructor"),r.isMethod(e)&&(n+=" method"),r.isProperty(e)&&(n+=" property"),n.replace(/[><"'`\n\r]/g,"").toLowerCase()},r.getCodeFileInfo=function(e){return{filename:r.notate(e,"meta.filename"),lineno:r.notate(e,"meta.lineno"),path:r.notate(e,"meta.path")}},r.listType=function(e){return e.map(function(e){return r._wrapEscapeCode(e)}).join(", ")},r.listTypeDesc=function(e){if(!e||0===e.length)return"";var n,t=e.map(function(e){return n=r.parse(e.description||"",{keepIfSingle:!0}),n&&(n="&nbsp;&nbsp;—&nbsp;&nbsp;"+n),r._wrapEscapeCode(e.type.names.join("|"))+n});return t.length>1?"<ul>\n"+t.join("</li>\n<li>")+"\n</ul>":t},r._find=function(e,n){if(!e||!n)return null;var t,r,i=null;for(t=0;t<e.length;t++)if((r=e[t])&&"object"==typeof r){for(var a in n)if(void 0!==n[a]&&n.hasOwnProperty(a)){if(n[a]!==r[a]){i=null;break}i=r}if(i)break}return i},r._assign=function(e,n,t){e=e||{};var r;for(r in n)n.hasOwnProperty(r)&&(t?Object.defineProperty(e,r,{enumerable:!0,value:n[r]}):e[r]=n[r]);return e},r._values=function(e){if(Array.isArray(e))return e;var n,t=[];for(n in e)e.hasOwnProperty(n)&&t.push(e[n]);return t},r._wrapEscapeCode=function(e,n){return e=e.replace(/</g,"&lt;").replace(/>/g,"&gt;"),e="<code>"+e+"</code>",n?"<pre>"+e+"</pre>":e},r._tokenize=function(e,n){"function"!=typeof n&&(n=t);if(e.indexOf("```")<0)return[n(e,!1)];var r,i="```".length,a="",o="",s=[],u=!1;for(r=0;r<e.length;r++)a+=e[r],o+=e[r],a.length>i&&(a=a.slice(-i)),"```"===a&&(u=!u,u?(s.push(n(o.slice(0,-i),!1)),o=a):(s.push(n(o,!0)),o=""));return s},docma.utils=r}();
!function(){function t(t,e){l.info("Event:",t,e?e[0]:""),y.trigger(t,e)}function e(t,n){if(n&&!(u.indexOf(n)<0)){if(t)docma.app.routing.caseSensitive||(t=t.toLowerCase());else{if(n!==e.Type.API)return;t=f}var o=p._find(docma.routes,{type:n,name:t});o&&p._assign(this,o)}}function n(t,e){dust.render(t,docma,function(t,n){if(t)throw t;m.loadCompiledContent(n),"function"==typeof e&&e()})}function o(){t(docma.Event.Render,[docma.currentRoute]),d&&(t(docma.Event.Ready),d=!1)}function r(o,r){docma._.currentRoute=e.create(null),n(docma._.partials.notFound,function(){if(t(docma.Event.Render,[null]),m.scrollTo(),"function"==typeof r)return r(404);throw new Error("Page or content not found for route: "+JSON.stringify(o))})}function a(){if(s){var t=sessionStorage.getItem("redirectPath")||null;if(t)return sessionStorage.removeItem("redirectPath"),l.info("Redirecting to:",t),page.redirect(t),!0}return!1}function i(t){var e=t||window.location.search;return/^[?&]/.test(e)&&(e=e.slice(1)),e||null}var c,u,d=!1,s="path"===docma.app.routing.method,f="_def_",p=docma.utils,m=docma.dom,l={};["log","info","warn","error"].forEach(function(t){!function(){l[t]=function(){docma._.logsEnabled&&console[t].apply(console,arguments)}}()}),docma.addFilter=function(t,e){if(docma.filterExists(t))throw new Error('Filter "'+t+'" already exists.');return dust.filters[t]=e,docma},docma.removeFilter=function(t){return delete dust.filters[t],docma},docma.filterExists=function(t){return"function"==typeof dust.filters[t]};var y=new EventEmitter;docma.Event={Ready:"ready",Render:"render",Route:"route"},docma.on=function(t,e){return y.on.apply(y,arguments),docma},docma.once=function(){return y.once.apply(y,arguments),docma},docma.off=function(){return y.off.apply(y,arguments),docma},docma.addListener=docma.on,docma.addListenerOnce=docma.once,docma.removeListener=docma.off,Object.defineProperty(docma,"currentRoute",{configurable:!1,get:function(){return docma._.currentRoute}}),Object.defineProperty(docma,"documentation",{configurable:!1,get:function(){return docma._.documentation}}),Object.defineProperty(docma,"symbols",{configurable:!1,get:function(){return docma._.symbols}}),e.Type={API:"api",CONTENT:"content"},u=p._values(e.Type),e.prototype.exists=function(){return Boolean(this.id)},e.prototype.isEqualTo=function(t){return!!(t&&t.exists()&&this.exists())&&t.path===this.path},e.prototype.isCurrent=function(){return this.isEqualTo(docma.currentRoute)},e.prototype.apply=function(){return this.type===e.Type.API?(docma._.documentation=docma.apis[this.name].documentation,docma._.symbols=docma.apis[this.name].symbols):(docma._.documentation=null,docma._.symbols=null),t(docma.Event.Route,[this]),docma.render(this),this},e.prototype.toString=function(){return JSON.stringify(this)},e.create=function(t,n){return new e(t,n)},e.fromID=function(t){if("string"!=typeof t)return l.warn("Route ID is not a string: "+t),new e(null);var n=t.split(":");return new e(n[1],n[0])},e.fromQuery=function(t){if(!t)return new e(null);var n=t.split("&")[0].split("="),o=n[0].toLowerCase();return new e(n[1],o)},Object.defineProperty(docma,"Route",{configurable:!1,get:function(){return e}}),docma.fetch=function(t,e){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===n.readyState){var o=200===n.status?n.responseText:"";return l.log("XHR GET:",n.status,t),e(n.status,o)}},n.open("GET",t,!0),n.send()},docma.render=function(t,a){if(!t||!t.exists())return r(t,a);if(!t.isEqualTo(docma.currentRoute)){docma._.currentRoute=t;var i="function"==typeof a;t.type===e.Type.API?n(docma._.partials.api,function(){o(),i&&a(200),m.fixAnchors(),m.scrollTo()}):docma.fetch(t.contentPath,function(e,c){if(404===e)return r(t,a);n(docma._.partials.content,function(){m.loadContent(c),o(),i&&a(e),m.fixAnchors()})})}},docma.app.base&&page.base(docma.app.base),page.redirect("(/)?"+docma.template.main,""),s&&(page("(/)?api/:apiName?",function(t,n){var o=t.params.apiName||f,r=e.create(o,e.Type.API);if(!r||!r.exists())return n();r.apply()}),page("(/)?:content",function(t,n){var o=t.params.content,r=e.create(o,e.Type.CONTENT);if(!r||!r.exists())return n();r.apply()})),page("(/)?",function(t,n){a()||setTimeout(function(){var o,r=i(t.querystring);if(s){if(r)return n();o=c}else l.log("Query-string:",r),o=r?e.fromQuery(r):c;if(!o||!o.exists())return n();o.isCurrent()||o.apply()},100)}),page("*",function(t){l.warn("Unknown Route:",t.path),e.create(null).apply()}),l.info("Docma SPA Configuration:"),l.info("App Title:          ",docma.app.title),l.info("Routing Method:     ",docma.app.routing.method),l.info("App Server:         ",docma.app.server),l.info("Base Path:          ",docma.app.base),l.info("Entrance Route ID:  ",docma.app.entrance),window.onload=function(){d=!0,c=e.fromID(docma.app.entrance),page.start({click:!0,popstate:!0,dispatch:!0,hashbang:!1,decodeURLComponents:!0}),l.info("Docma SPA loaded!")}}();
docma = Object.freeze(docma);